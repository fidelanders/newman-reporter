{
  "collection": {
    "_": {
      "postman_id": "06d6db21-cf2e-4733-a148-ea257acbcfc2",
      "exporter_id": "16533226",
      "collection_link": "https://fidelanders.postman.co/workspace/Dandys-API~80136c10-93f3-405d-af51-4d0458093628/collection/16533226-06d6db21-cf2e-4733-a148-ea257acbcfc2?action=share&source=collection_link&creator=16533226"
    },
    "item": [
      {
        "id": "6115c1e2-0325-4457-bb56-e1b4558902b8",
        "name": "User",
        "item": [
          {
            "id": "69392129-b8eb-4590-b3e9-45c67d82d43c",
            "name": "Sign Up Tests",
            "item": [
              {
                "id": "d8f9f590-8ef5-4d16-b2cc-6aa656df3de9",
                "name": "Sign Up",
                "request": {
                  "url": {
                    "path": [
                      "auth",
                      "signup",
                      ""
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{currentPayload}}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4f039f0-77ab-4be6-be17-640298317f49",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "let response = pm.response.json();\r",
                        "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                        "\r",
                        "const expectedStatus = {\r",
                        "    \"valid_signup\": 200 || 201,\r",
                        "    \"missing_email\": 400,\r",
                        "    \"missing_password\": 400,\r",
                        "    \"invalid_email_format\": 400,\r",
                        "    \"weak_password\": 400,\r",
                        "    \"existing_email\": 409\r",
                        "};\r",
                        "\r",
                        "// ✅ Test Case 1: Validate Status Code\r",
                        "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                        "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                        "});\r",
                        "\r",
                        "// Handle successful signup response\r",
                        "if (pm.response.code === 200 || 201) {\r",
                        "    // ✅ Test Case 2: Verify Success Field\r",
                        "    pm.test(\"Verify that the success field is true\", function () {\r",
                        "        pm.expect(response.success).to.eql(true);\r",
                        "    });\r",
                        "\r",
                        "    // ✅ Test Case 3: Check Message Field Value\r",
                        "    pm.test(\"Check that the message field is 'User registered successfully'\", function () {\r",
                        "        pm.expect(response.message).to.includes(\"User sign up successful\");\r",
                        "    });\r",
                        "\r",
                        "    // ✅ Test Case 4: Validate User Data Fields\r",
                        "    pm.test(\"Validate that the user data fields are present\", function () {\r",
                        "        let user = response.data.user;\r",
                        "\r",
                        "        pm.expect(user).to.have.property(\"email\");\r",
                        "        pm.expect(user).to.have.property(\"fullName\");\r",
                        "        pm.expect(user).to.have.property(\"firstName\");\r",
                        "        pm.expect(user).to.have.property(\"lastName\");\r",
                        "    });\r",
                        "\r",
                        "    // ✅ Test Case 5: Validate Email Matches Request\r",
                        "    pm.test(\"Validate that the email in response matches the request\", function () {\r",
                        "        let requestData = JSON.parse(pm.request.body.raw);\r",
                        "        pm.expect(response.data.user.email).to.eql(requestData.email);\r",
                        "    });\r",
                        "\r",
                        "    // ✅ Test Case 6: Validate Response Time\r",
                        "    pm.test(\"Validate that the response time is less than 1000ms\", function () {\r",
                        "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                        "    });\r",
                        "\r",
                        "} \r",
                        "// Handle error cases\r",
                        "else {\r",
                        "    pm.test(\"Response contains an error message\", function () {\r",
                        "        pm.expect(response).to.have.property(\"error\");\r",
                        "        pm.expect(response.error).to.be.a(\"string\");\r",
                        "    });\r",
                        "}\r",
                        "\r",
                        "// ✅ Store email for Future Requests\r",
                        "pm.environment.set(\"reg.email\", response.data.user.email);"
                      ],
                      "_lastExecutionId": "b4f62ae2-4c54-404b-8a87-78c1d79292d9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "59a31cda-0ddb-4848-be21-60cba4c17a78",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "function getRandomNames() {\r",
                        "    const names = [\r",
                        "        \"James\", \"Mary\", \"John\", \"Patricia\", \"Robert\", \"Jennifer\", \"Ben\", \r",
                        "        \"Michael\", \"Linda\", \"William\", \"Elizabeth\", \"David\", \"Johnson\", \r",
                        "        \"Richard\", \"Fydel\", \"Joseph\", \"Jessica\", \"Thomas\", \"Sarah\", \"Ojay\", \"Rodri\",\r",
                        "        \"Charles\", \"Karen\", \"Christopher\", \"Lisa\", \"Daniel\", \"Nancy\", \"Walter\",\r",
                        "        \"Friedrich\", \"Betty\", \"Anthony\", \"Margaret\", \"Mark\", \"Sandra\", \"James\"\r",
                        "    ];\r",
                        "\r",
                        "    // Ensure firstName and lastName are different\r",
                        "    let firstName = names[Math.floor(Math.random() * names.length)];\r",
                        "    let lastName = names[Math.floor(Math.random() * names.length)];\r",
                        "\r",
                        "    // If firstName and lastName are the same, keep generating a new lastName until they are different\r",
                        "    while (firstName === lastName) {\r",
                        "        lastName = names[Math.floor(Math.random() * names.length)];\r",
                        "    }\r",
                        "\r",
                        "    return { firstName, lastName };\r",
                        "}\r",
                        "\r",
                        "// Generate random first and last names\r",
                        "const { firstName: randomFirstName, lastName: randomLastName } = getRandomNames();\r",
                        "\r",
                        "// Function to generate a random email\r",
                        "function generateRandomEmail() {\r",
                        "    return `test_${Math.floor(Math.random() * 1000)}@example.com`;\r",
                        "}\r",
                        "\r",
                        "\r",
                        "// Define test cases\r",
                        "const testCases = {\r",
                        "    \"valid_signup\": { \r",
                        "        \"firstName\": randomFirstName, \r",
                        "        \"lastName\": randomLastName, \r",
                        "        \"email\": generateRandomEmail(), \r",
                        "        \"accountType\": \"SELLER\", \r",
                        "        \"password\": \"Pass$12345\"\r",
                        "    },\r",
                        "    \"missing_email\": { \r",
                        "        \"firstName\": randomFirstName, \r",
                        "        \"lastName\": randomLastName, \r",
                        "        \"email\": \"\", \r",
                        "        \"accountType\": \"SELLER\", \r",
                        "        \"password\": \"Pass$12345\" \r",
                        "    },\r",
                        "    \"missing_password\": { \r",
                        "        \"firstName\": randomFirstName, \r",
                        "        \"lastName\": randomLastName, \r",
                        "        \"email\": generateRandomEmail(), \r",
                        "        \"accountType\": \"SELLER\", \r",
                        "        \"password\": \"\" \r",
                        "    },\r",
                        "    \"invalid_email_format\": { \r",
                        "        \"firstName\": randomFirstName, \r",
                        "        \"lastName\": randomLastName, \r",
                        "        \"email\": \"invalid-email\", \r",
                        "        \"accountType\": \"SELLER\", \r",
                        "        \"password\": \"Pass$12345\" \r",
                        "    },\r",
                        "    \"weak_password\": { \r",
                        "        \"firstName\": randomFirstName, \r",
                        "        \"lastName\": randomLastName, \r",
                        "        \"email\": generateRandomEmail(), \r",
                        "        \"accountType\": \"SELLER\", \r",
                        "        \"password\": \"123\" \r",
                        "    },\r",
                        "    \"existing_email\": { \r",
                        "        \"firstName\": randomFirstName, \r",
                        "        \"lastName\": randomLastName, \r",
                        "        \"email\": \"existing@mail.com\", \r",
                        "        \"accountType\": \"SELLER\", \r",
                        "        \"password\": \"Pass$12345\" \r",
                        "    }\r",
                        "};\r",
                        "\r",
                        "// Get the current test case (default: valid_signup)\r",
                        "let testCase = pm.environment.get(\"testCase\") || \"valid_signup\";\r",
                        "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                        "\r",
                        "// Set request headers for tracking\r",
                        "pm.request.headers.add({ key: \"Test-Case\", value: testCase });"
                      ],
                      "_lastExecutionId": "26ab5470-ea2c-4a43-899a-c348e6393456"
                    }
                  }
                ]
              },
              {
                "id": "35d2eee9-d0d0-4f72-b3a1-c8813ba5ec55",
                "name": "Sign In",
                "request": {
                  "url": {
                    "path": [
                      "auth",
                      "signin",
                      ""
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{currentPayload}}\r\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "55e46cb1-55da-47b8-bc30-7e5b003a4891",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "const reg_pass = \"Pass$12345\";\r",
                        "pm.environment.set(\"reg.pass\", reg_pass)\r",
                        "\r",
                        "const testCases = {\r",
                        "    \"valid_login\": { \r",
                        "        \"email\":  pm.environment.get(\"reg.email\"), \r",
                        "        \"password\": reg_pass\r",
                        "    },\r",
                        "    \"missing_email\": { \r",
                        "        \"email\": \"\", \r",
                        "        \"password\": \"Pass$50000\" \r",
                        "    },\r",
                        "    \"missing_password\": { \r",
                        "        \"email\": \"existing@mail.com\", \r",
                        "        \"password\": \"\" \r",
                        "    },\r",
                        "    \"invalid_email_format\": { \r",
                        "        \"email\": \"invalid-email\", \r",
                        "        \"password\": \"Pass$50000\" \r",
                        "    },\r",
                        "    \"incorrect_password\": { \r",
                        "        \"email\": \"existing@mail.com\", \r",
                        "        \"password\": \"WrongPass123\" \r",
                        "    },\r",
                        "    \"unregistered_email\": { \r",
                        "        \"email\": \"unregistered@mail.com\", \r",
                        "        \"password\": \"Pass$50000\" \r",
                        "    }\r",
                        "};\r",
                        "\r",
                        "// Get the current test case (default: valid_login)\r",
                        "let testCase = pm.environment.get(\"testCase\") || \"valid_login\";\r",
                        "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                        "\r",
                        "// Set request headers for tracking\r",
                        "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                        "\r",
                        ""
                      ],
                      "_lastExecutionId": "1393dfc4-17cf-4e1c-be03-c53323b75368"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3ff003c4-300f-445a-aced-aa59ac67ca18",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "let response = pm.response.json();\r",
                        "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                        "\r",
                        "const expectedStatus = {\r",
                        "    \"valid_login\": 200,\r",
                        "    \"missing_email\": 400,\r",
                        "    \"missing_password\": 400,\r",
                        "    \"invalid_email_format\": 400,\r",
                        "    \"incorrect_password\": 401,\r",
                        "    \"unregistered_email\": 404\r",
                        "};\r",
                        "\r",
                        "// ✅ Test Case 1: Validate Status Code\r",
                        "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                        "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                        "});\r",
                        "\r",
                        "// Handle successful login response\r",
                        "if (pm.response.code === 200) {\r",
                        "    // ✅ Test Case 2: Verify Success Field Value\r",
                        "    pm.test(\"Verify that the success field is true\", function () {\r",
                        "        pm.expect(response.success).to.eql(true);\r",
                        "    });\r",
                        "\r",
                        "    // ✅ Test Case 3: Check Message Field Value\r",
                        "    pm.test(\"Check that the message field is 'User sign in successful'\", function () {\r",
                        "        pm.expect(response.message).to.eql(\"User sign in successful\");\r",
                        "    });\r",
                        "\r",
                        "    // ✅ Test Case 4: Validate Token Field\r",
                        "    pm.test(\"Validate that the token field is present and not empty\", function () {\r",
                        "        pm.expect(response.data.token).to.be.a('string');\r",
                        "        pm.expect(response.data.token.length).to.be.greaterThan(0);\r",
                        "    });\r",
                        "\r",
                        "    // ✅ Test Case 5: Verify Expiration Timestamp Format\r",
                        "    pm.test(\"Verify that the expiration timestamp is in ISO 8601 format\", function () {\r",
                        "        let expiresIn = response.data.expiresIn;\r",
                        "        pm.expect(new Date(expiresIn).toISOString()).to.eql(expiresIn);\r",
                        "    });\r",
                        "\r",
                        "    // ✅ Test Case 6: Validate User Data Fields\r",
                        "    pm.test(\"Validate that the user data fields are correct\", function () {\r",
                        "        let user = response.data.user;\r",
                        "        \r",
                        "        pm.expect(user.id).to.not.eql(null);\r",
                        "        pm.expect(user.email).to.not.eql(null);\r",
                        "        pm.expect(user.fullName).to.not.eql(null);\r",
                        "        pm.expect(user.firstName).to.not.eql(null);\r",
                        "        pm.expect(user.lastName).to.not.eql(null);\r",
                        "    });\r",
                        "\r",
                        "    pm.environment.set(\"userId\", response.data.user.id)\r",
                        "\r",
                        "    // ✅ Test Case 7: Verify KYC Status\r",
                        "    pm.test(\"Verify that the KYC status is false\", function () {\r",
                        "        pm.expect(response.data.user.kycCompleted).to.eql(false);\r",
                        "    });\r",
                        "\r",
                        "    // ✅ Test Case 8: Validate Avatar Field\r",
                        "    pm.test(\"Validate that the avatar field is empty\", function () {\r",
                        "        pm.expect(response.data.user.avatar).to.eql(\"\");\r",
                        "    });\r",
                        "\r",
                        "    // ✅ Test Case 9: Check Token Format (JWT)\r",
                        "    pm.test(\"Check that the token is in a valid JWT format\", function () {\r",
                        "        let token = response.data.token;\r",
                        "        let tokenParts = token.split('.');\r",
                        "\r",
                        "        pm.expect(tokenParts).to.have.lengthOf(3);\r",
                        "        pm.expect(tokenParts[0]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                        "        pm.expect(tokenParts[1]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                        "        pm.expect(tokenParts[2]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                        "    });\r",
                        "\r",
                        "    // ✅ Test Case 10: Validate Response Time\r",
                        "    pm.test(\"Validate that the response time is less than 1000ms\", function () {\r",
                        "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                        "    });\r",
                        "\r",
                        "    // ✅ Store Auth Token for Future Requests\r",
                        "    pm.environment.set(\"authToken\", response.data.token);\r",
                        "} \r",
                        "// Handle error cases\r",
                        "else {\r",
                        "    pm.test(\"Response contains error message\", function () {\r",
                        "        pm.expect(response).to.have.property(\"error\");\r",
                        "        pm.expect(response.error).to.be.a(\"string\");\r",
                        "    });\r",
                        "}\r",
                        ""
                      ],
                      "_lastExecutionId": "9140a521-0940-4f9d-bceb-a924a29df1a9"
                    }
                  }
                ]
              },
              {
                "id": "0af48e85-28af-4890-b21c-a589012da367",
                "name": "Request reset password",
                "request": {
                  "url": {
                    "path": [
                      "auth",
                      "password",
                      "reset"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{currentPayload}}\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "66b9690c-e3c2-4bca-a4ae-0fe02dbd0505",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "let response = pm.response.json();\r",
                        "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                        "\r",
                        "const expectedStatus = {\r",
                        "    \"valid_request\": 200,\r",
                        "    \"missing_email\": 400,\r",
                        "    \"invalid_email_format\": 400,\r",
                        "    \"unregistered_email\": 404\r",
                        "};\r",
                        "\r",
                        "// ✅ Test Case 1: Validate Status Code\r",
                        "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                        "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                        "});\r",
                        "\r",
                        "// Handle success case\r",
                        "if (pm.response.code === 200) {\r",
                        "    // ✅ Test Case 2: Verify Success Field\r",
                        "    pm.test(\"Verify that the success field is true\", function () {\r",
                        "        pm.expect(response.success).to.eql(true);\r",
                        "    });\r",
                        "\r",
                        "    // ✅ Test Case 3: Check Message Field Value\r",
                        "    pm.test(\"Check that the message field is 'Password reset OTP sent successfully'\", function () {\r",
                        "        pm.expect(response.message).to.eql(\"Password reset OTP sent successfully\");\r",
                        "    });\r",
                        "\r",
                        "    // ✅ Test Case 4: Validate OTP Code Field\r",
                        "    pm.test(\"Validate that the OTP code is present and is a 6-digit string\", function () {\r",
                        "        pm.expect(response.data).to.have.property(\"otpCode\");\r",
                        "        pm.expect(response.data.otpCode).to.match(/^\\d{6}$/);\r",
                        "    });\r",
                        "\r",
                        "    // ✅ Test Case 5: Validate Response Time\r",
                        "    pm.test(\"Validate that the response time is less than 1000ms\", function () {\r",
                        "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                        "    });\r",
                        "\r",
                        "} \r",
                        "// Handle error cases\r",
                        "else {\r",
                        "    pm.test(\"Response contains an error message\", function () {\r",
                        "        pm.expect(response).to.have.property(\"error\");\r",
                        "        pm.expect(response.error).to.be.a(\"string\");\r",
                        "    });\r",
                        "\r",
                        "    // ✅ Specific Error Messages Per Test Case\r",
                        "    if (testCase === \"missing_email\") {\r",
                        "        pm.test(\"Error message should mention missing email\", function () {\r",
                        "            pm.expect(response.error).to.match(/missing.*email/i);\r",
                        "        });\r",
                        "    } \r",
                        "    else if (testCase === \"invalid_email_format\") {\r",
                        "        pm.test(\"Error message should indicate invalid email format\", function () {\r",
                        "            pm.expect(response.error).to.match(/invalid.*email/i);\r",
                        "        });\r",
                        "    } \r",
                        "    else if (testCase === \"unregistered_email\") {\r",
                        "        pm.test(\"Error message should indicate unregistered email\", function () {\r",
                        "            pm.expect(response.error).to.match(/not found|unregistered/i);\r",
                        "        });\r",
                        "    }\r",
                        "}\r",
                        "\r",
                        "pm.environment.set(\"valid.otpCode\", response.data.otpCode)"
                      ],
                      "_lastExecutionId": "69ce6c8c-575e-4b12-8e5d-5fc5d9ca9cfc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9484ff8b-e2d9-484c-a168-d5e1bcc6dc61",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "const testCases = {\r",
                        "    \"valid_request\": { \r",
                        "        \"email\": pm.environment.get(\"reg.email\")\r",
                        "    },\r",
                        "    \"missing_email\": { \r",
                        "        \"email\": \"\"\r",
                        "    },\r",
                        "    \"invalid_email_format\": { \r",
                        "        \"email\": \"invalid-email\"\r",
                        "    },\r",
                        "    \"unregistered_email\": { \r",
                        "        \"email\": \"unregistered@mail.com\"\r",
                        "    }\r",
                        "};\r",
                        "\r",
                        "// Get the current test case (default: valid_request)\r",
                        "let testCase = pm.environment.get(\"testCase\") || \"valid_request\";\r",
                        "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                        "\r",
                        "// Set request headers for tracking\r",
                        "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                        ""
                      ],
                      "_lastExecutionId": "f2489351-b72d-469a-883a-507921b322a5"
                    }
                  }
                ]
              },
              {
                "id": "0cfb3ae3-a106-41d2-9f35-3839d9da9a60",
                "name": "Reset password",
                "request": {
                  "url": {
                    "path": [
                      "auth",
                      "password",
                      "reset"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "PUT",
                  "body": {
                    "mode": "raw",
                    "raw": "{{currentPayload}}\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3640d26f-70b3-4b79-8b83-3a7b8a74fbfa",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// Parse JSON response\r",
                        "let response = pm.response.json();\r",
                        "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                        "\r",
                        "// Expected status codes for each test case\r",
                        "const expectedStatus = {\r",
                        "    \"valid_request\": 200,\r",
                        "    \"missing_email\": 400,\r",
                        "    \"invalid_email_format\": 400,\r",
                        "    \"unregistered_email\": 404,\r",
                        "    \"missing_otp\": 400,\r",
                        "    \"missing_password\": 400,\r",
                        "    \"invalid_otp_format\": 400,\r",
                        "    \"expired_otp\": 403,\r",
                        "    \"same_old_new_password\": 400,\r",
                        "    \"used_otp\": 403\r",
                        "};\r",
                        "\r",
                        "// ✅ Validate Status Code\r",
                        "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                        "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                        "});\r",
                        "\r",
                        "// ✅ Success Case: Valid Request\r",
                        "pm.test(\"[valid_request] Should return success response\", function () {\r",
                        "    if (testCase === \"valid_request\") {\r",
                        "        pm.expect(response.success).to.eql(true);\r",
                        "        pm.expect(response.message).to.eql(\"Password reset successfully\");\r",
                        "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                        "    }\r",
                        "});\r",
                        "\r",
                        "// ✅ Error Cases: Missing or Invalid Input\r",
                        "pm.test(\"[missing_email] Should return an error for missing email\", function () {\r",
                        "    if (testCase === \"missing_email\") {\r",
                        "        pm.expect(response.error).to.match(/missing.*email/i);\r",
                        "    }\r",
                        "});\r",
                        "\r",
                        "pm.test(\"[invalid_email_format] Should return an error for invalid email format\", function () {\r",
                        "    if (testCase === \"invalid_email_format\") {\r",
                        "        pm.expect(response.error).to.match(/invalid.*email/i);\r",
                        "    }\r",
                        "});\r",
                        "\r",
                        "pm.test(\"[unregistered_email] Should return an error for unregistered email\", function () {\r",
                        "    if (testCase === \"unregistered_email\") {\r",
                        "        pm.expect(response.error).to.match(/not found|unregistered/i);\r",
                        "    }\r",
                        "});\r",
                        "\r",
                        "pm.test(\"[missing_otp] Should return an error for missing OTP\", function () {\r",
                        "    if (testCase === \"missing_otp\") {\r",
                        "        pm.expect(response.error).to.match(/missing.*otp/i);\r",
                        "    }\r",
                        "});\r",
                        "\r",
                        "pm.test(\"[invalid_otp_format] Should return an error for invalid OTP format\", function () {\r",
                        "    if (testCase === \"invalid_otp_format\") {\r",
                        "        pm.expect(response.error).to.match(/invalid.*otp/i);\r",
                        "    }\r",
                        "});\r",
                        "\r",
                        "pm.test(\"[expired_otp] Should return an error for expired OTP\", function () {\r",
                        "    if (testCase === \"expired_otp\") {\r",
                        "        pm.expect(response.error).to.match(/expired.*otp/i);\r",
                        "    }\r",
                        "});\r",
                        "\r",
                        "pm.test(\"[same_old_new_password] Should return an error for using the same password\", function () {\r",
                        "    if (testCase === \"same_old_new_password\") {\r",
                        "        pm.expect(response.error).to.match(/new password cannot be the same as old/i);\r",
                        "    }\r",
                        "});\r",
                        "\r",
                        "pm.test(\"[used_otp] Should return an error for used OTP\", function () {\r",
                        "    if (testCase === \"used_otp\") {\r",
                        "        pm.expect(response.error).to.match(/otp code has been used/i);\r",
                        "    }\r",
                        "});\r",
                        ""
                      ],
                      "_lastExecutionId": "f1a96c18-4e92-4b13-b9da-99934f2059d6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b87a7bd6-3722-42d2-b1b6-276d591d186d",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// Generate a random new password for testing\r",
                        "const newPassword = `Pass${Math.floor(Math.random() * 10000)}`;\r",
                        "pm.environment.set(\"newPassword\", newPassword);  // Store in environment\r",
                        "\r",
                        "\r",
                        "// Define test cases with different input scenarios\r",
                        "const testCases = {\r",
                        "    \"valid_request\": { \r",
                        "        \"email\": pm.environment.get(\"reg.email\"),\r",
                        "        \"otpCode\": pm.environment.get(\"valid.otpCode\"),\r",
                        "        \"password\": newPassword  \r",
                        "    },\r",
                        "    \"missing_email\": { \r",
                        "        \"email\": \"\",  \r",
                        "        \"otpCode\": \"248015\",\r",
                        "        \"password\": newPassword\r",
                        "    },\r",
                        "    \"missing_otp\": { \r",
                        "        \"email\": pm.environment.get(\"reg.email\"),\r",
                        "        \"otpCode\": \"\",\r",
                        "        \"password\": newPassword\r",
                        "    },\r",
                        "    \"missing_password\": { \r",
                        "        \"email\": pm.environment.get(\"reg.email\"),\r",
                        "        \"otpCode\": \"248015\",\r",
                        "        \"password\": \"\"\r",
                        "    },\r",
                        "    \"invalid_otp_format\": { \r",
                        "        \"email\": pm.environment.get(\"reg.email\"),\r",
                        "        \"otpCode\": \"abcd123\",  // OTP should be numeric\r",
                        "        \"password\": newPassword\r",
                        "    },\r",
                        "    \"expired_otp\": { \r",
                        "        \"email\": pm.environment.get(\"reg.email\"),\r",
                        "        \"otpCode\": \"999999\",  // Simulating expired OTP\r",
                        "        \"password\": newPassword\r",
                        "    },\r",
                        "    \"unregistered_email\": { \r",
                        "        \"email\": \"unregistered@mail.com\",\r",
                        "        \"otpCode\": \"248015\",\r",
                        "        \"password\": newPassword\r",
                        "    },\r",
                        "    \"used_otp\": { \r",
                        "        \"email\": pm.environment.get(\"reg.email\"),\r",
                        "        \"otpCode\": \"123456\",  // Simulating an already used OTP\r",
                        "        \"password\": newPassword\r",
                        "    }\r",
                        "};\r",
                        "\r",
                        "// Get the current test case from environment (default to valid_request)\r",
                        "let testCase = pm.environment.get(\"testCase\") || \"valid_request\";\r",
                        "\r",
                        "// Store the selected test case payload as the request body\r",
                        "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                        "\r",
                        "// Set request headers for tracking\r",
                        "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                        "\r",
                        "// Log the test case for debugging in Postman Console\r",
                        "console.log(`Running test case: ${testCase}`, testCases[testCase]);\r",
                        ""
                      ],
                      "_lastExecutionId": "5fb960e2-cf7e-4087-b903-58d48f887cfe"
                    }
                  }
                ]
              },
              {
                "id": "7ab6bd71-383f-4e5c-bd73-632e6bc3bef1",
                "name": "Change password",
                "request": {
                  "url": {
                    "path": [
                      "auth",
                      "password",
                      "change"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "PUT",
                  "body": {
                    "mode": "raw",
                    "raw": "{{currentPayload}}\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a310fca9-96aa-4499-979b-42b2240ad03b",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// Retrieve test case and response body\r",
                        "let testCase = pm.environment.get(\"testCase\") || \"valid_request\";\r",
                        "let jsonResponse = pm.response.json();\r",
                        "let expectedPayload = JSON.parse(pm.environment.get(\"currentPayload\"));\r",
                        "\r",
                        "// Test Case 1: Validate Status Code for Successful Password Change\r",
                        "if (testCase === \"valid_request\") {\r",
                        "    pm.test(\"Validate that the status code is 200 for successful password change\", function () {\r",
                        "        pm.response.to.have.status(200);\r",
                        "    });\r",
                        "\r",
                        "    pm.test(\"Verify that the success message is 'Password changed successfully'\", function () {\r",
                        "        pm.expect(jsonResponse.success).to.eql(true);\r",
                        "        pm.expect(jsonResponse.message).to.eql(\"Password changed successfully\");\r",
                        "    });\r",
                        "\r",
                        "    pm.test(\"Check response structure contains 'success' and 'message'\", function () {\r",
                        "        pm.expect(jsonResponse).to.have.all.keys(\"success\", \"message\");\r",
                        "        pm.expect(jsonResponse.success).to.be.a(\"boolean\");\r",
                        "        pm.expect(jsonResponse.message).to.be.a(\"string\");\r",
                        "    });\r",
                        "}\r",
                        "\r",
                        "// Test Case 2: Verify Status Code and Message for Missing Email\r",
                        "if (testCase === \"missing_email\") {\r",
                        "    pm.test(\"Validate that the status code is 400 for missing email\", function () {\r",
                        "        pm.response.to.have.status(400);\r",
                        "    });\r",
                        "\r",
                        "    pm.test(\"Verify that the error message is 'Email field is required'\", function () {\r",
                        "        pm.expect(jsonResponse.success).to.eql(false);\r",
                        "        pm.expect(jsonResponse.message).to.eql(\"Email field is required\");\r",
                        "    });\r",
                        "}\r",
                        "\r",
                        "// Test Case 3: Validate Status Code and Message for Missing Old Password\r",
                        "if (testCase === \"missing_old_password\") {\r",
                        "    pm.test(\"Validate that the status code is 400 for missing old password\", function () {\r",
                        "        pm.response.to.have.status(400);\r",
                        "    });\r",
                        "\r",
                        "    pm.test(\"Verify that the error message is 'Old password is required'\", function () {\r",
                        "        pm.expect(jsonResponse.success).to.eql(false);\r",
                        "        pm.expect(jsonResponse.message).to.eql(\"Old password is required\");\r",
                        "    });\r",
                        "}\r",
                        "\r",
                        "// Test Case 4: Validate Status Code and Message for Missing New Password\r",
                        "if (testCase === \"missing_new_password\") {\r",
                        "    pm.test(\"Validate that the status code is 400 for missing new password\", function () {\r",
                        "        pm.response.to.have.status(400);\r",
                        "    });\r",
                        "\r",
                        "    pm.test(\"Verify that the error message is 'New password is required'\", function () {\r",
                        "        pm.expect(jsonResponse.success).to.eql(false);\r",
                        "        pm.expect(jsonResponse.message).to.eql(\"New password is required\");\r",
                        "    });\r",
                        "}\r",
                        "\r",
                        "// Test Case 5: Verify Status Code and Message for Same Old and New Password\r",
                        "if (testCase === \"same_old_new_password\") {\r",
                        "    pm.test(\"Validate that the status code is 400 when old and new passwords are the same\", function () {\r",
                        "        pm.response.to.have.status(400);\r",
                        "    });\r",
                        "\r",
                        "    pm.test(\"Verify that the error message is 'New password must be different from the old password'\", function () {\r",
                        "        pm.expect(jsonResponse.success).to.eql(false);\r",
                        "        pm.expect(jsonResponse.message).to.eql(\"New password must be different from the old password\");\r",
                        "    });\r",
                        "}\r",
                        "\r",
                        "// Test Case 6: Validate Status Code and Message for Incorrect Old Password\r",
                        "if (testCase === \"incorrect_old_password\") {\r",
                        "    pm.test(\"Validate that the status code is 400 for incorrect old password\", function () {\r",
                        "        pm.response.to.have.status(400);\r",
                        "    });\r",
                        "\r",
                        "    pm.test(\"Verify that the error message is 'Incorrect old password'\", function () {\r",
                        "        pm.expect(jsonResponse.success).to.eql(false);\r",
                        "        pm.expect(jsonResponse.message).to.eql(\"Incorrect old password\");\r",
                        "    });\r",
                        "}\r",
                        "\r",
                        "// Test Case 7: Validate Status Code and Message for Unregistered Email\r",
                        "if (testCase === \"unregistered_email\") {\r",
                        "    pm.test(\"Validate that the status code is 404 for unregistered email\", function () {\r",
                        "        pm.response.to.have.status(404);\r",
                        "    });\r",
                        "\r",
                        "    pm.test(\"Verify that the error message is 'Email address not found'\", function () {\r",
                        "        pm.expect(jsonResponse.success).to.eql(false);\r",
                        "        pm.expect(jsonResponse.message).to.eql(\"Email address not found\");\r",
                        "    });\r",
                        "}\r",
                        "\r",
                        "// General Test Case: Validate Response Time\r",
                        "pm.test(\"Validate that the response time for password change is less than 1000ms\", function () {\r",
                        "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                        "});\r",
                        "\r",
                        "// Log Test Case Execution\r",
                        "console.log(`Executed test case: ${testCase}`, expectedPayload);\r",
                        ""
                      ],
                      "_lastExecutionId": "f15e6632-0783-4cb5-a3f6-3af25a06f62b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e813ff3a-44d9-4442-b93c-c6826fab09d1",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// ✅ Generate a new password dynamically\r",
                        "const changePassword = `Pass${Math.floor(1000 + Math.random() * 9000)}`; // Ensures a 4-digit random number\r",
                        "pm.environment.set(\"changePassword\", changePassword)\r",
                        "\r",
                        "// ✅ Retrieve stored email and old password\r",
                        "const email = pm.environment.get(\"reg.email\");\r",
                        "const oldPassword = pm.environment.get(\"newPassword\");\r",
                        "\r",
                        "// ✅ Define multiple test cases\r",
                        "const testCases = {\r",
                        "    \"valid_request\": { \r",
                        "        \"email\": email,\r",
                        "        \"oldPassword\": oldPassword,\r",
                        "        \"newPassword\": changePassword\r",
                        "    },\r",
                        "    \"missing_email\": { \r",
                        "        \"email\": \"\",\r",
                        "        \"oldPassword\": oldPassword,\r",
                        "        \"newPassword\": changePassword\r",
                        "    },\r",
                        "    \"missing_old_password\": { \r",
                        "        \"email\": email,\r",
                        "        \"oldPassword\": \"\",\r",
                        "        \"newPassword\": changePassword\r",
                        "    },\r",
                        "    \"missing_new_password\": { \r",
                        "        \"email\": email,\r",
                        "        \"oldPassword\": oldPassword,\r",
                        "        \"newPassword\": \"\"\r",
                        "    },\r",
                        "    \"same_old_new_password\": { \r",
                        "        \"email\": email,\r",
                        "        \"oldPassword\": oldPassword,\r",
                        "        \"newPassword\": oldPassword  // Ensures old and new passwords are the same\r",
                        "    },\r",
                        "    \"incorrect_old_password\": { \r",
                        "        \"email\": email,\r",
                        "        \"oldPassword\": \"WrongPass$000\",  // Intentionally incorrect\r",
                        "        \"newPassword\": changePassword\r",
                        "    },\r",
                        "    \"unregistered_email\": { \r",
                        "        \"email\": \"unknownuser@mail.com\",\r",
                        "        \"oldPassword\": oldPassword,\r",
                        "        \"newPassword\": changePassword\r",
                        "    }\r",
                        "};\r",
                        "\r",
                        "// ✅ Get test case from environment or default to valid request\r",
                        "let testCase = pm.environment.get(\"testCase\") || \"valid_request\";\r",
                        "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                        "\r",
                        "// ✅ Set request headers for tracking\r",
                        "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                        "\r",
                        "// ✅ Log output for debugging\r",
                        "console.log(`Running test case: ${testCase}`, testCases[testCase]);\r",
                        "console.log(`New password generated and stored: ${changePassword}`);\r",
                        ""
                      ],
                      "_lastExecutionId": "077a431c-e721-4525-b644-fb94b3622082"
                    }
                  }
                ]
              },
              {
                "id": "765619d5-b6bd-40a2-95d0-39671d0b85de",
                "name": "Request email confirmation",
                "request": {
                  "url": {
                    "path": [
                      "auth",
                      "confirmation",
                      "request",
                      "email"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{currentPayload}}\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7502f216-0b7d-4dab-a59d-12d1bc961fbd",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// Define test cases for different input scenarios\r",
                        "const testCases = {\r",
                        "    \"valid_request\": {\r",
                        "    \"email\": pm.environment.get(\"reg.email\")\r",
                        "},\r",
                        "    \"missing_email\": { \r",
                        "        \"email\": \"\"  // No email provided\r",
                        "    },\r",
                        "    \"invalid_email_format\": { \r",
                        "        \"email\": \"invalid-email\"  // Invalid email format\r",
                        "    },\r",
                        "    \"unregistered_email\": { \r",
                        "        \"email\": \"unknownuser@mail.com\"  // Email not in system\r",
                        "    },\r",
                        "    \"already_confirmed_email\": { \r",
                        "        \"email\": \"testog@e-record.com\"  // Email not in system\r",
                        "    }\r",
                        "};\r",
                        "\r",
                        "// Get the current test case from environment (default to valid_request)\r",
                        "let testCase = pm.environment.get(\"testCase\") || \"valid_request\";\r",
                        "\r",
                        "// Store the selected test case payload as the request body\r",
                        "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                        "\r",
                        "// Set request headers for tracking\r",
                        "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                        "\r",
                        "// Log the test case for debugging in Postman Console\r",
                        "console.log(`Running test case: ${testCase}`, testCases[testCase]);\r",
                        ""
                      ],
                      "_lastExecutionId": "e2867971-68d8-4f34-94b4-1e915fcd3846"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7b420c78-b6dd-4cf6-a428-2dc6fcd23f5d",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// Parse response\r",
                        "let response = pm.response.json();\r",
                        "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                        "\r",
                        "// Expected status codes\r",
                        "const expectedStatusCodes = {\r",
                        "    \"valid_request\": 200,\r",
                        "    \"missing_email\": 400,\r",
                        "    \"invalid_email_format\": 400,\r",
                        "    \"unregistered_email\": 404\r",
                        "};\r",
                        "\r",
                        "// ✅ Validate Status Code\r",
                        "pm.test(`[${testCase}] Status should be ${expectedStatusCodes[testCase]}`, function () {\r",
                        "    pm.response.to.have.status(expectedStatusCodes[testCase]);\r",
                        "});\r",
                        "\r",
                        "// ✅ Success Scenario (valid request)\r",
                        "pm.test(\"[valid_request] Verify success response\", function () {\r",
                        "    if (testCase === \"valid_request\") {\r",
                        "        pm.expect(response.success).to.eql(true);\r",
                        "        pm.expect(response.message).to.include(\"confirmation request sent successfully\");\r",
                        "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                        "    }\r",
                        "});\r",
                        "\r",
                        "// ❌ Error Scenario: Missing Email\r",
                        "pm.test(\"[missing_email] Error should mention missing email\", function () {\r",
                        "    if (testCase === \"missing_email\") {\r",
                        "        pm.expect(response.error).to.match(/missing.*email/i);\r",
                        "    }\r",
                        "});\r",
                        "\r",
                        "// ❌ Error Scenario: Invalid Email Format\r",
                        "pm.test(\"[invalid_email_format] Error should indicate invalid email format\", function () {\r",
                        "    if (testCase === \"invalid_email_format\") {\r",
                        "        pm.expect(response.error).to.match(/invalid.*email/i);\r",
                        "    }\r",
                        "});\r",
                        "\r",
                        "// ❌ Error Scenario: Unregistered Email\r",
                        "pm.test(\"[unregistered_email] Error should indicate unregistered email\", function () {\r",
                        "    if (testCase === \"unregistered_email\") {\r",
                        "        pm.expect(response.error).to.match(/not found|unregistered/i);\r",
                        "    }\r",
                        "});\r",
                        ""
                      ],
                      "_lastExecutionId": "dfc5319e-83cc-48f2-a584-090c39845790"
                    }
                  }
                ]
              },
              {
                "id": "83c80dea-dc07-4be0-9b9c-d3b8d859f049",
                "name": "Email confirmation",
                "request": {
                  "url": {
                    "path": [
                      "auth",
                      "confirmation",
                      "email"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"email\": \"{{test.email}}\",\n    \"otpCode\": \"{{retrievedOTP}}\"\n}\n",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d4d7ea6e-85f2-4292-9743-b85e740811d9",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// Define Mail.tm API endpoints\r",
                        "const mailTmBaseUrl = \"https://api.mail.tm\";\r",
                        "const userEmail = pm.environment.get(\"test.email\");  // Ensure you've set this in Postman\r",
                        "const userPassword = pm.environment.get(\"email_password\");  // Ensure this is set in Postman\r",
                        "\r",
                        "// Step 1: Get authentication token for Mail.tm\r",
                        "pm.sendRequest({\r",
                        "    url: `${mailTmBaseUrl}/token`,\r",
                        "    method: \"POST\",\r",
                        "    header: { \"Content-Type\": \"application/json\" },\r",
                        "    body: {\r",
                        "        mode: \"raw\",\r",
                        "        raw: JSON.stringify({\r",
                        "            address: userEmail,\r",
                        "            password: userPassword\r",
                        "        })\r",
                        "    }\r",
                        "}, function (err, res) {\r",
                        "    if (err) {\r",
                        "        console.error(\"Mail.tm Auth Error:\", err);\r",
                        "        return;\r",
                        "    }\r",
                        "\r",
                        "    let token = res.json().token;\r",
                        "    pm.environment.set(\"mailTmToken\", token); // Store token\r",
                        "\r",
                        "    // Step 2: Fetch the latest email\r",
                        "    pm.sendRequest({\r",
                        "        url: `${mailTmBaseUrl}/messages`,\r",
                        "        method: \"GET\",\r",
                        "        header: { \"Authorization\": `Bearer ${token}` }\r",
                        "    }, function (err, res) {\r",
                        "        if (err) {\r",
                        "            console.error(\"Mail.tm Message Fetch Error:\", err);\r",
                        "            return;\r",
                        "        }\r",
                        "\r",
                        "       let messages = res.json()[\"hydra:member\"];\r",
                        "        if (!messages.length) {\r",
                        "            console.warn(\"No OTP emails found.\");\r",
                        "            return;\r",
                        "        }\r",
                        "\r",
                        "        let latestMessageId = messages[0].id; // Get latest message ID\r",
                        "\r",
                        "        // Step 3: Retrieve the OTP from the latest email\r",
                        "        pm.sendRequest({\r",
                        "            url: `${mailTmBaseUrl}/messages/${latestMessageId}`,\r",
                        "            method: \"GET\",\r",
                        "            header: { \"Authorization\": `Bearer ${token}` }\r",
                        "        }, function (err, res) {\r",
                        "            if (err) {\r",
                        "                console.error(\"Mail.tm OTP Extraction Error:\", err);\r",
                        "                return;\r",
                        "            }\r",
                        "\r",
                        "            let emailBody = res.json().text;  \r",
                        "            let otpMatch = emailBody.match(/\\b\\d{6}\\b/);  // Extract the 6-digit OTP\r",
                        "            if (otpMatch) {\r",
                        "                let otpCode = otpMatch[0];\r",
                        "                pm.environment.set(\"retrievedOTP\", otpCode);\r",
                        "                console.log(`✅ OTP Retrieved: ${otpCode}`);\r",
                        "            } else {\r",
                        "                console.warn(\"OTP not found in email body.\");\r",
                        "            }\r",
                        "        });\r",
                        "    });\r",
                        "});\r",
                        ""
                      ],
                      "_lastExecutionId": "83139b44-48ff-46e5-99a6-9323c2063966"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a82fe448-3f4b-4b22-b4bc-74b191457116",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Verify OTP confirmation response\", function () {\r",
                        "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                        "\r",
                        "    let response;\r",
                        "    try {\r",
                        "        response = pm.response.json();\r",
                        "    } catch (e) {\r",
                        "        pm.test(\"Response is a valid JSON\", function () {\r",
                        "            pm.expect(false, \"Invalid JSON response\").to.be.true;\r",
                        "        });\r",
                        "        return; // Stop execution if JSON parsing fails\r",
                        "    }\r",
                        "\r",
                        "    let statusCode = pm.response.code;\r",
                        "\r",
                        "    if (statusCode === 200) {\r",
                        "        // ✅ Success Case: OTP confirmed successfully\r",
                        "        pm.test(\"Status code is 200 (OK)\", function () {\r",
                        "            pm.response.to.have.status(200);\r",
                        "        });\r",
                        "\r",
                        "        pm.test(\"OTP confirmation success message\", function () {\r",
                        "            pm.expect(response.success).to.eql(true);\r",
                        "            pm.expect(response.message).to.match(/successfully confirmed/i);\r",
                        "        });\r",
                        "    } else if (statusCode === 409) {\r",
                        "        // ❌ Error Case: Email already confirmed\r",
                        "        pm.test(\"Status code is 409 (Conflict)\", function () {\r",
                        "            pm.response.to.have.status(409);\r",
                        "        });\r",
                        "\r",
                        "        pm.test(\"Error message for already confirmed email\", function () {\r",
                        "            pm.expect(response.success).to.eql(false);\r",
                        "            pm.expect(response.message).to.eql(\"Email has already been confirmed\");\r",
                        "        });\r",
                        "    } else {\r",
                        "        // ⚠️ Handle unexpected status codes\r",
                        "        pm.test(`Unexpected status code: ${statusCode}`, function () {\r",
                        "            pm.expect(false, `Unexpected response status: ${statusCode}`).to.be.true;\r",
                        "        });\r",
                        "    }\r",
                        "});\r",
                        ""
                      ],
                      "_lastExecutionId": "6ebbed36-cf99-4362-8a8d-551386f9251b"
                    }
                  }
                ]
              },
              {
                "id": "0cb85dc3-7dc7-48b8-b2fc-fa82cb742732",
                "name": "update user",
                "request": {
                  "url": {
                    "path": [
                      "user"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "PUT",
                  "body": {
                    "mode": "raw",
                    "raw": "{{currentPayload}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "type": "string",
                        "value": "{{authToken}}",
                        "key": "token"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "efa8afee-70e4-4747-a958-fd5a404797c5",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// ✅ Ensure Authorization Token is Set\r",
                        "if (!pm.environment.get(\"authToken\")) {\r",
                        "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");\r",
                        "}\r",
                        "\r",
                        "// ✅ Set Authorization Header\r",
                        "pm.request.headers.add({\r",
                        "    key: \"Authorization\",\r",
                        "    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
                        "});\r",
                        "\r",
                        "function getRandomNames() {\r",
                        "    const names = [\r",
                        "        \"James\", \"Mary\", \"John\", \"Patricia\", \"Robert\", \"Jennifer\", \"Ben\", \r",
                        "        \"Michael\", \"Linda\", \"William\", \"Elizabeth\", \"David\", \"Johnson\", \r",
                        "        \"Richard\", \"Fydel\", \"Joseph\", \"Jessica\", \"Thomas\", \"Sarah\", \"Ojay\", \"Rodri\",\r",
                        "        \"Charles\", \"Karen\", \"Christopher\", \"Lisa\", \"Daniel\", \"Nancy\", \"Walter\",\r",
                        "        \"Friedrich\", \"Betty\", \"Anthony\", \"Margaret\", \"Mark\", \"Sandra\", \"James\"\r",
                        "    ];\r",
                        "\r",
                        "    let firstName = names[Math.floor(Math.random() * names.length)];\r",
                        "    let lastName = names[Math.floor(Math.random() * names.length)];\r",
                        "\r",
                        "    while (firstName === lastName) {\r",
                        "        lastName = names[Math.floor(Math.random() * names.length)];\r",
                        "    }\r",
                        "\r",
                        "    return { firstName, lastName };\r",
                        "}\r",
                        "\r",
                        "const { firstName: randomFirstName, lastName: randomLastName } = getRandomNames();\r",
                        "const testPhoneNumber = `0813${Math.floor(1000000 + Math.random() * 9000000)}`;\r",
                        "\r",
                        "const testCases = {\r",
                        "    \"valid_request\": { \r",
                        "        \"firstName\": randomFirstName, \r",
                        "        \"lastName\": randomLastName, \r",
                        "        \"phone\": testPhoneNumber\r",
                        "    },\r",
                        "    \"missing_firstName\": { \r",
                        "        \"firstName\": \"\", \r",
                        "        \"lastName\": randomLastName, \r",
                        "        \"phone\": testPhoneNumber\r",
                        "    },\r",
                        "    \"missing_lastName\": { \r",
                        "        \"firstName\": randomFirstName, \r",
                        "        \"lastName\": \"\", \r",
                        "        \"phone\": testPhoneNumber\r",
                        "    },\r",
                        "    \"missing_phone\": { \r",
                        "        \"firstName\": randomFirstName, \r",
                        "        \"lastName\": randomLastName, \r",
                        "        \"phone\": \"\"\r",
                        "    },\r",
                        "    \"duplicate_phone\": { \r",
                        "        \"firstName\": randomFirstName, \r",
                        "        \"lastName\": randomLastName, \r",
                        "        \"phone\": pm.environment.get(\"existing.phone\") // Assume this exists\r",
                        "    },\r",
                        "    \"invalid_phone_format\": { \r",
                        "        \"firstName\": randomFirstName, \r",
                        "        \"lastName\": randomLastName, \r",
                        "        \"phone\": \"abcd12345\"\r",
                        "    },\r",
                        "    \"special_characters\": { \r",
                        "        \"firstName\": \"John@Doe\", \r",
                        "        \"lastName\": \"Jane#Smith\", \r",
                        "        \"phone\": testPhoneNumber\r",
                        "    },\r",
                        "    \"unauthorized_request\": null  // Simulate request without authorization\r",
                        "};\r",
                        "\r",
                        "let testCase = pm.environment.get(\"testCase\") || \"valid_request\";\r",
                        "\r",
                        "// ✅ Store the selected test case payload as the request body (except for unauthorized request)\r",
                        "if (testCase !== \"unauthorized_request\") {\r",
                        "    pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                        "} else {\r",
                        "    pm.request.headers.remove(\"Authorization\"); // Simulate unauthorized request\r",
                        "}\r",
                        "\r",
                        "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                        "\r",
                        "console.log(`Running test case: ${testCase}`, testCases[testCase]);\r",
                        ""
                      ],
                      "_lastExecutionId": "a9c4de27-37cf-46b1-bc9c-dcf87b3490a3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ed7df556-8048-4853-94c0-cfdaa98606fc",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "let response = pm.response.json();\r",
                        "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                        "\r",
                        "// Expected status codes\r",
                        "const expectedStatus = {\r",
                        "    \"valid_request\": 200,\r",
                        "    \"missing_firstName\": 400,\r",
                        "    \"missing_lastName\": 400,\r",
                        "    \"missing_phone\": 400,\r",
                        "    \"duplicate_phone\": 409,\r",
                        "    \"invalid_phone_format\": 400,\r",
                        "    \"sql_injection\": 400,\r",
                        "    \"long_names\": 400,\r",
                        "    \"special_characters\": 400\r",
                        "};\r",
                        "\r",
                        "// ✅ Status Code Validation\r",
                        "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                        "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                        "});\r",
                        "\r",
                        "// ✅ Success Case\r",
                        "if (pm.response.code === 200) {\r",
                        "    pm.test(\"Success flag should be true\", function () {\r",
                        "        pm.expect(response.success).to.eql(true);\r",
                        "    });\r",
                        "\r",
                        "    pm.test(\"Verify that response message confirms update\", function () {\r",
                        "        pm.expect(response.message).to.match(/updated successfully/i);\r",
                        "    });\r",
                        "\r",
                        "    pm.test(\"Response time should be < 500ms\", function () {\r",
                        "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                        "    });\r",
                        "\r",
                        "} else {\r",
                        "    // ✅ Error Handling for each test case\r",
                        "    pm.test(\"Response contains an error message\", function () {\r",
                        "        pm.expect(response).to.have.property(\"error\");\r",
                        "        pm.expect(response.error).to.be.a(\"string\");\r",
                        "    });\r",
                        "\r",
                        "    const errorMessages = {\r",
                        "        \"missing_firstName\": /missing.*first name/i,\r",
                        "        \"missing_lastName\": /missing.*last name/i,\r",
                        "        \"missing_phone\": /missing.*phone/i,\r",
                        "        \"duplicate_phone\": /already exists|duplicate phone/i,\r",
                        "        \"invalid_phone_format\": /invalid.*phone/i,\r",
                        "        \"special_characters\": /invalid.*characters/i\r",
                        "    };\r",
                        "\r",
                        "    if (errorMessages[testCase]) {\r",
                        "        pm.test(`Error message should match expected pattern for ${testCase}`, function () {\r",
                        "            pm.expect(response.error).to.match(errorMessages[testCase]);\r",
                        "        });\r",
                        "    }\r",
                        "}\r",
                        ""
                      ],
                      "_lastExecutionId": "b6f1bf16-5419-4be8-97af-ab4b2e4b43d0"
                    }
                  }
                ]
              },
              {
                "id": "67a105e8-090a-457d-992b-cceb2c18a484",
                "name": "delete user",
                "request": {
                  "url": {
                    "path": [
                      "user"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "DELETE",
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "type": "string",
                        "value": "{{authToken}}",
                        "key": "token"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "92c7a403-7dd5-45e0-aadc-b6787e37c1ac",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// ✅ Define test cases with different scenarios\r",
                        "const testCases = {\r",
                        "    \"valid_request\": {}, // No special changes; uses valid token\r",
                        "    \"missing_token\": { token: \"\" }, // Simulate a request with no token\r",
                        "    \"invalid_token\": { token: \"invalid_token_value\" }, // Simulate an expired/invalid token\r",
                        "    \"non_existent_user\": { token: pm.environment.get(\"valid.token\") } // Valid token, but user does not exist\r",
                        "};\r",
                        "\r",
                        "// ✅ Get the current test case (default: valid_request)\r",
                        "let testCase = pm.environment.get(\"testCase\") || \"valid_request\";\r",
                        "let testData = testCases[testCase];\r",
                        "\r",
                        "// ✅ Set the authorization token dynamically\r",
                        "if (testData.token !== undefined) {\r",
                        "    pm.request.headers.upsert({ key: \"Authorization\", value: `Bearer ${testData.token}` });\r",
                        "} else {\r",
                        "    pm.request.headers.upsert({ key: \"Authorization\", value: `Bearer ${pm.environment.get(\"valid.token\")}` });\r",
                        "}\r",
                        "\r",
                        "// ✅ Set test case header for tracking\r",
                        "pm.request.headers.upsert({ key: \"Test-Case\", value: testCase });\r",
                        "\r",
                        "// ✅ Log the test case for debugging\r",
                        "console.log(`Running test case: ${testCase}`, testData);\r",
                        ""
                      ],
                      "_lastExecutionId": "eba63cbd-aab2-4ad7-8535-fa07aa5fa79d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "10774409-95a3-4250-86c8-b8644b7d34b5",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// ✅ Parse response JSON safely\r",
                        "let response = {};\r",
                        "try {\r",
                        "    response = pm.response.json();\r",
                        "} catch (e) {\r",
                        "    console.error(\"Response is not in JSON format\", e);\r",
                        "}\r",
                        "\r",
                        "// ✅ Retrieve test case from request headers or environment\r",
                        "let testCase = pm.request.headers.get(\"Test-Case\") || pm.environment.get(\"testCase\");\r",
                        "\r",
                        "// ✅ Define expected status codes\r",
                        "const expectedStatus = {\r",
                        "    \"valid_request\": 200,\r",
                        "    \"missing_token\": 401,\r",
                        "    \"invalid_token\": 403,\r",
                        "    \"non_existent_user\": 404\r",
                        "};\r",
                        "\r",
                        "// ✅ Log test case for debugging\r",
                        "console.log(`Running test case: ${testCase}`);\r",
                        "\r",
                        "// ✅ Validate the status code\r",
                        "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                        "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                        "});\r",
                        "\r",
                        "// ✅ Test Case: Successful User Deletion (200 OK)\r",
                        "pm.test(\"[valid_request] User Account should be deleted successfully\", function () {\r",
                        "    if (testCase === \"valid_request\") {\r",
                        "        pm.expect(response.success).to.eql(true);\r",
                        "        pm.expect(response.message).to.eql(\"Account deleted successfully\");\r",
                        "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                        "    }\r",
                        "});\r",
                        "\r",
                        "// ✅ Test Case: Missing Access Token (401 Unauthorized)\r",
                        "pm.test(\"[missing_token] Request should fail due to missing token\", function () {\r",
                        "    if (testCase === \"missing_token\") {\r",
                        "        pm.expect(response).to.have.property(\"error\");\r",
                        "        pm.expect(response.error).to.match(/missing.*token/i);\r",
                        "    }\r",
                        "});\r",
                        "\r",
                        "// ✅ Test Case: Invalid or Expired Token (403 Forbidden)\r",
                        "pm.test(\"[invalid_token] Request should fail due to invalid token\", function () {\r",
                        "    if (testCase === \"invalid_token\") {\r",
                        "        pm.expect(response).to.have.property(\"error\");\r",
                        "        pm.expect(response.error).to.match(/invalid|expired.*token/i);\r",
                        "    }\r",
                        "});\r",
                        "\r",
                        "// ✅ Test Case: Non-Existent User (404 Not Found)\r",
                        "pm.test(\"[non_existent_user] Request should fail when the user does not exist\", function () {\r",
                        "    if (testCase === \"non_existent_user\") {\r",
                        "        pm.expect(response).to.have.property(\"error\");\r",
                        "        pm.expect(response.error).to.match(/user does not exist/i);\r",
                        "    }\r",
                        "});\r",
                        ""
                      ],
                      "_lastExecutionId": "e6454b78-b3e4-49ae-a8dc-d127ac08d62f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "998b78dd-7ee7-4db6-8962-6609fc3eb817",
        "name": "notification",
        "item": [
          {
            "id": "dcfec899-1eeb-4faf-ba04-31ddaba07d92",
            "name": "Contact us notifications",
            "request": {
              "url": {
                "path": [
                  "notifications",
                  "contact-us"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"email\":\"tesade9636@godsi.com\",\n    \"name\":\"jondoe\",\n    \"message\":\"hello tomorrow\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b63228d3-10fb-4d27-91f8-89102aaa82d5",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// ✅ Define test cases with various input scenarios\r",
                    "const testCases = {\r",
                    "    \"valid_request\": { \r",
                    "        \"name\": \"John Doe\",\r",
                    "        \"email\": pm.environment.get(\"reg.email\") || \"johndoe@example.com\",\r",
                    "        \"subject\": \"Inquiry about services\",\r",
                    "        \"message\": \"I would like to know more about your offerings.\"\r",
                    "    },\r",
                    "    \"missing_name\": { \r",
                    "        \"email\": \"johndoe@example.com\",\r",
                    "        \"subject\": \"Inquiry about services\",\r",
                    "        \"message\": \"I would like to know more about your offerings.\"\r",
                    "    },\r",
                    "    \"missing_email\": { \r",
                    "        \"name\": \"John Doe\",\r",
                    "        \"subject\": \"Inquiry about services\",\r",
                    "        \"message\": \"I would like to know more about your offerings.\"\r",
                    "    },\r",
                    "    \"invalid_email_format\": { \r",
                    "        \"name\": \"John Doe\",\r",
                    "        \"email\": \"invalid-email\",\r",
                    "        \"subject\": \"Inquiry about services\",\r",
                    "        \"message\": \"I would like to know more about your offerings.\"\r",
                    "    },\r",
                    "    \"missing_subject\": { \r",
                    "        \"name\": \"John Doe\",\r",
                    "        \"email\": \"johndoe@example.com\",\r",
                    "        \"message\": \"I would like to know more about your offerings.\"\r",
                    "    },\r",
                    "    \"missing_message\": { \r",
                    "        \"name\": \"John Doe\",\r",
                    "        \"email\": \"johndoe@example.com\",\r",
                    "        \"subject\": \"Inquiry about services\"\r",
                    "    }\r",
                    "};\r",
                    "\r",
                    "// ✅ Get the current test case from environment (default to valid_request)\r",
                    "let testCase = pm.environment.get(\"testCase\") || \"valid_request\";\r",
                    "\r",
                    "// ✅ Store the selected test case payload as the request body\r",
                    "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                    "\r",
                    "// ✅ Set request headers for tracking test cases\r",
                    "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                    "\r",
                    "// ✅ Log the test case for debugging in Postman Console\r",
                    "console.log(`Running test case: ${testCase}`, testCases[testCase]);\r",
                    ""
                  ],
                  "_lastExecutionId": "1e4c2601-efe0-48ff-afc8-203e4b4e4ebc"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3df5c5bb-8210-43c7-ad53-66483a8fd569",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// ✅ Parse JSON response\r",
                    "let response = pm.response.json();\r",
                    "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                    "\r",
                    "// ✅ Expected status codes for each test case\r",
                    "const expectedStatus = {\r",
                    "    \"valid_request\": 200,\r",
                    "    \"missing_name\": 400,\r",
                    "    \"missing_email\": 400,\r",
                    "    \"invalid_email_format\": 400,\r",
                    "    \"missing_message\": 400\r",
                    "};\r",
                    "\r",
                    "// ✅ Validate HTTP status code\r",
                    "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                    "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                    "});\r",
                    "\r",
                    "// ✅ Success Case Handling (200 OK)\r",
                    "if (pm.response.code === 200) {\r",
                    "    pm.test(\"Verify that the success field is true\", function () {\r",
                    "        pm.expect(response.success).to.eql(true);\r",
                    "    });\r",
                    "\r",
                    "    pm.test(\"Check that the message field confirms successful submission\", function () {\r",
                    "        pm.expect(response.message).to.include(\"successfully\");\r",
                    "    });\r",
                    "\r",
                    "    pm.test(\"Validate response time is below 500ms\", function () {\r",
                    "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                    "    });\r",
                    "\r",
                    "} else {\r",
                    "    // ✅ Error Case Handling\r",
                    "    pm.test(\"Response contains an error message\", function () {\r",
                    "        pm.expect(response).to.have.property(\"error\");\r",
                    "        pm.expect(response.error).to.be.a(\"string\");\r",
                    "    });\r",
                    "\r",
                    "    // ✅ Specific Error Messages Per Test Case\r",
                    "    const errorMessages = {\r",
                    "        \"missing_name\": \"Name is required\",\r",
                    "        \"missing_email\": \"Email is required\",\r",
                    "        \"invalid_email_format\": \"Invalid email format\",\r",
                    "        \"missing_message\": \"Message is required\"\r",
                    "    };\r",
                    "\r",
                    "    if (errorMessages[testCase]) {\r",
                    "        pm.test(`Error message should mention '${errorMessages[testCase]}'`, function () {\r",
                    "            pm.expect(response.error).to.match(new RegExp(errorMessages[testCase], \"i\"));\r",
                    "        });\r",
                    "    }\r",
                    "}\r",
                    ""
                  ],
                  "_lastExecutionId": "e46672eb-040d-4caa-8864-dbe159545823"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "83b080a6-6c54-4431-b231-4f60fac8be5d",
        "name": "admin",
        "item": [
          {
            "id": "918baf14-2fe1-46ef-bb1d-a158e0dab373",
            "name": "Admin Sign-in",
            "item": [
              {
                "id": "67a0b64a-e321-4e86-ae53-a7045e9aaa04",
                "name": "signin",
                "request": {
                  "url": {
                    "path": [
                      "admin",
                      "signin"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n     \"email\": \"testog@e-record.com\",\n    \"password\": \"Pass@12345\"\n}\n\n// {{ADMcurrentPayload}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6071d595-689d-444a-b87a-f65e1a2c2b11",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// Ensure required environment variables exist\r",
                        "const adminEmail = (pm.environment.get(\"admin.email\") || \"testog@e-record.com\").trim();\r",
                        "const adminPassword = (pm.environment.get(\"admin.password\") || \"Pass@12345\").trim();\r",
                        "\r",
                        "if (!adminEmail || !adminPassword) {\r",
                        "    console.warn(\"⚠️ Warning: 'admin.email' or 'admin.password' is missing in environment variables.\");\r",
                        "}\r",
                        "\r",
                        "// Define test cases with sanitized values\r",
                        "const testCases = {\r",
                        "    \"valid_request\": {\r",
                        "        \"email\": adminEmail,\r",
                        "        \"password\": adminPassword\r",
                        "    },\r",
                        "    \"missing_email\": {\r",
                        "        \"email\": \"\",\r",
                        "        \"password\": adminPassword\r",
                        "    },\r",
                        "    \"missing_password\": {\r",
                        "        \"email\": adminEmail,\r",
                        "        \"password\": \"\"\r",
                        "    },\r",
                        "    \"invalid_credentials\": {\r",
                        "        \"email\": \"invalid@admin.com\",\r",
                        "        \"password\": \"wrongpassword123\"\r",
                        "    }\r",
                        "};\r",
                        "\r",
                        "// Get test case from environment or use default\r",
                        "let testCase = (pm.environment.get(\"testCase\") || \"valid_request\").trim();\r",
                        "\r",
                        "if (!testCases.hasOwnProperty(testCase)) {\r",
                        "    console.error(`❌ Error: Test case '${testCase}' not found! Defaulting to 'valid_request'.`);\r",
                        "    testCase = \"valid_request\";\r",
                        "}\r",
                        "\r",
                        "// Set and verify the test payload\r",
                        "const requestBody = JSON.stringify(testCases[testCase]); // Ensure proper JSON format\r",
                        "pm.environment.set(\"currentPayload\", requestBody);\r",
                        "\r",
                        "// Debug output\r",
                        "console.log(`✅ Running test case: ${testCase}`, testCases[testCase]);\r",
                        "console.log(\"🟢 Final request payload stored in environment:\", pm.environment.get(\"currentPayload\"));\r",
                        ""
                      ],
                      "_lastExecutionId": "244b5dba-00f9-4d53-b569-64ca8b09aaa2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e419be5-c2b6-4f55-958c-f7f19b9f0ab1",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// Parse JSON response\r",
                        "let response;\r",
                        "try {\r",
                        "    response = pm.response.json();\r",
                        "} catch (e) {\r",
                        "    pm.test(\"Response should be valid JSON\", () => {\r",
                        "        pm.expect.fail(\"Response is not in JSON format\");\r",
                        "    });\r",
                        "}\r",
                        "\r",
                        "// Capture the test case from headers\r",
                        "let testCase = pm.request.headers.get(\"Test-Case\") || \"valid_request\";\r",
                        "\r",
                        "// Define expected status codes for test cases\r",
                        "const expectedStatus = {\r",
                        "    \"valid_request\": 200,\r",
                        "    \"missing_email\": 400,\r",
                        "    \"missing_password\": 400,\r",
                        "    \"invalid_credentials\": 401\r",
                        "};\r",
                        "\r",
                        "// Ensure status code is as expected\r",
                        "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, () => {\r",
                        "    pm.expect(pm.response.code).to.eql(expectedStatus[testCase]);\r",
                        "});\r",
                        "\r",
                        "// Success Case: 200 OK\r",
                        "if (pm.response.code === 200) {\r",
                        "    pm.test(\"Success should be true\", () => {\r",
                        "        pm.expect(response.success).to.eql(true);\r",
                        "    });\r",
                        "\r",
                        "    pm.test(\"Response contains auth token\", () => {\r",
                        "        pm.expect(response.data).to.have.property(\"token\");\r",
                        "    });\r",
                        "\r",
                        "    pm.test(\"Store auth token for future requests\", () => {\r",
                        "        pm.environment.set(\"adminAuthToken\", response.data.token);\r",
                        "    });\r",
                        "}\r",
                        "\r",
                        "// Error Case: Response should contain an error message\r",
                        "if (pm.response.code !== 200) {\r",
                        "    pm.test(\"Response should contain an error message\", () => {\r",
                        "        pm.expect(response).to.have.property(\"error\");\r",
                        "        pm.expect(response.error).to.be.a(\"string\");\r",
                        "    });\r",
                        "\r",
                        "    // Specific Error Messages\r",
                        "    if (testCase === \"missing_email\") {\r",
                        "        pm.test(\"Error message should mention missing email\", () => {\r",
                        "            pm.expect(response.error).to.match(/missing.*email/i);\r",
                        "        });\r",
                        "    } else if (testCase === \"missing_password\") {\r",
                        "        pm.test(\"Error message should mention missing password\", () => {\r",
                        "            pm.expect(response.error).to.match(/missing.*password/i);\r",
                        "        });\r",
                        "    } else if (testCase === \"invalid_credentials\") {\r",
                        "        pm.test(\"Error message should indicate invalid credentials\", () => {\r",
                        "            pm.expect(response.error).to.match(/invalid.*credentials/i);\r",
                        "        });\r",
                        "    }\r",
                        "}\r",
                        "\r",
                        "// Response time check\r",
                        "pm.test(\"Response time should be under 500ms\", () => {\r",
                        "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                        "});\r",
                        ""
                      ],
                      "_lastExecutionId": "13d71a59-487c-4925-b536-143c35592eb0"
                    }
                  }
                ]
              },
              {
                "id": "a0ee2bcd-a17f-4ad5-b9e6-a181638a6de7",
                "name": "dashboard",
                "request": {
                  "url": {
                    "path": [
                      "admin",
                      "dashboard"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "type": "string",
                        "value": "{{adminAuthToken}}",
                        "key": "token"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f6efefb4-e801-4f0f-a8d3-fdc1f4ede7f6",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// Ensure response is in JSON format\r",
                        "pm.test(\"Response is valid JSON\", function () {\r",
                        "    pm.response.to.be.json;\r",
                        "});\r",
                        "\r",
                        "// Parse response JSON safely\r",
                        "let jsonData;\r",
                        "try {\r",
                        "    jsonData = pm.response.json();\r",
                        "} catch (e) {\r",
                        "    pm.test(\"Response is valid JSON\", function () {\r",
                        "        pm.expect(false).to.be.true; // Force failure if parsing fails\r",
                        "    });\r",
                        "}\r",
                        "\r",
                        "// Validate required fields in the response\r",
                        "pm.test(\"Response contains expected fields\", function () {\r",
                        "    pm.expect(jsonData).to.have.property(\"success\");\r",
                        "    pm.expect(jsonData).to.have.property(\"message\");\r",
                        "    pm.expect(jsonData).to.have.property(\"data\");\r",
                        "});\r",
                        "\r",
                        "// Ensure `data.allUsers` exists and is an array before accessing it\r",
                        "pm.test(\"allUsers array exists\", function () {\r",
                        "    pm.expect(jsonData.data).to.have.property(\"allUsers\");\r",
                        "    pm.expect(jsonData.data.allUsers).to.be.an(\"array\").that.is.not.empty;\r",
                        "});\r",
                        "\r",
                        "// Validate user data while excluding sensitive fields\r",
                        "if (jsonData.data.allUsers.length > 0) {\r",
                        "    let userData = jsonData.data.allUsers[0];\r",
                        "\r",
                        "    pm.test(\"User data contains required fields\", function () {\r",
                        "        pm.expect(userData).to.have.property(\"id\");\r",
                        "        pm.expect(userData).to.have.property(\"email\");\r",
                        "        pm.expect(userData).to.have.property(\"firstName\");\r",
                        "        pm.expect(userData).to.have.property(\"lastName\");\r",
                        "        pm.expect(userData).to.have.property(\"password\");\r",
                        "    \r",
                        "    });\r",
                        "} else {\r",
                        "    pm.test(\"allUsers is empty\", function () {\r",
                        "        pm.expect(false).to.be.true; // Fails if users list is unexpectedly empty\r",
                        "    });\r",
                        "}\r",
                        "\r",
                        "// Validate response status code\r",
                        "pm.test(\"Status code is 200\", function () {\r",
                        "    pm.response.to.have.status(200);\r",
                        "});\r",
                        ""
                      ],
                      "_lastExecutionId": "7347d1ea-560b-4935-aec9-d7db5aa2cd65"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "e2ba0dcc-3c17-4034-be5b-f7734556a863",
            "name": "Users",
            "item": [
              {
                "id": "17208e8d-3925-4553-ae83-4474e61062c2",
                "name": "Get user by ID",
                "request": {
                  "url": {
                    "path": [
                      "admin",
                      "users",
                      ":id"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [
                      {
                        "disabled": true,
                        "key": "id",
                        "value": "ec73234f-5419-4953-855b-2c4c21307b67"
                      }
                    ],
                    "variable": [
                      {
                        "type": "any",
                        "value": "ec73234f-5419-4953-855b-2c4c21307b67",
                        "key": "id"
                      }
                    ]
                  },
                  "method": "GET",
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "type": "string",
                        "value": "{{adminAuthToken}}",
                        "key": "token"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "faebfb9a-1af7-4029-8b99-ebfeff1685f8",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d36cb7a5-24a4-4bec-ab2e-21052fcb2891"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3bb3822a-33cd-4495-acc8-58de0884abcb",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// Ensure response status code is 200\r",
                        "pm.test(\"Status code is 200\", function () {\r",
                        "    pm.response.to.have.status(200);\r",
                        "});\r",
                        "\r",
                        "// Ensure response is JSON\r",
                        "pm.test(\"Response is in JSON format\", function () {\r",
                        "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                        "});\r",
                        "\r",
                        "// Parse response JSON\r",
                        "let jsonData = pm.response.json();\r",
                        "\r",
                        "// Validate success field\r",
                        "pm.test(\"Response success flag is true\", function () {\r",
                        "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                        "});\r",
                        "\r",
                        "// Validate message field\r",
                        "pm.test(\"Response message is correct\", function () {\r",
                        "    pm.expect(jsonData).to.have.property(\"message\", \"Users fetched successfully\");\r",
                        "});\r",
                        "\r",
                        "// Validate user data structure\r",
                        "pm.test(\"Response contains expected user fields\", function () {\r",
                        "    pm.expect(jsonData).to.have.property(\"data\");\r",
                        "    let userData = jsonData.data;\r",
                        "\r",
                        "    pm.expect(userData).to.have.property(\"id\").that.is.a(\"string\");\r",
                        "    pm.expect(userData).to.have.property(\"firstName\").that.is.a(\"string\");\r",
                        "    pm.expect(userData).to.have.property(\"lastName\").that.is.a(\"string\");\r",
                        "    pm.expect(userData).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                        "    pm.expect(userData).to.have.property(\"email\").that.is.a(\"string\");\r",
                        "    pm.expect(userData).to.have.property(\"avatar\").that.is.a(\"string\");\r",
                        "    pm.expect(userData).to.have.property(\"username\"); // Can be null\r",
                        "    pm.expect(userData).to.have.property(\"isActive\").that.is.a(\"boolean\");\r",
                        "});\r",
                        "\r",
                        "// Validate adminAuthToken is present in request headers\r",
                        "pm.test(\"Auth token is provided\", function () {\r",
                        "    pm.expect(pm.request.headers.has(\"Authorization\")).to.be.true;\r",
                        "});\r",
                        "\r",
                        "pm.environment.set(\"UserId\", jsonData.data.id)"
                      ],
                      "_lastExecutionId": "a9b8a19f-a53b-44dd-85f2-6d299661e542"
                    }
                  }
                ]
              },
              {
                "id": "fc57dd6c-58af-4fc2-a42f-e2caeb33e33a",
                "name": "Get All users",
                "request": {
                  "url": {
                    "path": [
                      "admin",
                      "users"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "type": "string",
                        "value": "{{adminAuthToken}}",
                        "key": "token"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "13760dcf-a574-4246-8ae3-522f3e02b810",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// Validate response status code\r",
                        "pm.test(\"Status code is 200\", function () {\r",
                        "    pm.response.to.have.status(200);\r",
                        "});\r",
                        "\r",
                        "// Validate response format\r",
                        "pm.test(\"Response is in JSON format\", function () {\r",
                        "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                        "});\r",
                        "\r",
                        "// Parse response JSON\r",
                        "let jsonData = pm.response.json();\r",
                        "\r",
                        "// Validate required response fields\r",
                        "pm.test(\"Response contains expected fields\", function () {\r",
                        "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                        "    pm.expect(jsonData).to.have.property(\"message\");\r",
                        "    pm.expect(jsonData).to.have.property(\"data\");\r",
                        "});\r",
                        "\r",
                        "// Validate user data structure (assuming data is an array of users)\r",
                        "pm.test(\"User data structure is correct\", function () {\r",
                        "    pm.expect(jsonData.data.result).to.be.an(\"array\");\r",
                        "\r",
                        "    if (jsonData.data.result.length > 0) {\r",
                        "        let user = jsonData.data.result[0]; // Check the first user\r",
                        "\r",
                        "        pm.expect(user).to.have.property(\"id\").that.is.a(\"string\");\r",
                        "        pm.expect(user).to.have.property(\"firstName\").that.is.a(\"string\");\r",
                        "        pm.expect(user).to.have.property(\"lastName\").that.is.a(\"string\");\r",
                        "        pm.expect(user).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                        "        pm.expect(user).to.have.property(\"email\").that.is.a(\"string\");\r",
                        "        pm.expect(user).to.have.property(\"avatar\");\r",
                        "        pm.expect(user).to.have.property(\"username\");\r",
                        "        pm.expect(user).to.have.property(\"isActive\").that.is.a(\"boolean\");\r",
                        "    };\r",
                        "});\r",
                        ""
                      ],
                      "_lastExecutionId": "b7fa67fc-9842-47b3-b988-0fbfb4a7be53"
                    }
                  }
                ]
              },
              {
                "id": "9fccf26f-f573-4edf-aa09-71ad96a76aa7",
                "name": "make user admin",
                "request": {
                  "url": {
                    "path": [
                      "admin",
                      "make-user-admin"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "x-access-token",
                      "value": "{{token}}"
                    }
                  ],
                  "method": "PUT",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"email\": \"testog@e-record.com\"\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "type": "string",
                        "value": "{{adminAuthToken}}",
                        "key": "token"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "943fb355-4353-4065-ad25-322ed5680b0c",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "pm.test(\"Response status code is 200\", function () {\r",
                        "    pm.response.to.have.status(200);\r",
                        "});\r",
                        "\r",
                        "pm.test(\"Response time is less than 800ms\", function () {\r",
                        "    pm.expect(pm.response.responseTime).to.be.below(800);\r",
                        "});\r",
                        "\r",
                        "pm.test(\"Response body has 'success' field set to true\", function () {\r",
                        "    pm.expect(pm.response.json().success).to.be.true;\r",
                        "});\r",
                        "\r",
                        "pm.test(\"Response body has 'message' field with value 'User profile updated successfully.'\", function () {\r",
                        "    pm.expect(pm.response.json().message).to.equal(\"User profile updated successfully.\");\r",
                        "});\r",
                        ""
                      ],
                      "_lastExecutionId": "657f71c1-47be-4d91-ade1-17a47f731e7f"
                    }
                  }
                ]
              },
              {
                "id": "e3bb1f2b-68da-48d0-b620-1e275bc92302",
                "name": "make admin user",
                "request": {
                  "url": {
                    "path": [
                      "admin",
                      "make-admin-user"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "PUT",
                  "body": {
                    "mode": "raw",
                    "raw": "{\r\n    \"email\": \"testog@e-record.com\"\r\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "type": "string",
                        "value": "{{adminAuthToken}}",
                        "key": "token"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ee7c7fb-96c2-4d21-8d21-a1db21a6c9fd",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// Validate response status code\r",
                        "pm.test(\"Status code is 200\", function () {\r",
                        "    pm.response.to.have.status(200);\r",
                        "});\r",
                        "\r",
                        "// Validate response format\r",
                        "pm.test(\"Response is in JSON format\", function () {\r",
                        "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                        "});\r",
                        "\r",
                        "// Parse response JSON\r",
                        "let jsonData = pm.response.json();\r",
                        "\r",
                        "// Validate required response fields\r",
                        "pm.test(\"Response contains expected fields\", function () {\r",
                        "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                        "    pm.expect(jsonData).to.have.property(\"message\");\r",
                        "});\r",
                        "\r",
                        "// Validate message in the response\r",
                        "pm.test(\"Message in the response is 'User profile updated successfully.'\", function () {\r",
                        "    pm.expect(jsonData.message).to.equal(\"User profile updated successfully.\");\r",
                        "});\r",
                        "\r",
                        ""
                      ],
                      "_lastExecutionId": "10234f14-314d-41d6-a03c-e77166823722"
                    }
                  }
                ]
              },
              {
                "id": "922b9511-fcd0-43ec-98b4-fb8305ee7faa",
                "name": "suspend user",
                "request": {
                  "url": {
                    "path": [
                      "admin",
                      "user",
                      "suspend"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "PUT",
                  "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "type": "string",
                        "value": "{{adminAuthToken}}",
                        "key": "token"
                      }
                    ]
                  }
                },
                "response": [],
                "event": []
              },
              {
                "id": "a004f54a-5d5b-4655-975c-2c5ae89e642a",
                "name": "unsuspend user",
                "request": {
                  "url": {
                    "path": [
                      "admin",
                      "user",
                      "unsuspend",
                      ":id"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": [
                      {
                        "type": "any",
                        "value": "ec73234f-5419-4953-855b-2c4c21307b67",
                        "key": "id"
                      }
                    ]
                  },
                  "method": "PUT",
                  "body": {
                    "mode": "raw",
                    "raw": "// {\r\n//     \"email\": \"testog@e-record.com\"\r\n// }",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "type": "string",
                        "value": "{{adminAuthToken}}",
                        "key": "token"
                      }
                    ]
                  }
                },
                "response": [],
                "event": []
              },
              {
                "id": "fc411c8b-215f-4bf6-a27e-ee7c6e948f39",
                "name": "config",
                "request": {
                  "url": {
                    "path": [
                      "admin",
                      "config"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "type": "string",
                        "value": "{{adminAuthToken}}",
                        "key": "token"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b0db7cf7-5a56-4aa5-a504-90d715c68420",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// Test for the status code\r",
                        "pm.test(\"Status code is 200\", function () {\r",
                        "    pm.response.to.have.status(200);\r",
                        "});\r",
                        "\r",
                        "// Test for response time\r",
                        "pm.test(\"Response time is less than 500ms\", function () {\r",
                        "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                        "});\r",
                        "\r",
                        "// Test for response body properties\r",
                        "pm.test(\"Response body has required properties\", function () {\r",
                        "    pm.response.to.have.jsonBody('success');\r",
                        "    pm.response.to.have.jsonBody('message');\r",
                        "    pm.response.to.have.jsonBody('data');\r",
                        "});\r",
                        "\r",
                        "// Test for specific values in the response body\r",
                        "pm.test(\"Success is true and message is 'Config fetched successfully.'\", function () {\r",
                        "    pm.expect(pm.response.json().success).to.be.true;\r",
                        "    pm.expect(pm.response.json().message).to.equal(\"Config fetched successfully.\");\r",
                        "});\r",
                        ""
                      ],
                      "_lastExecutionId": "cbd52a5a-6393-4617-a64b-f9de3834f583"
                    }
                  }
                ]
              },
              {
                "id": "0b0bbaca-55b1-4d35-a423-263c74b08dd5",
                "name": "config",
                "request": {
                  "url": {
                    "path": [
                      "admin",
                      "config"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "type": "string",
                        "value": "{{adminAuthToken}}",
                        "key": "token"
                      }
                    ]
                  }
                },
                "response": [],
                "event": []
              },
              {
                "id": "f74798e9-c6e1-4c6d-b067-71b9717d5449",
                "name": "avatar",
                "request": {
                  "url": {
                    "path": [
                      "user",
                      "avatar"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "PUT",
                  "body": {
                    "mode": "formdata",
                    "formdata": [
                      {
                        "key": "avatar",
                        "type": "file",
                        "src": "postman-cloud:///1f00a020-2861-4780-8431-d61fc2551cd6"
                      }
                    ]
                  },
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "type": "string",
                        "value": "{{adminAuthToken}}",
                        "key": "token"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "210309b7-c4d4-4e8d-b850-8292c615b050",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// ✅ Ensure response is in JSON format\r",
                        "pm.test(\"Response is in JSON format\", function () {\r",
                        "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                        "});\r",
                        "\r",
                        "// ✅ Parse response JSON\r",
                        "let jsonData = pm.response.json();\r",
                        "\r",
                        "// ✅ Validate response status code\r",
                        "pm.test(\"Status code is 200\", function () {\r",
                        "    pm.response.to.have.status(200);\r",
                        "});\r",
                        "\r",
                        "// ✅ Validate success flag\r",
                        "pm.test(\"Response contains success flag\", function () {\r",
                        "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                        "});\r",
                        "\r",
                        "// ✅ Validate response message\r",
                        "pm.test(\"Response contains success message\", function () {\r",
                        "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Profile picture set successfully\");\r",
                        "});\r",
                        "\r",
                        "// ✅ Validate avatar URL is returned\r",
                        "pm.test(\"Response contains an avatar URL\", function () {\r",
                        "    pm.expect(jsonData.data).to.have.property(\"profilePicture\").that.is.a(\"string\").and.includes(\"http\");\r",
                        "});\r",
                        "\r",
                        "// ✅ Validate authorization requirement\r",
                        "pm.test(\"Request requires authorization\", function () {\r",
                        "    pm.response.to.not.have.status(401);\r",
                        "});\r",
                        "\r",
                        "// ✅ Store avatar URL in environment variable for future use\r",
                        "if (jsonData.data.avatar) {\r",
                        "    pm.environment.set(\"uploadedAvatarUrl\", jsonData.data.avatar);\r",
                        "    console.log(\"Avatar uploaded:\", jsonData.data.avatar);\r",
                        "}\r",
                        ""
                      ],
                      "_lastExecutionId": "4e90ff61-5d8f-4d78-8fad-366e3cc03331"
                    }
                  }
                ]
              }
            ],
            "event": []
          },
          {
            "id": "47d60abf-c868-4b27-bb55-79a56aec7f70",
            "name": "Category",
            "item": [
              {
                "id": "b8453c1d-17c1-40c1-9dfd-1fafa97dd316",
                "name": "Create Category",
                "request": {
                  "url": {
                    "path": [
                      "admin",
                      "category"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{currentPayload}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "type": "string",
                        "value": "{{adminAuthToken}}",
                        "key": "token"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf7cbaba-1179-4561-9cc4-82b7f688533a",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// ✅ Test Case: Verify Status Code 201 (Created)\r",
                        "pm.test(\"Status code is 201 - Category Created\", function () {\r",
                        "    pm.response.to.have.status(200 || 201);\r",
                        "});\r",
                        "\r",
                        "// ✅ Test Case: Response Contains Success Message\r",
                        "pm.test(\"Response includes success message\", function () {\r",
                        "    let jsonData = pm.response.json();\r",
                        "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Category created\");\r",
                        "});\r",
                        "\r",
                        "// ✅ Test Case: Validate Category ID Exists\r",
                        "pm.test(\"Response contains categoryId\", function () {\r",
                        "    let jsonData = pm.response.json();\r",
                        "    pm.expect(jsonData.data).to.have.property(\"id\").that.is.a(\"string\");\r",
                        "});\r",
                        "\r",
                        "// ✅ Test Case: Response Time Within Limits\r",
                        "pm.test(\"Response time is under 1000ms\", function () {\r",
                        "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                        "});\r",
                        "\r",
                        "// ✅ Test Case: Attempt to Create Duplicate Category (Should Fail)\r",
                        "pm.test(\"Duplicate category creation should fail\", function () {\r",
                        "    let jsonData = pm.response.json();\r",
                        "    if (pm.response.code === 400) {\r",
                        "        pm.expect(jsonData).to.have.property(\"error\").that.includes(\"already exists\");\r",
                        "    }\r",
                        "});\r",
                        "\r",
                        "pm.environment.set(\"categoryId\", pm.response.json().data.id);\r",
                        ""
                      ],
                      "_lastExecutionId": "b6bdb0f4-7922-4f33-80a6-2d0e989e6b14"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c85ee4b7-eb6c-48b7-a8a0-683cc75c5c2b",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// Ensure admin token exists\r",
                        "if (!pm.environment.get(\"admin_token\")) {\r",
                        "    console.warn(\"⚠️ Warning: Missing 'admin_token'. Ensure authentication is set.\");\r",
                        "}\r",
                        "\r",
                        "// Category Data Pool\r",
                        "const categories = [\r",
                        "    { name: \"Foregin Fragrance\", description: \"Luxurious perfumes, body mists, and essential oils to express your style.\" },\r",
                        "    { name: \"Local Fragrance\", description: \"Luxurious perfumes, body mists, and essential oils to express your style.\" },\r",
                        "    { name: \"Foreign Cosmetics\", description: \"Enhance beauty with premium skincare, makeup, and beauty essentials.\" },\r",
                        "    { name: \"Local Cosmetics\", description: \"Enhance beauty with premium skincare, makeup, and beauty essentials.\" },\r",
                        "    { name: \"Chic Clothing\", description: \"Trendy outfits for every season, occasion, and lifestyle.\" },\r",
                        "    { name: \"Stylist Clothing\", description: \"Trendy outfits for every season, occasion, and lifestyle.\" },\r",
                        "    { name: \"Men Clothing\", description: \"Trendy outfits for every season, occasion, and lifestyle.\" },\r",
                        "    { name: \"Women Clothing\", description: \"Trendy outfits for every season, occasion, and lifestyle.\" },\r",
                        "    { name: \"Children Clothing\", description: \"Trendy outfits for every season, occasion, and lifestyle.\" },\r",
                        "    { name: \"Teens Clothing\", description: \"Trendy outfits for every season, occasion, and lifestyle.\" },\r",
                        "    { name: \"Unisex Clothing\", description: \"Trendy outfits for every season, occasion, and lifestyle.\" },\r",
                        "    { name: \"Men Shoe Wears\", description: \"Step up your fashion with stylish and comfortable footwear.\" },\r",
                        "    { name: \"Electronics\", description: \"Latest gadgets, smart devices, and high-tech accessories.\" }\r",
                        "];\r",
                        "\r",
                        "// Randomly select a category\r",
                        "const randomCategory = categories[Math.floor(Math.random() * categories.length)];\r",
                        "\r",
                        "// Set request body dynamically\r",
                        "pm.environment.set(\"currentPayload\", JSON.stringify(randomCategory));\r",
                        "\r",
                        "// Log request payload for debugging\r",
                        "console.log(\"🟢 Auto-generated Category:\", randomCategory);\r",
                        ""
                      ],
                      "_lastExecutionId": "26bfd33f-e3f6-4651-b5c9-1bfb4edf5196"
                    }
                  }
                ]
              },
              {
                "id": "9ab3f152-4cbc-4ced-be79-02dafa5b9ea9",
                "name": "Get Categories",
                "request": {
                  "url": {
                    "path": [
                      "admin",
                      "category"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET",
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "type": "string",
                        "value": "{{adminAuthToken}}",
                        "key": "token"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9deb947d-8e87-427a-a3e3-0ca3e3e78f7f",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "let jsonData = pm.response.json();\r",
                        "\r",
                        "// ✅ Test Case: Verify Status Code 200 (Success)\r",
                        "pm.test(\"Status code is 200 - Categories retrieved successfully\", function () {\r",
                        "    pm.response.to.have.status(200);\r",
                        "});\r",
                        "\r",
                        "// ✅ Test Case: Validate Success Field\r",
                        "pm.test(\"Response success field should be true\", function () {\r",
                        "    pm.expect(jsonData.success).to.eql(true);\r",
                        "});\r",
                        "\r",
                        "// ✅ Test Case: Validate Message Field\r",
                        "pm.test(\"Response message should confirm category retrieval\", function () {\r",
                        "    pm.expect(jsonData.message).to.eql(\"Category fetched successfully\");\r",
                        "});\r",
                        "\r",
                        "// ✅ Test Case: Ensure Data is an Array\r",
                        "pm.test(\"Response contains a list of categories\", function () {\r",
                        "    pm.expect(jsonData.data).to.be.an(\"array\").that.is.not.empty;\r",
                        "});\r",
                        "\r",
                        "// ✅ Store a Random Category ID as Environment Variable\r",
                        "if (jsonData.data.length > 0) {\r",
                        "    let randomIndex = Math.floor(Math.random() * jsonData.data.length);\r",
                        "    let selectedCategory = jsonData.data[randomIndex]; \r",
                        "    pm.environment.set(\"categoryId\", selectedCategory.id);\r",
                        "    console.log(\"🟢 Randomly Stored Category ID:\", selectedCategory.id);\r",
                        "} else {\r",
                        "    console.warn(\"⚠️ No categories found in response.\");\r",
                        "}\r",
                        "\r",
                        "// ✅ Response Time Test\r",
                        "pm.test(\"Response time is under 1000ms\", function () {\r",
                        "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                        "});\r",
                        "\r",
                        "pm.environment.set(\"categoryId4p\", pm.response.json().data[0].id) // Store the first category ID as an environment variable\r",
                        "\r",
                        "pm.environment.set(\"categoryId\", pm.response.json().data[3].id)"
                      ],
                      "_lastExecutionId": "e75d91ba-3a5c-4776-bfd8-ba0e60ad3afc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ba367b9-ce74-4fc3-905a-3949b59a3cdf",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// Ensure admin token exists\r",
                        "if (!pm.environment.get(\"adminAuthToken\")) {\r",
                        "    console.warn(\"⚠️ Missing 'admin_token'. Ensure authentication is set.\");\r",
                        "}\r",
                        "\r",
                        "// Clear previous category ID (optional)\r",
                        "pm.environment.unset(\"categoryId\");\r",
                        ""
                      ],
                      "_lastExecutionId": "8b922336-0bf6-420b-87f2-067a0f153f92"
                    }
                  }
                ]
              },
              {
                "id": "7dc595ef-498f-4846-89ad-dad3c585f665",
                "name": "Update category",
                "request": {
                  "url": {
                    "path": [
                      "admin",
                      "category",
                      ":id"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": [
                      {
                        "type": "any",
                        "value": "{{categoryId}}",
                        "key": "id"
                      }
                    ]
                  },
                  "method": "PUT",
                  "body": {
                    "mode": "raw",
                    "raw": "{{currentPayload}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  },
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "type": "string",
                        "value": "{{adminAuthToken}}",
                        "key": "token"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "adcc940c-39d1-4cfb-a171-99b2acc09046",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// ✅ Test Case: Verify Status Code 201 (Created)\r",
                        "pm.test(\"Status code is 201 - Category Created\", function () {\r",
                        "    pm.response.to.have.status(200 || 201);\r",
                        "});\r",
                        "\r",
                        "// ✅ Test Case: Response Contains Success Message\r",
                        "pm.test(\"Response includes success message\", function () {\r",
                        "    let jsonData = pm.response.json();\r",
                        "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Category updated successfully\");\r",
                        "});\r",
                        "\r",
                        "// ✅ Test Case: Validate Category ID Exists\r",
                        "pm.test(\"Response contains categoryId\", function () {\r",
                        "    let jsonData = pm.response.json();\r",
                        "    pm.expect(jsonData.data).to.have.property(\"id\").that.is.a(\"string\");\r",
                        "});\r",
                        "\r",
                        "// ✅ Test Case: Response Time Within Limits\r",
                        "pm.test(\"Response time is under 1000ms\", function () {\r",
                        "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                        "});\r",
                        "\r",
                        "// ✅ Test Case: Attempt to Create Duplicate Category (Should Fail)\r",
                        "pm.test(\"Duplicate category creation should fail\", function () {\r",
                        "    let jsonData = pm.response.json();\r",
                        "    if (pm.response.code === 400) {\r",
                        "        pm.expect(jsonData).to.have.property(\"error\").that.includes(\"already exists\");\r",
                        "    }\r",
                        "});\r",
                        "\r",
                        "pm.environment.set(\"categoryId\", pm.response.json().data.id);\r",
                        ""
                      ],
                      "_lastExecutionId": "5e6ff969-0cb9-49b4-9de8-693be7334440"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "694b6734-2062-4e1b-af26-aec167c22989",
                      "type": "text/javascript",
                      "packages": {},
                      "_lastExecutionId": "a64fb723-1ea3-444f-8265-5a632cf56786"
                    }
                  }
                ]
              },
              {
                "id": "3841fa29-55de-4836-8098-c70b884d0896",
                "name": "Get Category by ID",
                "request": {
                  "url": {
                    "path": [
                      "admin",
                      "category",
                      ":id"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": [
                      {
                        "type": "any",
                        "value": "{{categoryId}}",
                        "key": "id"
                      }
                    ]
                  },
                  "method": "GET",
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "type": "string",
                        "value": "{{adminAuthToken}}",
                        "key": "token"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c1b3a324-dad5-4547-b080-4b42c7690435",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// Test for a successful response status\r",
                        "pm.test(\"Status code is 200\", function () {\r",
                        "    pm.response.to.have.status(200);\r",
                        "});\r",
                        "\r",
                        "// Test for response body properties\r",
                        "pm.test(\"Response body has 'success' property\", function () {\r",
                        "    pm.expect(pm.response.json()).to.have.property('success');\r",
                        "});\r",
                        "pm.test(\"Response body has 'message' property\", function () {\r",
                        "    pm.expect(pm.response.json()).to.have.property('message');\r",
                        "});\r",
                        "pm.test(\"Response body has 'data' property\", function () {\r",
                        "    pm.expect(pm.response.json()).to.have.property('data');\r",
                        "});\r",
                        "\r",
                        "// Test for specific data properties\r",
                        "pm.test(\"Data property has 'id' field\", function () {\r",
                        "    pm.expect(pm.response.json().data).to.have.property('id');\r",
                        "});\r",
                        "pm.test(\"Data property has 'name' field\", function () {\r",
                        "    pm.expect(pm.response.json().data).to.have.property('name');\r",
                        "});\r",
                        "pm.test(\"Data property has 'description' field\", function () {\r",
                        "    pm.expect(pm.response.json().data).to.have.property('description');\r",
                        "});\r",
                        "pm.test(\"Data property has 'createdAt' field\", function () {\r",
                        "    pm.expect(pm.response.json().data).to.have.property('createdAt');\r",
                        "});\r",
                        "pm.test(\"Data property has 'updatedAt' field\", function () {\r",
                        "    pm.expect(pm.response.json().data).to.have.property('updatedAt');\r",
                        "});\r",
                        ""
                      ],
                      "_lastExecutionId": "edbcea57-19b5-464c-ae5e-ace0cee4b1ff"
                    }
                  }
                ]
              },
              {
                "id": "a6ef8d36-5fd6-4280-bf63-e841d1e953e3",
                "name": "Delete Category",
                "request": {
                  "url": {
                    "path": [
                      "admin",
                      "category",
                      ":id"
                    ],
                    "host": [
                      "{{base_url}}"
                    ],
                    "query": [],
                    "variable": [
                      {
                        "type": "any",
                        "value": "{{categoryId}}",
                        "key": "id"
                      }
                    ]
                  },
                  "method": "DELETE",
                  "auth": {
                    "type": "bearer",
                    "bearer": [
                      {
                        "type": "string",
                        "value": "{{adminAuthToken}}",
                        "key": "token"
                      }
                    ]
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cb98c323-54bd-4752-93fc-ded8f0859c7b",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "// Ensure admin token exists\r",
                        "if (!pm.environment.get(\"adminAuthtoken\")) {\r",
                        "    console.warn(\"⚠️ Missing 'admin_token'. Ensure authentication is set.\");\r",
                        "}\r",
                        "\r",
                        "// Retrieve the category ID from the environment\r",
                        "let categoryId = pm.environment.get(\"categoryId\");\r",
                        "\r",
                        "// Validate if category ID is set\r",
                        "if (!categoryId) {\r",
                        "    console.warn(\"⚠️ Warning: 'categoryId' is missing from environment variables.\");\r",
                        "}\r",
                        "\r",
                        "// Log the category ID for debugging\r",
                        "console.log(\"🟢 Using Category ID:\", categoryId);\r",
                        ""
                      ],
                      "_lastExecutionId": "58edd2f4-31b2-43c8-8950-3c0da04c76b8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee0f2df4-5e1c-42e4-a19e-30d3b2da7aa3",
                      "type": "text/javascript",
                      "packages": {},
                      "exec": [
                        "let jsonData = pm.response.json();\r",
                        "\r",
                        "// ✅ Test Case: Verify Status Code 200 (Success)\r",
                        "pm.test(\"Status code is 200 - Category Retrieved\", function () {\r",
                        "    pm.response.to.have.status(200);\r",
                        "});\r",
                        "\r",
                        "// ✅ Test Case: Validate Response Structure\r",
                        "pm.test(\"Response contains category details\", function () {\r",
                        "    pm.expect(jsonData.data).to.have.property(\"name\").that.is.a(\"string\");\r",
                        "    pm.expect(jsonData.data).to.have.property(\"description\").that.is.a(\"string\");\r",
                        "});\r",
                        "\r",
                        "// ✅ Test Case: Response Time\r",
                        "pm.test(\"Response time is under 1000ms\", function () {\r",
                        "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                        "});\r",
                        "\r",
                        "// ❌ Test Case: Missing Auth Token\r",
                        "if (!pm.environment.get(\"adminAuthToken\")) {\r",
                        "    pm.test(\"Response should be 401 Unauthorized when no token is provided\", function () {\r",
                        "        pm.response.to.have.status(401);\r",
                        "    });\r",
                        "}\r",
                        "\r",
                        "// ❌ Test Case: Invalid Category ID (404)\r",
                        "if (pm.environment.get(\"categoryId\") === \"invalid-id\") {\r",
                        "    pm.test(\"Response should be 404 Not Found for invalid category ID\", function () {\r",
                        "        pm.response.to.have.status(404);\r",
                        "    });\r",
                        "}\r",
                        "\r",
                        "// ❌ Test Case: Missing Category ID (400)\r",
                        "if (!pm.environment.get(\"categoryId\")) {\r",
                        "    pm.test(\"Response should be 400 Bad Request for missing category ID\", function () {\r",
                        "        pm.response.to.have.status(400);\r",
                        "    });\r",
                        "}\r",
                        ""
                      ],
                      "_lastExecutionId": "50f9704c-dd09-4de4-9d5d-c5462ec60deb"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "event": []
      },
      {
        "id": "8b64db53-a9fa-473b-8cc6-96423e861533",
        "name": "product",
        "item": [
          {
            "id": "d8af0e9c-aa87-4e73-8e74-f42001b0f625",
            "name": "valid Sign In",
            "request": {
              "url": {
                "path": [
                  "auth",
                  "signin",
                  ""
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{{currentPayload}}\r\n",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cab83c48-571c-4902-b4e7-02acc12dd018",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "const testCases = {\r",
                    "    \"valid_login\": {\r",
                    "     \"email\": \"testog@e-record.com\",\r",
                    "    \"password\": \"Pass@12345\"\r",
                    "},\r",
                    "    \"missing_email\": { \r",
                    "        \"email\": \"\", \r",
                    "        \"password\": \"Pass$50000\" \r",
                    "    },\r",
                    "    \"missing_password\": { \r",
                    "        \"email\": \"existing@mail.com\", \r",
                    "        \"password\": \"\" \r",
                    "    },\r",
                    "    \"invalid_email_format\": { \r",
                    "        \"email\": \"invalid-email\", \r",
                    "        \"password\": \"Pass$50000\" \r",
                    "    },\r",
                    "    \"incorrect_password\": { \r",
                    "        \"email\": \"existing@mail.com\", \r",
                    "        \"password\": \"WrongPass123\" \r",
                    "    },\r",
                    "    \"unregistered_email\": { \r",
                    "        \"email\": \"unregistered@mail.com\", \r",
                    "        \"password\": \"Pass$50000\" \r",
                    "    }\r",
                    "};\r",
                    "\r",
                    "// Get the current test case (default: valid_login)\r",
                    "let testCase = pm.environment.get(\"testCase\") || \"valid_login\";\r",
                    "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                    "\r",
                    "// Set request headers for tracking\r",
                    "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                    "\r",
                    ""
                  ],
                  "_lastExecutionId": "a3967611-823a-4c6e-9ee2-a0f9fea65d93"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a359d213-bdc7-46a4-8889-efa1f73cc962",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "let response = pm.response.json();\r",
                    "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                    "\r",
                    "const expectedStatus = {\r",
                    "    \"valid_login\": 200,\r",
                    "    \"missing_email\": 400,\r",
                    "    \"missing_password\": 400,\r",
                    "    \"invalid_email_format\": 400,\r",
                    "    \"incorrect_password\": 401,\r",
                    "    \"unregistered_email\": 404\r",
                    "};\r",
                    "\r",
                    "// ✅ Test Case 1: Validate Status Code\r",
                    "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                    "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                    "});\r",
                    "\r",
                    "// Handle successful login response\r",
                    "if (pm.response.code === 200) {\r",
                    "    // ✅ Test Case 2: Verify Success Field Value\r",
                    "    pm.test(\"Verify that the success field is true\", function () {\r",
                    "        pm.expect(response.success).to.eql(true);\r",
                    "    });\r",
                    "\r",
                    "    // ✅ Test Case 3: Check Message Field Value\r",
                    "    pm.test(\"Check that the message field is 'User sign in successful'\", function () {\r",
                    "        pm.expect(response.message).to.eql(\"User sign in successful\");\r",
                    "    });\r",
                    "\r",
                    "    // ✅ Test Case 4: Validate Token Field\r",
                    "    pm.test(\"Validate that the token field is present and not empty\", function () {\r",
                    "        pm.expect(response.data.token).to.be.a('string');\r",
                    "        pm.expect(response.data.token.length).to.be.greaterThan(0);\r",
                    "    });\r",
                    "\r",
                    "    // ✅ Test Case 5: Verify Expiration Timestamp Format\r",
                    "    pm.test(\"Verify that the expiration timestamp is in ISO 8601 format\", function () {\r",
                    "        let expiresIn = response.data.expiresIn;\r",
                    "        pm.expect(new Date(expiresIn).toISOString()).to.eql(expiresIn);\r",
                    "    });\r",
                    "\r",
                    "    // ✅ Test Case 6: Validate User Data Fields\r",
                    "    pm.test(\"Validate that the user data fields are correct\", function () {\r",
                    "        let user = response.data.user;\r",
                    "        \r",
                    "        pm.expect(user.id).to.not.eql(null);\r",
                    "        pm.expect(user.email).to.not.eql(null);\r",
                    "        pm.expect(user.fullName).to.not.eql(null);\r",
                    "        pm.expect(user.firstName).to.not.eql(null);\r",
                    "        pm.expect(user.lastName).to.not.eql(null);\r",
                    "    });\r",
                    "\r",
                    "    pm.environment.set(\"userId\", response.data.user.id)\r",
                    "\r",
                    "    // ✅ Test Case 7: Verify KYC Status\r",
                    "    pm.test(\"Verify that the KYC status is false\", function () {\r",
                    "        pm.expect(response.data.user.kycCompleted).to.eql(false);\r",
                    "    });\r",
                    "\r",
                    "    // ✅ Test Case 9: Check Token Format (JWT)\r",
                    "    pm.test(\"Check that the token is in a valid JWT format\", function () {\r",
                    "        let token = response.data.token;\r",
                    "        let tokenParts = token.split('.');\r",
                    "\r",
                    "        pm.expect(tokenParts).to.have.lengthOf(3);\r",
                    "        pm.expect(tokenParts[0]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                    "        pm.expect(tokenParts[1]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                    "        pm.expect(tokenParts[2]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                    "    });\r",
                    "\r",
                    "    // ✅ Test Case 10: Validate Response Time\r",
                    "    pm.test(\"Validate that the response time is less than 500ms\", function () {\r",
                    "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                    "    });\r",
                    "\r",
                    "    // ✅ Store Auth Token for Future Requests\r",
                    "    pm.environment.set(\"authToken\", response.data.token);\r",
                    "} \r",
                    "// Handle error cases\r",
                    "else {\r",
                    "    pm.test(\"Response contains error message\", function () {\r",
                    "        pm.expect(response).to.have.property(\"error\");\r",
                    "        pm.expect(response.error).to.be.a(\"string\");\r",
                    "    });\r",
                    "}\r",
                    ""
                  ],
                  "_lastExecutionId": "9ac9fcb0-f51a-42f3-a3c8-2ef6c123219e"
                }
              }
            ]
          },
          {
            "id": "17690a3e-fa74-49f5-849f-3d412ec83d52",
            "name": "add product",
            "request": {
              "url": {
                "path": [
                  "products"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{authToken}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c810435d-b1e8-4cc8-a896-155e37f6b598",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// ✅ Ensure Authorization Token is Set",
                    "if (!pm.environment.get(\"authToken\")) {",
                    "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");",
                    "}",
                    "",
                    "// ✅ Set Authorization Header",
                    "pm.request.headers.add({",
                    "    key: \"Authorization\",",
                    "    value: `Bearer ${pm.environment.get(\"authToken\")}`",
                    "});",
                    "",
                    "// ✅ Function to generate a random number within a range",
                    "function getRandomNumber(min, max) {",
                    "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                    "}",
                    "",
                    "// ✅ Function to generate a random date within a range",
                    "function getRandomDate(start, end) {",
                    "    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))",
                    "        .toISOString()",
                    "        .split(\"T\")[0]; // Returns in YYYY-MM-DD format",
                    "}",
                    "",
                    "// ✅ Predefined list of real product names and descriptions",
                    "const products = [",
                    "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },",
                    "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },",
                    "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },",
                    "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },",
                    "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },",
                    "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },",
                    "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },",
                    "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },",
                    "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },",
                    "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }",
                    "];",
                    "",
                    "// ✅ Predefined list of real brand names",
                    "const brands = [",
                    "    \"Nike\", \"Adidas\", \"Apple\", \"Samsung\", \"Nestlé\", \"L'Oréal\", \"LG\", \"Sony\", \"Coca-Cola\", \"Colgate\"",
                    "];",
                    "",
                    "// ✅ Select a random product and brand",
                    "const selectedProduct = products[Math.floor(Math.random() * products.length)];",
                    "const selectedBrand = brands[Math.floor(Math.random() * brands.length)];",
                    "",
                    "// ✅ Append a random number to the product title to avoid duplication",
                    "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;",
                    "",
                    "// ✅ Generate dynamic product details",
                    "const costPrice = getRandomNumber(50, 500);",
                    "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice",
                    "",
                    "const productDetails = {",
                    "    title: uniqueTitle,  // Ensuring uniqueness",
                    "    description: selectedProduct.description,",
                    "    brandName: selectedBrand,",
                    "    model: `M${getRandomNumber(1000, 9999)}`,",
                    "    expiryDate: getRandomDate(new Date(2025, 0, 1), new Date(2030, 11, 31)), // Future date",
                    "    manufactureDate: getRandomDate(new Date(2023, 0, 1), new Date(2024, 11, 31)), // Past date",
                    "    isoNumber: getRandomNumber(1000, 9999).toString(),",
                    "    nafdacNumber: getRandomNumber(1000, 9999).toString(),",
                    "    quantity: getRandomNumber(1, 100),",
                    "    costPrice: costPrice,",
                    "    sellingPrice: sellingPrice, // Ensuring selling price is not less than cost price",
                    "    eanNumber: getRandomNumber(1000, 9999).toString(),",
                    "    categoryId: pm.environment.get(\"categoryId4p\"),",
                    "    saleStart: getRandomDate(new Date(2024, 0, 1), new Date(2025, 11, 31)), // Future date",
                    "    saleEnd: getRandomDate(new Date(2025, 0, 1), new Date(2026, 11, 31)), // Future date",
                    "    imagePath: \"https://imagekit.io/tools/free-image-hosting/\" // Replace with dynamic upload if needed",
                    "};",
                    "",
                    "// ✅ Update form-data in the request body",
                    "pm.request.body.update({",
                    "    mode: \"formdata\",",
                    "    formdata: [",
                    "        { key: \"title\", value: productDetails.title, type: \"text\" },",
                    "        { key: \"description\", value: productDetails.description, type: \"text\" },",
                    "        { key: \"brandName\", value: productDetails.brandName, type: \"text\" },",
                    "        { key: \"model\", value: productDetails.model, type: \"text\" },",
                    "        { key: \"expiryDate\", value: productDetails.expiryDate, type: \"text\" },",
                    "        { key: \"manufactureDate\", value: productDetails.manufactureDate, type: \"text\" },",
                    "        { key: \"isoNumber\", value: productDetails.isoNumber, type: \"text\" },",
                    "        { key: \"nafdacNumber\", value: productDetails.nafdacNumber, type: \"text\" },",
                    "        { key: \"quantity\", value: productDetails.quantity.toString(), type: \"text\" },",
                    "        { key: \"costPrice\", value: productDetails.costPrice.toString(), type: \"text\" },",
                    "        { key: \"sellingPrice\", value: productDetails.sellingPrice.toString(), type: \"text\" },",
                    "        { key: \"eanNumber\", value: productDetails.eanNumber, type: \"text\" },",
                    "        { key: \"categoryId\", value: productDetails.categoryId, type: \"text\" },",
                    "        { key: \"saleStart\", value: productDetails.saleStart, type: \"text\" },",
                    "        { key: \"saleEnd\", value: productDetails.saleEnd, type: \"text\" },",
                    "        { key: \"images\", src: productDetails.imagePath, type: \"file\" }",
                    "    ]",
                    "});",
                    "",
                    "// ✅ Log generated data for debugging",
                    "console.log(\"🔹 Generated product details:\", productDetails);",
                    ""
                  ],
                  "_lastExecutionId": "00e3dc30-3389-43bf-b49f-67a7b839840d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "427614b5-9354-458b-bd1e-f7a3fc0dced7",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// ✅ Ensure response exists\r",
                    "pm.test(\"Response should be present\", function () {\r",
                    "    pm.response.to.have.status(200); // Corrected the expected status code\r",
                    "    pm.response.to.be.json;\r",
                    "});\r",
                    "\r",
                    "// ✅ Parse the response body\r",
                    "let response = pm.response.json();\r",
                    "\r",
                    "// ✅ Define required fields\r",
                    "const requiredFields = [\r",
                    "    \"id\", \"title\", \"description\", \"brandName\", \"model\",\r",
                    "    \"expiryDate\", \"manufactureDate\", \"isoNumber\", \"nafdacNumber\",\r",
                    "    \"quantity\", \"costPrice\", \"sellingPrice\", \"eanNumber\", \"categoryId\",\r",
                    "    \"saleStart\", \"saleEnd\"\r",
                    "];\r",
                    "\r",
                    "// ✅ Check that required fields exist and are not empty\r",
                    "pm.test(\"Required fields should not be empty\", function () {\r",
                    "    requiredFields.forEach(field => {\r",
                    "        pm.expect(response.data).to.have.property(field);\r",
                    "        if (response[field]) {\r",
                    "            pm.expect(response.data[field]).to.not.be.null;\r",
                    "            pm.expect(response.data[field]).to.not.be.undefined;\r",
                    "\r",
                    "            // ✅ Check if string fields are not empty\r",
                    "            if (typeof response.data[field] === \"string\") {\r",
                    "                pm.expect(response.data[field].trim()).to.not.equal(\"\");\r",
                    "            }\r",
                    "\r",
                    "            // ✅ Check if array fields are not empty\r",
                    "            if (Array.isArray(response.data[field])) {\r",
                    "                pm.expect(response.data[field].length).to.be.greaterThan(0);\r",
                    "            }\r",
                    "\r",
                    "            // ✅ Check if numeric fields are valid\r",
                    "            if ([\"quantity\", \"costPrice\", \"sellingPrice\"].includes(field)) {\r",
                    "                pm.expect(response.data[field]).to.be.a(\"number\");\r",
                    "                pm.expect(response.data[field]).to.be.greaterThan(0);\r",
                    "            }\r",
                    "        }\r",
                    "    });\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate the response contains a success message\r",
                    "pm.test(\"Response should contain a success message\", function () {\r",
                    "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    pm.expect(response.message.toLowerCase()).to.include(\"success\");\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate that selling price is not lower than cost price\r",
                    "pm.test(\"Selling price should be greater than or equal to cost price\", function () {\r",
                    "    if (response.sellingPrice && response.costPrice) {\r",
                    "        pm.expect(response.sellingPrice).to.be.at.least(response.costPrice);\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate dates are in YYYY-MM-DD format\r",
                    "pm.test(\"Dates should be in valid format\", function () {\r",
                    "    [\"expiryDate\", \"manufactureDate\", \"saleStart\", \"saleEnd\"].forEach(field => {\r",
                    "        if (response[field]) {\r",
                    "            pm.expect(response[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                    "        }\r",
                    "    });\r",
                    "});\r",
                    "\r",
                    "// ✅ Log response for debugging\r",
                    "console.log(\"🔹 Response Body:\", response);\r",
                    "\r",
                    "pm.environment.set(\"productId\", response?.data?.id); // Fixed the TypeError by using optional chaining\r",
                    ""
                  ],
                  "_lastExecutionId": "7fdcbba5-51d6-422a-9b89-b13427c00d13"
                }
              }
            ]
          },
          {
            "id": "1558af38-c792-4986-9265-3a05664909f7",
            "name": "get products",
            "request": {
              "url": {
                "path": [
                  "products"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{authToken}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5acdbd07-8bbd-4e88-9ea6-c89fee8db72e",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// ✅ Ensure response is in JSON format\r",
                    "pm.test(\"Response is in JSON format\", function () {\r",
                    "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                    "});\r",
                    "\r",
                    "// ✅ Parse response JSON\r",
                    "let jsonData = pm.response.json();\r",
                    "\r",
                    "// ✅ Validate response status code\r",
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate success flag\r",
                    "pm.test(\"Response contains success flag\", function () {\r",
                    "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate response message\r",
                    "pm.test(\"Response contains success message\", function () {\r",
                    "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product fetched successfully\");\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate data structure\r",
                    "pm.test(\"Response contains an array of products\", function () {\r",
                    "    pm.expect(jsonData.data).to.have.property(\"result\").that.is.an(\"array\");\r",
                    "\r",
                    "    let products = jsonData.data.result;\r",
                    "    \r",
                    "    if (products.length > 0) {\r",
                    "        let product = products[0];\r",
                    "        pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                    "        pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                    "        pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\"); // Adjusted type based on response\r",
                    "        pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate authorization requirement\r",
                    "pm.test(\"Request requires authorization\", function () {\r",
                    "    pm.response.to.not.have.status(401);\r",
                    "});\r",
                    "\r",
                    "// ✅ Extract and store all unique product IDs\r",
                    "let products = jsonData.data?.result || [];\r",
                    "let existingIds = pm.environment.get(\"product_ids\");\r",
                    "existingIds = existingIds ? JSON.parse(existingIds) : [];\r",
                    "\r",
                    "let newProductIds = products.map(product => product.id);\r",
                    "\r",
                    "// ✅ Merge new IDs with existing ones and remove duplicates\r",
                    "let uniqueProductIds = [...new Set([...existingIds, ...newProductIds])];\r",
                    "\r",
                    "// ✅ Store updated product IDs in environment variable\r",
                    "pm.environment.set(\"product_ids\", JSON.stringify(uniqueProductIds));\r",
                    "\r",
                    "// ✅ Store first product ID separately for quick access\r",
                    "if (products.length > 0) {\r",
                    "    pm.environment.set(\"firstProductId\", products[0].id);\r",
                    "    console.log(\"First product ID stored:\", products[0].id);\r",
                    "}\r",
                    "\r",
                    "// ✅ Log the unique extracted product IDs for debugging\r",
                    "console.log(\"Extracted Product IDs:\", uniqueProductIds);\r",
                    "\r",
                    "// ✅ Test that product IDs are correctly stored\r",
                    "pm.test(\"Product IDs should be extracted, stored, and unique\", function () {\r",
                    "    pm.expect(uniqueProductIds).to.be.an(\"array\").that.is.not.empty;\r",
                    "    uniqueProductIds.forEach(id => pm.expect(id).to.be.a(\"string\").that.has.lengthOf(36)); // UUID validation\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "ec167e80-cfe3-4cc1-ae4c-3eb9273e706d"
                }
              }
            ]
          },
          {
            "id": "e87e3c10-3383-4997-996a-4557c70e7107",
            "name": "get product by ID",
            "request": {
              "url": {
                "path": [
                  "products",
                  ":id"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": [
                  {
                    "type": "any",
                    "value": "{{firstProductId}}",
                    "key": "id"
                  }
                ]
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e3928b7d-bb79-44ad-8b81-032f3d61c9b9",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// ✅ TC_001 - Validate 200 OK response for a valid product ID\r",
                    "pm.test(\"TC_001 - Status code is 200 for a valid product ID\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "// ✅ Parse response JSON\r",
                    "let jsonData = pm.response.json();\r",
                    "if (jsonData.success && jsonData.data) {\r",
                    "    let product = jsonData.data;\r",
                    "\r",
                    "    // ✅ Store key product details as environment variables\r",
                    "    pm.environment.set(\"productId\", product.id);\r",
                    "    pm.environment.set(\"productTitle\", product.title);\r",
                    "    pm.environment.set(\"productDescription\", product.description);\r",
                    "    pm.environment.set(\"brandName\", product.brandName);\r",
                    "    pm.environment.set(\"model\", product.model);\r",
                    "    pm.environment.set(\"expiryDate\", product.expiryDate);\r",
                    "    pm.environment.set(\"manufactureDate\", product.manufactureDate);\r",
                    "    pm.environment.set(\"quantity\", product.quantity);\r",
                    "    pm.environment.set(\"sellingPrice\", product.sellingPrice);\r",
                    "    pm.environment.set(\"costPrice\", product.costPrice);\r",
                    "    pm.environment.set(\"sku\", product.sku);\r",
                    "    pm.environment.set(\"eanNumber\", product.eanNumber);\r",
                    "    pm.environment.set(\"categoryId\", product.category.id);\r",
                    "    pm.environment.set(\"categoryName\", product.category.name);\r",
                    "    pm.environment.set(\"sellerEmail\", product.seller.email);\r",
                    "    pm.environment.set(\"sellerFullName\", product.seller.fullName);\r",
                    "    \r",
                    "    console.log(\"✅ Stored product details as environment variables.\");\r",
                    "}\r",
                    "\r",
                    "// ✅ TC_002 - Validate response structure\r",
                    "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                    "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                    "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                    "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                    "\r",
                    "    let product = jsonData.data;\r",
                    "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                    "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                    "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                    "    pm.expect(product).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                    "    pm.expect(product).to.have.property(\"model\").that.is.a(\"string\");\r",
                    "    pm.expect(product).to.have.property(\"expiryDate\").that.is.a(\"string\");\r",
                    "    pm.expect(product).to.have.property(\"manufactureDate\").that.is.a(\"string\");\r",
                    "    pm.expect(product).to.have.property(\"quantity\").that.is.a(\"number\");\r",
                    "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                    "    pm.expect(product).to.have.property(\"costPrice\").that.is.a(\"string\");\r",
                    "    pm.expect(product).to.have.property(\"sku\").that.is.a(\"string\");\r",
                    "    pm.expect(product).to.have.property(\"eanNumber\").that.is.a(\"string\");\r",
                    "\r",
                    "    pm.expect(product).to.have.property(\"category\").that.is.an(\"object\");\r",
                    "    pm.expect(product.category).to.have.property(\"id\").that.is.a(\"string\");\r",
                    "    pm.expect(product.category).to.have.property(\"name\").that.is.a(\"string\");\r",
                    "\r",
                    "    pm.expect(product).to.have.property(\"seller\").that.is.an(\"object\");\r",
                    "    pm.expect(product.seller).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                    "    pm.expect(product.seller).to.have.property(\"email\").that.is.a(\"string\");\r",
                    "\r",
                    "    pm.expect(product).to.have.property(\"reviews\").that.is.an(\"object\");\r",
                    "    pm.expect(product.reviews).to.have.property(\"data\").that.is.an(\"array\");\r",
                    "});\r",
                    "\r",
                    "// ✅ TC_003 - Validate numerical values (quantity, price)\r",
                    "pm.test(\"TC_003 - Ensure numerical values are correct\", function () {\r",
                    "    let product = pm.response.json().data;\r",
                    "    pm.expect(product.quantity).to.be.a(\"number\");\r",
                    "    pm.expect(parseFloat(product.sellingPrice)).to.be.a(\"number\");\r",
                    "    pm.expect(parseFloat(product.costPrice)).to.be.a(\"number\");\r",
                    "});\r",
                    "\r",
                    "// ✅ TC_004 - Validate seller email format\r",
                    "pm.test(\"TC_004 - Validate seller email format\", function () {\r",
                    "    let product = pm.response.json().data;\r",
                    "    pm.expect(product.seller.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                    "});\r",
                    "\r",
                    "// ✅ TC_005 - API response time should be within 1000ms\r",
                    "pm.test(\"TC_005 - API response time should be within 1000ms\", function () {\r",
                    "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "337313f0-1a4e-48a3-81fa-bec5badf73dc"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "c3857aad-3a03-42df-a3e2-96403f7309b0",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "288a0e0e-2153-4c7d-bf64-14ea8b598e58"
                }
              }
            ]
          },
          {
            "id": "c8b7578a-c912-43b2-a8df-f584d1599230",
            "name": "update product",
            "request": {
              "url": {
                "path": [
                  "products",
                  ":id"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": [
                  {
                    "type": "any",
                    "value": "{{firstProductId}}",
                    "key": "id"
                  }
                ]
              },
              "method": "PUT",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{authToken}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// ✅ Ensure response is in JSON format\r",
                    "pm.test(\"Response is in JSON format\", function () {\r",
                    "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset:utf-8\");\r",
                    "});\r",
                    "\r",
                    "// ✅ Parse response JSON\r",
                    "let jsonData = pm.response.json();\r",
                    "\r",
                    "// ✅ Validate status code\r",
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate success flag\r",
                    "pm.test(\"Response contains success flag\", function () {\r",
                    "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate response message\r",
                    "pm.test(\"Response contains success message\", function () {\r",
                    "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product updated successfully\");\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate updated product structure\r",
                    "pm.test(\"Response contains updated product details\", function () {\r",
                    "    pm.expect(jsonData).to.have.property(\"data\");\r",
                    "    let product = jsonData.data;\r",
                    "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                    "    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
                    "    pm.expect(product).to.have.property(\"price\").that.is.a(\"number\");\r",
                    "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                    "    pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\").and.includes(\"http\");\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate authorization requirement\r",
                    "pm.test(\"Request requires authorization\", function () {\r",
                    "    pm.response.to.not.have.status(401);\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "d046e760-dc6a-44b9-a725-667194ab3e82",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// ✅ Ensure Authorization Token is Set\r",
                    "if (!pm.environment.get(\"authToken\")) {\r",
                    "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");\r",
                    "}\r",
                    "\r",
                    "// ✅ Set Authorization Header\r",
                    "pm.request.headers.add({\r",
                    "    key: \"Authorization\",\r",
                    "    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
                    "});\r",
                    "\r",
                    "// ✅ Function to generate a random number within a range\r",
                    "function getRandomNumber(min, max) {\r",
                    "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                    "}\r",
                    "\r",
                    "// ✅ Predefined list of real product names and descriptions\r",
                    "const products = [\r",
                    "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },\r",
                    "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },\r",
                    "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },\r",
                    "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },\r",
                    "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },\r",
                    "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },\r",
                    "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },\r",
                    "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },\r",
                    "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },\r",
                    "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }\r",
                    "];\r",
                    "\r",
                    "// ✅ Select a random product\r",
                    "const selectedProduct = products[Math.floor(Math.random() * products.length)];\r",
                    "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;\r",
                    "\r",
                    "// ✅ Generate dynamic cost and selling prices\r",
                    "const costPrice = getRandomNumber(50, 500);\r",
                    "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice\r",
                    "\r",
                    "// ✅ Fetch existing product details from environment variables\r",
                    "const productDetails = {\r",
                    "    title: uniqueTitle,  // Updating title\r",
                    "    description: selectedProduct.description, // Updating description\r",
                    "    brandName: pm.environment.get(\"brandName\") || \"DefaultBrand\",\r",
                    "    model: pm.environment.get(\"model\") || `M${getRandomNumber(1000, 9999)}`,\r",
                    "    expiryDate: pm.environment.get(\"expiryDate\") || \"2026-12-31T00:00:00.000Z\",\r",
                    "    manufactureDate: pm.environment.get(\"manufactureDate\") || \"2024-01-01T00:00:00.000Z\",\r",
                    "    isoNumber: pm.environment.get(\"isoNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                    "    nafdacNumber: pm.environment.get(\"nafdacNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                    "    quantity: pm.environment.get(\"quantity\") || getRandomNumber(1, 100),\r",
                    "    costPrice: costPrice.toString(), // Updating cost price\r",
                    "    sellingPrice: sellingPrice.toString(), // Updating selling price\r",
                    "    eanNumber: pm.environment.get(\"eanNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                    "    categoryId: pm.environment.get(\"categoryId4p\"),\r",
                    "    saleStart: pm.environment.get(\"saleStart\") || \"2025-01-01T00:00:00.000Z\",\r",
                    "    saleEnd: pm.environment.get(\"saleEnd\") || \"2026-12-31T00:00:00.000Z\"\r",
                    "};\r",
                    "\r",
                    "// ✅ Update form-data in the request body (excluding images)\r",
                    "pm.request.body.update({\r",
                    "    mode: \"formdata\",\r",
                    "    formdata: Object.entries(productDetails).map(([key, value]) => ({\r",
                    "        key: key,\r",
                    "        value: value,\r",
                    "        type: \"text\"\r",
                    "    }))\r",
                    "});\r",
                    "\r",
                    "// ✅ Log generated data for debugging\r",
                    "console.log(\"🔹 Updated Product Details:\", productDetails);\r",
                    ""
                  ],
                  "_lastExecutionId": "4b89423d-5840-4106-a7ed-22222b02f904"
                }
              }
            ]
          },
          {
            "id": "83efae9e-6fdb-489c-a62b-ec39aa817070",
            "name": "delete product",
            "request": {
              "url": {
                "path": [
                  "products",
                  ":id"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": [
                  {
                    "type": "any",
                    "value": "{{firstProductId}}",
                    "key": "id"
                  }
                ]
              },
              "method": "DELETE",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{authToken}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b2e3e38f-f2f4-45ca-9a31-67a7b8df002d",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// ✅ Ensure response is in JSON format\r",
                    "pm.test(\"Response is in JSON format\", function () {\r",
                    "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                    "});\r",
                    "\r",
                    "// ✅ Parse response JSON\r",
                    "let jsonData = pm.response.json();\r",
                    "\r",
                    "// ✅ Validate response status code\r",
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate success flag\r",
                    "pm.test(\"Response contains success flag\", function () {\r",
                    "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate product data structure\r",
                    "pm.test(\"Response contains valid product details\", function () {\r",
                    "    pm.expect(jsonData).to.have.property(\"data\");\r",
                    "    let product = jsonData.data;\r",
                    "    \r",
                    "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                    "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                    "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                    "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate authorization requirement\r",
                    "pm.test(\"Request requires authorization\", function () {\r",
                    "    pm.response.to.not.have.status(401);\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "e4cbd781-c87b-4533-b4b1-cb5d3b8b43ee"
                }
              },
              {
                "listen": "prerequest",
                "script": {
                  "id": "5bd1202c-89cc-4b06-b701-f4ef429f75e9",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// ✅ Retrieve stored product IDs from the environment\r",
                    "let storedProductIds = pm.environment.get(\"product_ids\");\r",
                    "storedProductIds = storedProductIds ? JSON.parse(storedProductIds) : [];\r",
                    "\r",
                    "// ✅ Select a random product ID and store it before the request runs\r",
                    "if (storedProductIds.length > 0) {\r",
                    "    let randomIndex = Math.floor(Math.random() * storedProductIds.length);\r",
                    "    let randomProductId = storedProductIds[randomIndex];\r",
                    "\r",
                    "    // ✅ Store the selected product ID for use in the request\r",
                    "    pm.environment.set(\"randomProductId\", randomProductId);\r",
                    "    console.log(\"Randomly selected Product ID:\", randomProductId);\r",
                    "} else {\r",
                    "    console.warn(\"No stored product IDs available! Ensure the previous request fetched product IDs correctly.\");\r",
                    "}\r",
                    ""
                  ],
                  "_lastExecutionId": "23bd7d97-e382-4214-b968-09ce1c0c2dfe"
                }
              }
            ]
          },
          {
            "id": "e7c6f7cf-f1fb-425f-9c69-f9ea93232803",
            "name": "Top brands",
            "request": {
              "url": {
                "path": [
                  "products",
                  "brands"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "83c0d520-e58c-413f-ab9a-6a86fce39f05",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// ✅ Ensure response is in JSON format\r",
                    "pm.test(\"Response is in JSON format\", function () {\r",
                    "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                    "});\r",
                    "\r",
                    "// ✅ Parse response JSON\r",
                    "let jsonData = pm.response.json();\r",
                    "\r",
                    "// ✅ Validate response status code\r",
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate success flag\r",
                    "pm.test(\"Response contains success flag\", function () {\r",
                    "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate response message\r",
                    "pm.test(\"Response contains success message\", function () {\r",
                    "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product top brand fetched successfully\");\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate data structure (Array of Brands)\r",
                    "pm.test(\"Response contains an array of top brands\", function () {\r",
                    "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                    "\r",
                    "    if (jsonData.data.length > 0) {\r",
                    "        let brand = jsonData.data[0];\r",
                    "\r",
                    "        pm.expect(brand).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                    "        pm.expect(brand).to.have.property(\"count\").that.is.a(\"number\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate authorization requirement\r",
                    "pm.test(\"Request requires authorization\", function () {\r",
                    "    pm.response.to.not.have.status(401);\r",
                    "});\r",
                    "\r",
                    "// ✅ Store brand names for future use\r",
                    "if (jsonData.data.length > 0) {\r",
                    "    let brandNames = jsonData.data.map(brand => brand.brandName);\r",
                    "    pm.environment.set(\"brand_names\", JSON.stringify(brandNames));\r",
                    "    console.log(\"Stored brand names:\", brandNames);\r",
                    "}\r",
                    ""
                  ],
                  "_lastExecutionId": "4158cfe7-cb1b-4531-9629-d21d38d52ec4"
                }
              }
            ]
          },
          {
            "id": "f1be75de-bb8e-4f8c-990d-f9230ed0fc7d",
            "name": "search products",
            "request": {
              "url": {
                "path": [
                  "products",
                  "search"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"q\": \"LG\"\n}",
                "options": {
                  "raw": {
                    "language": "json"
                  }
                }
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "70e98749-492d-42fd-b924-96dcad8f7dd5",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// ✅ TC_001 - Validate 200 OK response for a valid search query\r",
                    "pm.test(\"TC_001 - Status code is 200 for a valid search\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "// ✅ TC_002 - Validate response structure\r",
                    "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                    "    let jsonData = pm.response.json();\r",
                    "    \r",
                    "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                    "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                    "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                    "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                    "});\r",
                    "\r",
                    "// ✅ TC_003 - Validate search query response does not return 404 or empty result set\r",
                    "pm.test(\"TC_003 - Valid search should not return 404 or empty result set\", function () {\r",
                    "    let data = pm.response.json().data;\r",
                    "    \r",
                    "    pm.expect(pm.response.code).not.to.eql(404);\r",
                    "    pm.expect(data.result.length).to.be.above(0, \"Search query should return at least one result\");\r",
                    "});\r",
                    "\r",
                    "// ✅ TC_004 - Validate response time (Performance)\r",
                    "pm.test(\"TC_004 - API response time should be within 1000ms\", function () {\r",
                    "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "a2806663-5e06-423a-9899-7ec1f8034045"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "2b87c8e4-11a7-4c27-8f22-f017a7a60025",
        "name": "seller",
        "item": [
          {
            "id": "e07737be-bc80-4064-964b-d7b5fc400e57",
            "name": "create seller",
            "request": {
              "url": {
                "path": [
                  "seller"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "formdata",
                "formdata": [
                  {
                    "key": "managerFullName",
                    "value": "{{managerFullName}}",
                    "type": "text"
                  },
                  {
                    "key": "shopName",
                    "value": "{{shopName}}",
                    "type": "text"
                  },
                  {
                    "key": "cacNumber",
                    "value": "{{cacNumber}}",
                    "type": "text"
                  },
                  {
                    "key": "documentType",
                    "value": "NIN",
                    "type": "text"
                  },
                  {
                    "key": "documentNumber",
                    "value": "77280892822",
                    "type": "text"
                  },
                  {
                    "key": "phoneNumber",
                    "value": "08109642088",
                    "type": "text"
                  },
                  {
                    "disabled": true,
                    "key": "idNumber",
                    "value": "56254709617",
                    "type": "text"
                  },
                  {
                    "key": "firstName",
                    "value": "Fidelis",
                    "type": "text"
                  },
                  {
                    "key": "lastName",
                    "value": "Ogbeni",
                    "type": "text"
                  },
                  {
                    "key": "accountType",
                    "value": "INDIVIDUAL",
                    "type": "text"
                  },
                  {
                    "key": "bankCode",
                    "value": "50211",
                    "type": "text"
                  },
                  {
                    "key": "bankName",
                    "value": "FirstBank",
                    "type": "text"
                  },
                  {
                    "key": "accountNumber",
                    "value": "3066415171",
                    "type": "text"
                  },
                  {
                    "key": "documentImage",
                    "type": "file",
                    "src": "postman-cloud:///1f00bb20-a0aa-4780-95e0-d485a8c42125"
                  }
                ]
              },
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{adminAuthToken}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ebb38ccc-2e64-4b9e-bd2b-55d1c0ed269c",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// // Function to generate a random Nigerian phone number\r",
                    "// function generatePhoneNumber() {\r",
                    "//     return \"081\" + Math.floor(10000000 + Math.random() * 90000000); // Generates 081xxxxxxx\r",
                    "// }\r",
                    "\r",
                    "// // Function to generate a random 11-digit NIN number\r",
                    "// function generateNIN() {\r",
                    "//     return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
                    "// }\r",
                    "\r",
                    "// // Function to generate a random shop name\r",
                    "// function generateShopName() {\r",
                    "//     const shopPrefixes = [\"Super\", \"Mega\", \"Classic\", \"Elite\", \"Premium\", \"Budget\"];\r",
                    "//     const shopSuffixes = [\"Mart\", \"Shop\", \"Store\", \"Bazaar\", \"Hub\", \"Outlet\"];\r",
                    "//     return (\r",
                    "//         shopPrefixes[Math.floor(Math.random() * shopPrefixes.length)] +\r",
                    "//         \" \" +\r",
                    "//         shopSuffixes[Math.floor(Math.random() * shopSuffixes.length)]\r",
                    "//     );\r",
                    "// }\r",
                    "\r",
                    "// // Function to generate a random Nigerian bank code\r",
                    "// function getRandomBank() {\r",
                    "//     const banks = [\r",
                    "//         { name: \"FirstBank\", code: \"50211\" },\r",
                    "//         { name: \"Access Bank\", code: \"044\" },\r",
                    "//         { name: \"Zenith Bank\", code: \"057\" },\r",
                    "//         { name: \"GTBank\", code: \"058\" },\r",
                    "//         { name: \"UBA\", code: \"033\" }\r",
                    "//     ];\r",
                    "//     return banks[Math.floor(Math.random() * banks.length)];\r",
                    "// }\r",
                    "\r",
                    "// // Generate random seller details\r",
                    "// let firstName = [\"John\", \"James\", \"Sarah\", \"Jane\", \"Michael\", \"Fidelis\"][Math.floor(Math.random() * 6)];\r",
                    "// let lastName = [\"Doe\", \"Smith\", \"Johnson\", \"Brown\", \"Ogbeni\", \"Adams\"][Math.floor(Math.random() * 6)];\r",
                    "// let managerFullName = firstName + \" \" + lastName;\r",
                    "// let shopName = generateShopName();\r",
                    "// let cacNumber = Math.floor(1000 + Math.random() * 9000).toString(); // 4-digit CAC Number\r",
                    "// let documentType = \"NIN\";\r",
                    "// let documentNumber = generateNIN();\r",
                    "// let phoneNumber = generatePhoneNumber();\r",
                    "// let accountType = \"INDIVIDUAL\";\r",
                    "// let bankDetails = getRandomBank();\r",
                    "// let accountNumber = Math.floor(1000000000 + Math.random() * 9000000000).toString();\r",
                    "// let documentImage = \"https://i.imgur.com/10V6mFc.jpeg\"; // Simulated file name\r",
                    "\r",
                    "// // Store variables in Postman environment\r",
                    "// pm.environment.set(\"managerFullName\", managerFullName);\r",
                    "// pm.environment.set(\"firstName\", firstName);\r",
                    "// pm.environment.set(\"lastName\", lastName);\r",
                    "// pm.environment.set(\"shopName\", shopName);\r",
                    "// pm.environment.set(\"cacNumber\", cacNumber);\r",
                    "// pm.environment.set(\"documentType\", documentType);\r",
                    "// pm.environment.set(\"documentNumber\", documentNumber);\r",
                    "// pm.environment.set(\"phoneNumber\", phoneNumber);\r",
                    "// pm.environment.set(\"accountType\", accountType);\r",
                    "// pm.environment.set(\"bankCode\", bankDetails.code);\r",
                    "// pm.environment.set(\"bankName\", bankDetails.name);\r",
                    "// pm.environment.set(\"accountNumber\", accountNumber);\r",
                    "// pm.environment.set(\"documentImage\", documentImage);\r",
                    "\r",
                    "// // Log generated values for debugging\r",
                    "// console.log(\"✅ Auto-Generated Seller Details:\");\r",
                    "// console.log({\r",
                    "//     managerFullName,\r",
                    "//     firstName,\r",
                    "//     lastName,\r",
                    "//     shopName,\r",
                    "//     cacNumber,\r",
                    "//     documentType,\r",
                    "//     documentNumber,\r",
                    "//     phoneNumber,\r",
                    "//     accountType,\r",
                    "//     bankCode: bankDetails.code,\r",
                    "//     bankName: bankDetails.name,\r",
                    "//     accountNumber,\r",
                    "//     documentImage\r",
                    "// });\r",
                    ""
                  ],
                  "_lastExecutionId": "b53e8786-454b-43da-954d-a48b0dc523cb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// ✅ Ensure response is in JSON format\r",
                    "pm.test(\"Response is in JSON format\", function () {\r",
                    "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                    "});\r",
                    "\r",
                    "// ✅ Parse response JSON\r",
                    "let jsonData = pm.response.json();\r",
                    "\r",
                    "// ✅ Validate response status code\r",
                    "pm.test(\"Status code is 201 (Created)\", function () {\r",
                    "    pm.response.to.have.status(201);\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate success flag\r",
                    "pm.test(\"Response contains success flag\", function () {\r",
                    "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate success message\r",
                    "pm.test(\"Response message is correct\", function () {\r",
                    "    pm.expect(jsonData).to.have.property(\"message\", \"Seller created successfully\");\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate response data structure\r",
                    "pm.test(\"Response contains seller details\", function () {\r",
                    "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                    "    pm.expect(jsonData.data).to.have.property(\"sellerId\").that.is.a(\"string\");\r",
                    "    pm.expect(jsonData.data).to.have.property(\"managerFullName\").that.is.a(\"string\");\r",
                    "    pm.expect(jsonData.data).to.have.property(\"shopName\").that.is.a(\"string\");\r",
                    "    pm.expect(jsonData.data).to.have.property(\"phoneNumber\").that.is.a(\"string\");\r",
                    "    pm.expect(jsonData.data).to.have.property(\"bankName\").that.is.a(\"string\");\r",
                    "    pm.expect(jsonData.data).to.have.property(\"accountNumber\").that.is.a(\"string\");\r",
                    "});\r",
                    "\r",
                    "// ✅ Store seller ID for future requests\r",
                    "// pm.environment.set(\"sellerId\", jsonData.data.sellerId);\r",
                    "// console.log(\"Seller ID stored:\", jsonData.data.sellerId);\r",
                    "\r",
                    "// ✅ Validate error response for invalid input\r",
                    "pm.test(\"Error response for invalid input\", function () {\r",
                    "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                    "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Invalid input\");\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate error response for missing required fields\r",
                    "pm.test(\"Error response for missing fields\", function () {\r",
                    "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                    "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Required fields are missing\");\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
                }
              }
            ]
          },
          {
            "id": "952e40e0-1f18-4aea-89a2-c66913ffb6a9",
            "name": "get seller",
            "request": {
              "url": {
                "path": [
                  "seller"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{authToken}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "3eb7f817-0a29-4b44-9136-eef0297a8bac",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// ✅ Ensure response is in JSON format\r",
                    "pm.test(\"Response is in JSON format\", function () {\r",
                    "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                    "});\r",
                    "\r",
                    "// ✅ Parse response JSON\r",
                    "let jsonData = pm.response.json();\r",
                    "\r",
                    "// ✅ Validate response status code\r",
                    "pm.test(\"Status code is 200\", function () {\r",
                    "    pm.response.to.have.status(200);\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate success flag\r",
                    "pm.test(\"Response contains success flag\", function () {\r",
                    "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate response message\r",
                    "pm.test(\"Response contains success message\", function () {\r",
                    "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"successfully\");\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate data structure\r",
                    "pm.test(\"Response contains valid seller details or No Seller added\", function () {\r",
                    "    pm.expect(jsonData.data).to.have.property(\"data\").that.is.an(\"object\");\r",
                    "\r",
                    "    let seller = jsonData.data;\r",
                    "    \r",
                    "    if(jsonData.data == null){\r",
                    "        pm.expect(jsonData.message).to.include(\"No Seller added\");\r",
                    "\r",
                    "    } else{\r",
                    "    pm.expect(seller).to.have.property(\"id\").that.is.a(\"string\");\r",
                    "    pm.expect(seller).to.have.property(\"name\").that.is.a(\"string\");\r",
                    "    pm.expect(seller).to.have.property(\"email\").that.is.a(\"string\").and.includes(\"@\");\r",
                    "    pm.expect(seller).to.have.property(\"phone\").that.is.a(\"string\");\r",
                    "    pm.expect(seller).to.have.property(\"storeName\").that.is.a(\"string\");\r",
                    "    pm.expect(seller).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate authorization requirement\r",
                    "pm.test(\"Request requires authorization\", function () {\r",
                    "    pm.response.to.not.have.status(401);\r",
                    "});\r",
                    "\r",
                    "// ✅ Store Seller ID for future use\r",
                    "if (jsonData.data && jsonData.data.id) {\r",
                    "    pm.environment.set(\"seller_id\", jsonData.data.id);\r",
                    "    console.log(\"Stored Seller ID:\", jsonData.data.id);\r",
                    "}\r",
                    ""
                  ],
                  "_lastExecutionId": "c6da4cec-21d4-44a6-8722-930ee4252133"
                }
              }
            ]
          },
          {
            "id": "6985ff3d-9862-4e99-83a1-16449fed7da1",
            "name": "delete seller",
            "request": {
              "url": {
                "path": [
                  "seller"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": []
          },
          {
            "id": "612899eb-aa78-41fa-b606-768894bf91a5",
            "name": "get seller preference",
            "request": {
              "url": {
                "path": [
                  "seller",
                  "preferences"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{token}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": []
          },
          {
            "id": "249f0bc1-7156-4aa8-a9bc-40fef11f7a5f",
            "name": "seller products",
            "request": {
              "url": {
                "path": [
                  "products",
                  "seller-products"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [
                  {
                    "key": "categoryId",
                    "value": "{{categoryId}}"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{authToken}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": []
          },
          {
            "id": "6c8fd3eb-820c-4857-9dfc-e45bcf672641",
            "name": "delete seller preference",
            "request": {
              "url": {
                "path": [
                  "seller",
                  "preferences"
                ],
                "host": [
                  "{{base_url}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "DELETE",
              "auth": {
                "type": "bearer",
                "bearer": [
                  {
                    "type": "string",
                    "value": "{{adminAuthToken}}",
                    "key": "token"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "c004475c-25b2-42df-82b4-d58ecd921eef",
                  "type": "text/javascript",
                  "packages": {},
                  "exec": [
                    "// ✅ Ensure response is in JSON format\r",
                    "pm.test(\"Response is in JSON format\", function () {\r",
                    "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                    "});\r",
                    "\r",
                    "// ✅ Parse response JSON\r",
                    "let jsonData = pm.response.json();\r",
                    "\r",
                    "// ✅ Validate response status code (200 for success, 404 if no preferences exist)\r",
                    "pm.test(\"Status code is 200 or 404\", function () {\r",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
                    "});\r",
                    "\r",
                    "// ✅ Check if seller preferences were deleted\r",
                    "pm.test(\"Validate seller preferences deletion response\", function () {\r",
                    "    if (jsonData.success === false) {\r",
                    "        pm.expect(jsonData).to.have.property(\"message\", \"No seller preferences found to delete.\");\r",
                    "        console.log(\"❌ No seller preferences found.\");\r",
                    "    } else {\r",
                    "        pm.expect(jsonData).to.have.property(\"message\", \"Seller preferences deleted successfully.\");\r",
                    "        console.log(\"✅ Seller preferences deleted successfully.\");\r",
                    "    }\r",
                    "});\r",
                    "\r",
                    "// ✅ Validate authorization requirement\r",
                    "pm.test(\"Request requires authorization\", function () {\r",
                    "    pm.response.to.not.have.status(401);\r",
                    "});\r",
                    ""
                  ],
                  "_lastExecutionId": "3c7953e4-2c9b-40a3-b740-a7f3553162b2"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "339eac49-12be-4bf9-86ce-1dcdbc35d603",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "f49ceb06-d32f-4366-86ad-be14c3ecc05c"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "a4c65cfd-1861-4cff-8c5d-f53809ebc31a",
          "type": "text/javascript",
          "exec": [
            ""
          ],
          "_lastExecutionId": "e54cf5fd-30b9-4177-817c-a6013db85a06"
        }
      }
    ],
    "variable": [
      {
        "type": "any",
        "value": "1",
        "key": "id"
      },
      {
        "type": "any",
        "value": "https://be-dev.dandysapp.com",
        "key": "base_url"
      },
      {
        "disabled": true,
        "type": "any",
        "value": "\nhttps://be-api.dandysapp.com",
        "key": "live_url"
      },
      {
        "type": "any",
        "value": "",
        "key": "token"
      }
    ],
    "info": {
      "_postman_id": "06d6db21-cf2e-4733-a148-ea257acbcfc2",
      "name": "Dandys Ecommerce",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-03-28T06:59:53.486Z",
      "postman_exported_using": "Postman/11.38.4"
    },
    "id": "4cb9f60a-2508-446b-9ce9-aff325363d09",
    "name": "dandy_env",
    "values": [
      {
        "type": "any",
        "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4OCwiZXhwIjoxNzQ3MjM1ODg4fQ.lTGBsJiRrEUug-649QR0ctIj4RcCTBMHmhzYr5fnzyE",
        "key": "authToken"
      },
      {
        "type": "any",
        "value": "{\"email\":\"testog@e-record.com\",\"password\":\"Pass@12345\"}",
        "key": "currentPayload"
      },
      {
        "type": "any",
        "value": "test_241@example.com",
        "key": "reg.email"
      },
      {
        "type": "any",
        "value": "",
        "key": "otpCode"
      },
      {
        "type": "any",
        "value": "887624",
        "key": "valid.otpCode"
      },
      {
        "type": "any",
        "value": "Pass$12345",
        "key": "reg.pass"
      },
      {
        "type": "any",
        "value": "Pass$00001",
        "key": "new.pass"
      },
      {
        "type": "any",
        "value": "Pass5078",
        "key": "newPassword"
      },
      {
        "type": "any",
        "value": "",
        "key": "newPass"
      },
      {
        "type": "any",
        "value": "",
        "key": "mailtm_id"
      },
      {
        "type": "any",
        "value": "",
        "key": "email"
      },
      {
        "type": "any",
        "value": "testog@e-record.com",
        "key": "test.email"
      },
      {
        "type": "any",
        "value": "testog",
        "key": "email_password"
      },
      {
        "type": "any",
        "value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJpYXQiOjE3NDcwNjMwODUsInJvbGVzIjpbIlJPTEVfVVNFUiJdLCJhZGRyZXNzIjoidGVzdG9nQGUtcmVjb3JkLmNvbSIsImlkIjoiNjdhYTA1MWEyNDMzZmU3ZjY1MGNmZTJjIiwibWVyY3VyZSI6eyJzdWJzY3JpYmUiOlsiL2FjY291bnRzLzY3YWEwNTFhMjQzM2ZlN2Y2NTBjZmUyYyJdfX0.Y4M0m-xC2qyq-T9BrVbfImGvOBITKXXx6DhaxdckiaSjiGfZEWJCzsvDKtru5eSvs259vduLjDiGRuRKijqYpA",
        "key": "mailTmToken"
      },
      {
        "type": "any",
        "value": "848350",
        "key": "retrievedOTP"
      },
      {
        "type": "any",
        "value": "",
        "key": "bankCode"
      },
      {
        "type": "any",
        "value": "",
        "key": "bankName"
      },
      {
        "type": "any",
        "value": "",
        "key": "accountNumber"
      },
      {
        "type": "any",
        "value": "",
        "key": "accountName"
      },
      {
        "type": "any",
        "value": "df1bd82f-9b3d-4444-b8aa-926aac4f9ace",
        "key": "userId"
      },
      {
        "type": "any",
        "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
        "key": "adminAuthToken"
      },
      {
        "type": "any",
        "value": "testog@e-record.com",
        "key": "admin.email"
      },
      {
        "type": "any",
        "value": "Pass$12345",
        "key": "admin.password"
      },
      {
        "type": "any",
        "value": "",
        "key": "ADMcurrentPayload"
      },
      {
        "type": "any",
        "value": "ec73234f-5419-4953-855b-2c4c21307b67",
        "key": "UserId"
      },
      {
        "type": "any",
        "value": "50aa5b79-e130-48f3-bd96-9d1285a6558e",
        "key": "productId"
      },
      {
        "type": "any",
        "value": "[\"50aa5b79-e130-48f3-bd96-9d1285a6558e\",\"47370a08-ac05-47a0-869f-32feb25f9acb\",\"36a7a22b-4e53-4204-aff0-cb975220a1bf\",\"362c5422-72b7-42d7-959c-79a90de26734\",\"317ff2ec-0379-479f-b187-4e2a68cbf0bf\",\"219c2f4c-1e52-4467-901b-1976fc8e7fcf\",\"166ab255-435a-44b9-b6e2-7a2d51f02058\",\"146c0efa-bd05-4c0c-915c-f565c90c318e\"]",
        "key": "product_ids"
      },
      {
        "type": "any",
        "value": "50aa5b79-e130-48f3-bd96-9d1285a6558e",
        "key": "firstProductId"
      },
      {
        "type": "any",
        "value": "47370a08-ac05-47a0-869f-32feb25f9acb",
        "key": "randomProductId"
      },
      {
        "type": "any",
        "value": "[\"Adidas\",\"Coca-cola\",\"Nestlé\",\"L'oréal\",\"Sony\"]",
        "key": "brand_names"
      },
      {
        "type": "any",
        "value": "",
        "key": "managerFullName"
      },
      {
        "type": "any",
        "value": "",
        "key": "firstName"
      },
      {
        "type": "any",
        "value": "",
        "key": "lastName"
      },
      {
        "type": "any",
        "value": "",
        "key": "shopName"
      },
      {
        "type": "any",
        "value": "",
        "key": "cacNumber"
      },
      {
        "type": "any",
        "value": "",
        "key": "documentType"
      },
      {
        "type": "any",
        "value": "",
        "key": "documentNumber"
      },
      {
        "type": "any",
        "value": "",
        "key": "phoneNumber"
      },
      {
        "type": "any",
        "value": "",
        "key": "accountType"
      },
      {
        "type": "any",
        "value": "",
        "key": "documentImage"
      },
      {
        "type": "any",
        "value": "",
        "key": "categoryIds"
      },
      {
        "type": "any",
        "value": "5e482f39-1286-4495-9ee2-3dab38488cc3",
        "key": "categoryId4p"
      },
      {
        "type": "any",
        "value": "Pass7813",
        "key": "changePassword"
      },
      {
        "type": "any",
        "value": "Nike Air Max 270 2252",
        "key": "productTitle"
      },
      {
        "type": "any",
        "value": "Lightweight sneakers with superior cushioning and style.",
        "key": "productDescription"
      },
      {
        "type": "any",
        "value": "Colgate",
        "key": "brandName"
      },
      {
        "type": "any",
        "value": "M5767",
        "key": "model"
      },
      {
        "type": "any",
        "value": "2027-12-29T00:00:00.000Z",
        "key": "expiryDate"
      },
      {
        "type": "any",
        "value": "2023-10-21T00:00:00.000Z",
        "key": "manufactureDate"
      },
      {
        "type": "any",
        "value": 58,
        "key": "quantity"
      },
      {
        "type": "any",
        "value": "514",
        "key": "sellingPrice"
      },
      {
        "type": "any",
        "value": "473",
        "key": "costPrice"
      },
      {
        "type": "any",
        "value": "PU8Z308D",
        "key": "sku"
      },
      {
        "type": "any",
        "value": "3899",
        "key": "eanNumber"
      },
      {
        "type": "any",
        "value": "Fragrance",
        "key": "categoryName"
      },
      {
        "type": "any",
        "value": "testog@e-record.com",
        "key": "sellerEmail"
      },
      {
        "type": "any",
        "value": "Test Ojay",
        "key": "sellerFullName"
      },
      {
        "type": "any",
        "value": "",
        "key": "productFormData"
      },
      {
        "type": "any",
        "value": "5e482f39-1286-4495-9ee2-3dab38488cc3",
        "key": "categoryId"
      }
    ]
  },
  "globals": {
    "id": "bd452d05-b8dd-4f5d-98df-d6f85b0df918",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 40,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 136,
        "pending": 0,
        "failed": 3
      },
      "prerequests": {
        "total": 40,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 43,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 40,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 185,
        "pending": 0,
        "failed": 22
      },
      "testScripts": {
        "total": 74,
        "pending": 0,
        "failed": 1
      },
      "prerequestScripts": {
        "total": 62,
        "pending": 0,
        "failed": 2
      }
    },
    "timings": {
      "responseAverage": 122.32558139534886,
      "responseMin": 38,
      "responseMax": 691,
      "responseSd": 101.92672263667012,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1747063083347,
      "completed": 1747063089917
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 40,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3293d124-07dd-4e40-a336-c88ff8947151",
          "httpRequestId": "407a4ac4-de6b-4f5c-a454-2ffbc88b5b41"
        },
        "item": {
          "id": "d8f9f590-8ef5-4d16-b2cc-6aa656df3de9",
          "name": "Sign Up",
          "request": {
            "url": {
              "path": [
                "auth",
                "signup",
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{{currentPayload}}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d4f039f0-77ab-4be6-be17-640298317f49",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                  "\r",
                  "const expectedStatus = {\r",
                  "    \"valid_signup\": 200 || 201,\r",
                  "    \"missing_email\": 400,\r",
                  "    \"missing_password\": 400,\r",
                  "    \"invalid_email_format\": 400,\r",
                  "    \"weak_password\": 400,\r",
                  "    \"existing_email\": 409\r",
                  "};\r",
                  "\r",
                  "// ✅ Test Case 1: Validate Status Code\r",
                  "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                  "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                  "});\r",
                  "\r",
                  "// Handle successful signup response\r",
                  "if (pm.response.code === 200 || 201) {\r",
                  "    // ✅ Test Case 2: Verify Success Field\r",
                  "    pm.test(\"Verify that the success field is true\", function () {\r",
                  "        pm.expect(response.success).to.eql(true);\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Test Case 3: Check Message Field Value\r",
                  "    pm.test(\"Check that the message field is 'User registered successfully'\", function () {\r",
                  "        pm.expect(response.message).to.includes(\"User sign up successful\");\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Test Case 4: Validate User Data Fields\r",
                  "    pm.test(\"Validate that the user data fields are present\", function () {\r",
                  "        let user = response.data.user;\r",
                  "\r",
                  "        pm.expect(user).to.have.property(\"email\");\r",
                  "        pm.expect(user).to.have.property(\"fullName\");\r",
                  "        pm.expect(user).to.have.property(\"firstName\");\r",
                  "        pm.expect(user).to.have.property(\"lastName\");\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Test Case 5: Validate Email Matches Request\r",
                  "    pm.test(\"Validate that the email in response matches the request\", function () {\r",
                  "        let requestData = JSON.parse(pm.request.body.raw);\r",
                  "        pm.expect(response.data.user.email).to.eql(requestData.email);\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Test Case 6: Validate Response Time\r",
                  "    pm.test(\"Validate that the response time is less than 1000ms\", function () {\r",
                  "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "    });\r",
                  "\r",
                  "} \r",
                  "// Handle error cases\r",
                  "else {\r",
                  "    pm.test(\"Response contains an error message\", function () {\r",
                  "        pm.expect(response).to.have.property(\"error\");\r",
                  "        pm.expect(response.error).to.be.a(\"string\");\r",
                  "    });\r",
                  "}\r",
                  "\r",
                  "// ✅ Store email for Future Requests\r",
                  "pm.environment.set(\"reg.email\", response.data.user.email);"
                ],
                "_lastExecutionId": "b4f62ae2-4c54-404b-8a87-78c1d79292d9"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "59a31cda-0ddb-4848-be21-60cba4c17a78",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "function getRandomNames() {\r",
                  "    const names = [\r",
                  "        \"James\", \"Mary\", \"John\", \"Patricia\", \"Robert\", \"Jennifer\", \"Ben\", \r",
                  "        \"Michael\", \"Linda\", \"William\", \"Elizabeth\", \"David\", \"Johnson\", \r",
                  "        \"Richard\", \"Fydel\", \"Joseph\", \"Jessica\", \"Thomas\", \"Sarah\", \"Ojay\", \"Rodri\",\r",
                  "        \"Charles\", \"Karen\", \"Christopher\", \"Lisa\", \"Daniel\", \"Nancy\", \"Walter\",\r",
                  "        \"Friedrich\", \"Betty\", \"Anthony\", \"Margaret\", \"Mark\", \"Sandra\", \"James\"\r",
                  "    ];\r",
                  "\r",
                  "    // Ensure firstName and lastName are different\r",
                  "    let firstName = names[Math.floor(Math.random() * names.length)];\r",
                  "    let lastName = names[Math.floor(Math.random() * names.length)];\r",
                  "\r",
                  "    // If firstName and lastName are the same, keep generating a new lastName until they are different\r",
                  "    while (firstName === lastName) {\r",
                  "        lastName = names[Math.floor(Math.random() * names.length)];\r",
                  "    }\r",
                  "\r",
                  "    return { firstName, lastName };\r",
                  "}\r",
                  "\r",
                  "// Generate random first and last names\r",
                  "const { firstName: randomFirstName, lastName: randomLastName } = getRandomNames();\r",
                  "\r",
                  "// Function to generate a random email\r",
                  "function generateRandomEmail() {\r",
                  "    return `test_${Math.floor(Math.random() * 1000)}@example.com`;\r",
                  "}\r",
                  "\r",
                  "\r",
                  "// Define test cases\r",
                  "const testCases = {\r",
                  "    \"valid_signup\": { \r",
                  "        \"firstName\": randomFirstName, \r",
                  "        \"lastName\": randomLastName, \r",
                  "        \"email\": generateRandomEmail(), \r",
                  "        \"accountType\": \"SELLER\", \r",
                  "        \"password\": \"Pass$12345\"\r",
                  "    },\r",
                  "    \"missing_email\": { \r",
                  "        \"firstName\": randomFirstName, \r",
                  "        \"lastName\": randomLastName, \r",
                  "        \"email\": \"\", \r",
                  "        \"accountType\": \"SELLER\", \r",
                  "        \"password\": \"Pass$12345\" \r",
                  "    },\r",
                  "    \"missing_password\": { \r",
                  "        \"firstName\": randomFirstName, \r",
                  "        \"lastName\": randomLastName, \r",
                  "        \"email\": generateRandomEmail(), \r",
                  "        \"accountType\": \"SELLER\", \r",
                  "        \"password\": \"\" \r",
                  "    },\r",
                  "    \"invalid_email_format\": { \r",
                  "        \"firstName\": randomFirstName, \r",
                  "        \"lastName\": randomLastName, \r",
                  "        \"email\": \"invalid-email\", \r",
                  "        \"accountType\": \"SELLER\", \r",
                  "        \"password\": \"Pass$12345\" \r",
                  "    },\r",
                  "    \"weak_password\": { \r",
                  "        \"firstName\": randomFirstName, \r",
                  "        \"lastName\": randomLastName, \r",
                  "        \"email\": generateRandomEmail(), \r",
                  "        \"accountType\": \"SELLER\", \r",
                  "        \"password\": \"123\" \r",
                  "    },\r",
                  "    \"existing_email\": { \r",
                  "        \"firstName\": randomFirstName, \r",
                  "        \"lastName\": randomLastName, \r",
                  "        \"email\": \"existing@mail.com\", \r",
                  "        \"accountType\": \"SELLER\", \r",
                  "        \"password\": \"Pass$12345\" \r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "// Get the current test case (default: valid_signup)\r",
                  "let testCase = pm.environment.get(\"testCase\") || \"valid_signup\";\r",
                  "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                  "\r",
                  "// Set request headers for tracking\r",
                  "pm.request.headers.add({ key: \"Test-Case\", value: testCase });"
                ],
                "_lastExecutionId": "26ab5470-ea2c-4a43-899a-c348e6393456"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "auth",
              "signup",
              ""
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Test-Case",
              "value": "valid_signup"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fdc514dd-15da-4399-bd1e-5b8257293a7c",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "121",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"firstName\":\"Johnson\",\"lastName\":\"John\",\"email\":\"test_241@example.com\",\"accountType\":\"SELLER\",\"password\":\"Pass$12345\"}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "eea562f8-a433-4ff4-889f-7f2ac058436d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:04 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "404"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              32,
              115,
              105,
              103,
              110,
              32,
              117,
              112,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              101,
              121,
              74,
              104,
              98,
              71,
              99,
              105,
              79,
              105,
              74,
              73,
              85,
              122,
              73,
              49,
              78,
              105,
              73,
              115,
              73,
              110,
              82,
              53,
              99,
              67,
              73,
              54,
              73,
              107,
              112,
              88,
              86,
              67,
              74,
              57,
              46,
              101,
              121,
              74,
              112,
              90,
              67,
              73,
              54,
              73,
              109,
              69,
              49,
              79,
              84,
              86,
              104,
              90,
              84,
              90,
              106,
              76,
              87,
              70,
              105,
              78,
              68,
              89,
              116,
              78,
              71,
              73,
              52,
              89,
              83,
              48,
              52,
              78,
              71,
              69,
              49,
              76,
              87,
              90,
              109,
              78,
              84,
              66,
              109,
              77,
              50,
              90,
              108,
              78,
              87,
              77,
              121,
              89,
              105,
              73,
              115,
              73,
              109,
              108,
              104,
              100,
              67,
              73,
              54,
              77,
              84,
              99,
              48,
              78,
              122,
              65,
              50,
              77,
              122,
              65,
              52,
              78,
              67,
              119,
              105,
              90,
              88,
              104,
              119,
              73,
              106,
              111,
              120,
              78,
              122,
              81,
              51,
              77,
              106,
              77,
              49,
              79,
              68,
              103,
              48,
              102,
              81,
              46,
              97,
              66,
              122,
              78,
              82,
              84,
              116,
              45,
              50,
              50,
              89,
              82,
              66,
              89,
              54,
              106,
              107,
              76,
              102,
              103,
              89,
              121,
              84,
              112,
              51,
              97,
              77,
              121,
              109,
              76,
              103,
              89,
              86,
              87,
              87,
              72,
              112,
              113,
              118,
              107,
              108,
              87,
              48,
              34,
              44,
              34,
              101,
              120,
              112,
              105,
              114,
              101,
              115,
              73,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              49,
              51,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              48,
              52,
              46,
              48,
              50,
              54,
              90,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              34,
              58,
              123,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              50,
              52,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              115,
              111,
              110,
              32,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              115,
              111,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 691,
          "responseSize": 404
        },
        "id": "d8f9f590-8ef5-4d16-b2cc-6aa656df3de9",
        "assertions": [
          {
            "assertion": "[valid_signup] Status should be 200",
            "skipped": false
          },
          {
            "assertion": "Verify that the success field is true",
            "skipped": false
          },
          {
            "assertion": "Check that the message field is 'User registered successfully'",
            "skipped": false
          },
          {
            "assertion": "Validate that the user data fields are present",
            "skipped": false
          },
          {
            "assertion": "Validate that the email in response matches the request",
            "skipped": false
          },
          {
            "assertion": "Validate that the response time is less than 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "453b552d-9d60-4c81-89f6-5c92cc532f37",
          "length": 40,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9ef55e0f-a40d-4faf-adac-c45fb973e11d"
        },
        "item": {
          "id": "35d2eee9-d0d0-4f72-b3a1-c8813ba5ec55",
          "name": "Sign In",
          "request": {
            "url": {
              "path": [
                "auth",
                "signin",
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{{currentPayload}}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "55e46cb1-55da-47b8-bc30-7e5b003a4891",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const reg_pass = \"Pass$12345\";\r",
                  "pm.environment.set(\"reg.pass\", reg_pass)\r",
                  "\r",
                  "const testCases = {\r",
                  "    \"valid_login\": { \r",
                  "        \"email\":  pm.environment.get(\"reg.email\"), \r",
                  "        \"password\": reg_pass\r",
                  "    },\r",
                  "    \"missing_email\": { \r",
                  "        \"email\": \"\", \r",
                  "        \"password\": \"Pass$50000\" \r",
                  "    },\r",
                  "    \"missing_password\": { \r",
                  "        \"email\": \"existing@mail.com\", \r",
                  "        \"password\": \"\" \r",
                  "    },\r",
                  "    \"invalid_email_format\": { \r",
                  "        \"email\": \"invalid-email\", \r",
                  "        \"password\": \"Pass$50000\" \r",
                  "    },\r",
                  "    \"incorrect_password\": { \r",
                  "        \"email\": \"existing@mail.com\", \r",
                  "        \"password\": \"WrongPass123\" \r",
                  "    },\r",
                  "    \"unregistered_email\": { \r",
                  "        \"email\": \"unregistered@mail.com\", \r",
                  "        \"password\": \"Pass$50000\" \r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "// Get the current test case (default: valid_login)\r",
                  "let testCase = pm.environment.get(\"testCase\") || \"valid_login\";\r",
                  "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                  "\r",
                  "// Set request headers for tracking\r",
                  "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "1393dfc4-17cf-4e1c-be03-c53323b75368"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3ff003c4-300f-445a-aced-aa59ac67ca18",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                  "\r",
                  "const expectedStatus = {\r",
                  "    \"valid_login\": 200,\r",
                  "    \"missing_email\": 400,\r",
                  "    \"missing_password\": 400,\r",
                  "    \"invalid_email_format\": 400,\r",
                  "    \"incorrect_password\": 401,\r",
                  "    \"unregistered_email\": 404\r",
                  "};\r",
                  "\r",
                  "// ✅ Test Case 1: Validate Status Code\r",
                  "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                  "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                  "});\r",
                  "\r",
                  "// Handle successful login response\r",
                  "if (pm.response.code === 200) {\r",
                  "    // ✅ Test Case 2: Verify Success Field Value\r",
                  "    pm.test(\"Verify that the success field is true\", function () {\r",
                  "        pm.expect(response.success).to.eql(true);\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Test Case 3: Check Message Field Value\r",
                  "    pm.test(\"Check that the message field is 'User sign in successful'\", function () {\r",
                  "        pm.expect(response.message).to.eql(\"User sign in successful\");\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Test Case 4: Validate Token Field\r",
                  "    pm.test(\"Validate that the token field is present and not empty\", function () {\r",
                  "        pm.expect(response.data.token).to.be.a('string');\r",
                  "        pm.expect(response.data.token.length).to.be.greaterThan(0);\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Test Case 5: Verify Expiration Timestamp Format\r",
                  "    pm.test(\"Verify that the expiration timestamp is in ISO 8601 format\", function () {\r",
                  "        let expiresIn = response.data.expiresIn;\r",
                  "        pm.expect(new Date(expiresIn).toISOString()).to.eql(expiresIn);\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Test Case 6: Validate User Data Fields\r",
                  "    pm.test(\"Validate that the user data fields are correct\", function () {\r",
                  "        let user = response.data.user;\r",
                  "        \r",
                  "        pm.expect(user.id).to.not.eql(null);\r",
                  "        pm.expect(user.email).to.not.eql(null);\r",
                  "        pm.expect(user.fullName).to.not.eql(null);\r",
                  "        pm.expect(user.firstName).to.not.eql(null);\r",
                  "        pm.expect(user.lastName).to.not.eql(null);\r",
                  "    });\r",
                  "\r",
                  "    pm.environment.set(\"userId\", response.data.user.id)\r",
                  "\r",
                  "    // ✅ Test Case 7: Verify KYC Status\r",
                  "    pm.test(\"Verify that the KYC status is false\", function () {\r",
                  "        pm.expect(response.data.user.kycCompleted).to.eql(false);\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Test Case 8: Validate Avatar Field\r",
                  "    pm.test(\"Validate that the avatar field is empty\", function () {\r",
                  "        pm.expect(response.data.user.avatar).to.eql(\"\");\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Test Case 9: Check Token Format (JWT)\r",
                  "    pm.test(\"Check that the token is in a valid JWT format\", function () {\r",
                  "        let token = response.data.token;\r",
                  "        let tokenParts = token.split('.');\r",
                  "\r",
                  "        pm.expect(tokenParts).to.have.lengthOf(3);\r",
                  "        pm.expect(tokenParts[0]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                  "        pm.expect(tokenParts[1]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                  "        pm.expect(tokenParts[2]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Test Case 10: Validate Response Time\r",
                  "    pm.test(\"Validate that the response time is less than 1000ms\", function () {\r",
                  "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Store Auth Token for Future Requests\r",
                  "    pm.environment.set(\"authToken\", response.data.token);\r",
                  "} \r",
                  "// Handle error cases\r",
                  "else {\r",
                  "    pm.test(\"Response contains error message\", function () {\r",
                  "        pm.expect(response).to.have.property(\"error\");\r",
                  "        pm.expect(response.error).to.be.a(\"string\");\r",
                  "    });\r",
                  "}\r",
                  ""
                ],
                "_lastExecutionId": "9140a521-0940-4f9d-bceb-a924a29df1a9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "auth",
              "signin",
              ""
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Test-Case",
              "value": "valid_login"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "af088d2c-3890-4096-86e8-d8aac9675bd8",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "58",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"email\":\"test_241@example.com\",\"password\":\"Pass$12345\"}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "511c2b88-3fc0-4f92-bfb4-404e24cfa2a2",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:04 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "481"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              32,
              115,
              105,
              103,
              110,
              32,
              105,
              110,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              101,
              121,
              74,
              104,
              98,
              71,
              99,
              105,
              79,
              105,
              74,
              73,
              85,
              122,
              73,
              49,
              78,
              105,
              73,
              115,
              73,
              110,
              82,
              53,
              99,
              67,
              73,
              54,
              73,
              107,
              112,
              88,
              86,
              67,
              74,
              57,
              46,
              101,
              121,
              74,
              112,
              90,
              67,
              73,
              54,
              73,
              109,
              69,
              49,
              79,
              84,
              86,
              104,
              90,
              84,
              90,
              106,
              76,
              87,
              70,
              105,
              78,
              68,
              89,
              116,
              78,
              71,
              73,
              52,
              89,
              83,
              48,
              52,
              78,
              71,
              69,
              49,
              76,
              87,
              90,
              109,
              78,
              84,
              66,
              109,
              77,
              50,
              90,
              108,
              78,
              87,
              77,
              121,
              89,
              105,
              73,
              115,
              73,
              109,
              108,
              104,
              100,
              67,
              73,
              54,
              77,
              84,
              99,
              48,
              78,
              122,
              65,
              50,
              77,
              122,
              65,
              52,
              78,
              67,
              119,
              105,
              90,
              88,
              104,
              119,
              73,
              106,
              111,
              120,
              78,
              122,
              81,
              51,
              77,
              106,
              77,
              49,
              79,
              68,
              103,
              48,
              102,
              81,
              46,
              97,
              66,
              122,
              78,
              82,
              84,
              116,
              45,
              50,
              50,
              89,
              82,
              66,
              89,
              54,
              106,
              107,
              76,
              102,
              103,
              89,
              121,
              84,
              112,
              51,
              97,
              77,
              121,
              109,
              76,
              103,
              89,
              86,
              87,
              87,
              72,
              112,
              113,
              118,
              107,
              108,
              87,
              48,
              34,
              44,
              34,
              101,
              120,
              112,
              105,
              114,
              101,
              115,
              73,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              49,
              51,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              48,
              52,
              46,
              50,
              48,
              57,
              90,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              97,
              53,
              57,
              53,
              97,
              101,
              54,
              99,
              45,
              97,
              98,
              52,
              54,
              45,
              52,
              98,
              56,
              97,
              45,
              56,
              52,
              97,
              53,
              45,
              102,
              102,
              53,
              48,
              102,
              51,
              102,
              101,
              53,
              99,
              50,
              98,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              50,
              52,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              115,
              111,
              110,
              32,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              115,
              111,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 99,
          "responseSize": 481
        },
        "id": "35d2eee9-d0d0-4f72-b3a1-c8813ba5ec55",
        "assertions": [
          {
            "assertion": "[valid_login] Status should be 200",
            "skipped": false
          },
          {
            "assertion": "Verify that the success field is true",
            "skipped": false
          },
          {
            "assertion": "Check that the message field is 'User sign in successful'",
            "skipped": false
          },
          {
            "assertion": "Validate that the token field is present and not empty",
            "skipped": false
          },
          {
            "assertion": "Verify that the expiration timestamp is in ISO 8601 format",
            "skipped": false
          },
          {
            "assertion": "Validate that the user data fields are correct",
            "skipped": false
          },
          {
            "assertion": "Verify that the KYC status is false",
            "skipped": false
          },
          {
            "assertion": "Validate that the avatar field is empty",
            "skipped": false
          },
          {
            "assertion": "Check that the token is in a valid JWT format",
            "skipped": false
          },
          {
            "assertion": "Validate that the response time is less than 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ed3571ca-d230-4927-97fd-ebbb5cb863a5",
          "length": 40,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "7f2e0378-d8b5-48fc-a385-3816236804d0"
        },
        "item": {
          "id": "0af48e85-28af-4890-b21c-a589012da367",
          "name": "Request reset password",
          "request": {
            "url": {
              "path": [
                "auth",
                "password",
                "reset"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{{currentPayload}}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "66b9690c-e3c2-4bca-a4ae-0fe02dbd0505",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                  "\r",
                  "const expectedStatus = {\r",
                  "    \"valid_request\": 200,\r",
                  "    \"missing_email\": 400,\r",
                  "    \"invalid_email_format\": 400,\r",
                  "    \"unregistered_email\": 404\r",
                  "};\r",
                  "\r",
                  "// ✅ Test Case 1: Validate Status Code\r",
                  "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                  "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                  "});\r",
                  "\r",
                  "// Handle success case\r",
                  "if (pm.response.code === 200) {\r",
                  "    // ✅ Test Case 2: Verify Success Field\r",
                  "    pm.test(\"Verify that the success field is true\", function () {\r",
                  "        pm.expect(response.success).to.eql(true);\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Test Case 3: Check Message Field Value\r",
                  "    pm.test(\"Check that the message field is 'Password reset OTP sent successfully'\", function () {\r",
                  "        pm.expect(response.message).to.eql(\"Password reset OTP sent successfully\");\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Test Case 4: Validate OTP Code Field\r",
                  "    pm.test(\"Validate that the OTP code is present and is a 6-digit string\", function () {\r",
                  "        pm.expect(response.data).to.have.property(\"otpCode\");\r",
                  "        pm.expect(response.data.otpCode).to.match(/^\\d{6}$/);\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Test Case 5: Validate Response Time\r",
                  "    pm.test(\"Validate that the response time is less than 1000ms\", function () {\r",
                  "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "    });\r",
                  "\r",
                  "} \r",
                  "// Handle error cases\r",
                  "else {\r",
                  "    pm.test(\"Response contains an error message\", function () {\r",
                  "        pm.expect(response).to.have.property(\"error\");\r",
                  "        pm.expect(response.error).to.be.a(\"string\");\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Specific Error Messages Per Test Case\r",
                  "    if (testCase === \"missing_email\") {\r",
                  "        pm.test(\"Error message should mention missing email\", function () {\r",
                  "            pm.expect(response.error).to.match(/missing.*email/i);\r",
                  "        });\r",
                  "    } \r",
                  "    else if (testCase === \"invalid_email_format\") {\r",
                  "        pm.test(\"Error message should indicate invalid email format\", function () {\r",
                  "            pm.expect(response.error).to.match(/invalid.*email/i);\r",
                  "        });\r",
                  "    } \r",
                  "    else if (testCase === \"unregistered_email\") {\r",
                  "        pm.test(\"Error message should indicate unregistered email\", function () {\r",
                  "            pm.expect(response.error).to.match(/not found|unregistered/i);\r",
                  "        });\r",
                  "    }\r",
                  "}\r",
                  "\r",
                  "pm.environment.set(\"valid.otpCode\", response.data.otpCode)"
                ],
                "_lastExecutionId": "69ce6c8c-575e-4b12-8e5d-5fc5d9ca9cfc"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "9484ff8b-e2d9-484c-a168-d5e1bcc6dc61",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = {\r",
                  "    \"valid_request\": { \r",
                  "        \"email\": pm.environment.get(\"reg.email\")\r",
                  "    },\r",
                  "    \"missing_email\": { \r",
                  "        \"email\": \"\"\r",
                  "    },\r",
                  "    \"invalid_email_format\": { \r",
                  "        \"email\": \"invalid-email\"\r",
                  "    },\r",
                  "    \"unregistered_email\": { \r",
                  "        \"email\": \"unregistered@mail.com\"\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "// Get the current test case (default: valid_request)\r",
                  "let testCase = pm.environment.get(\"testCase\") || \"valid_request\";\r",
                  "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                  "\r",
                  "// Set request headers for tracking\r",
                  "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                  ""
                ],
                "_lastExecutionId": "f2489351-b72d-469a-883a-507921b322a5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "auth",
              "password",
              "reset"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Test-Case",
              "value": "valid_request"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "81851d8a-4073-4503-befd-4557fe65fb98",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "33",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"email\":\"test_241@example.com\"}\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "eeaa6905-5d8e-42cb-98cc-b4e46187844b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:04 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "93"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              114,
              101,
              115,
              101,
              116,
              32,
              79,
              84,
              80,
              32,
              115,
              101,
              110,
              116,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              111,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              34,
              56,
              56,
              55,
              54,
              50,
              52,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 235,
          "responseSize": 93
        },
        "id": "0af48e85-28af-4890-b21c-a589012da367",
        "assertions": [
          {
            "assertion": "[valid_request] Status should be 200",
            "skipped": false
          },
          {
            "assertion": "Verify that the success field is true",
            "skipped": false
          },
          {
            "assertion": "Check that the message field is 'Password reset OTP sent successfully'",
            "skipped": false
          },
          {
            "assertion": "Validate that the OTP code is present and is a 6-digit string",
            "skipped": false
          },
          {
            "assertion": "Validate that the response time is less than 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7d3066fb-260e-4188-bb3b-35db31689dff",
          "length": 40,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "495e39df-f905-4eea-9a22-5833c927413f"
        },
        "item": {
          "id": "0cfb3ae3-a106-41d2-9f35-3839d9da9a60",
          "name": "Reset password",
          "request": {
            "url": {
              "path": [
                "auth",
                "password",
                "reset"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{{currentPayload}}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3640d26f-70b3-4b79-8b83-3a7b8a74fbfa",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse JSON response\r",
                  "let response = pm.response.json();\r",
                  "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                  "\r",
                  "// Expected status codes for each test case\r",
                  "const expectedStatus = {\r",
                  "    \"valid_request\": 200,\r",
                  "    \"missing_email\": 400,\r",
                  "    \"invalid_email_format\": 400,\r",
                  "    \"unregistered_email\": 404,\r",
                  "    \"missing_otp\": 400,\r",
                  "    \"missing_password\": 400,\r",
                  "    \"invalid_otp_format\": 400,\r",
                  "    \"expired_otp\": 403,\r",
                  "    \"same_old_new_password\": 400,\r",
                  "    \"used_otp\": 403\r",
                  "};\r",
                  "\r",
                  "// ✅ Validate Status Code\r",
                  "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                  "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                  "});\r",
                  "\r",
                  "// ✅ Success Case: Valid Request\r",
                  "pm.test(\"[valid_request] Should return success response\", function () {\r",
                  "    if (testCase === \"valid_request\") {\r",
                  "        pm.expect(response.success).to.eql(true);\r",
                  "        pm.expect(response.message).to.eql(\"Password reset successfully\");\r",
                  "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// ✅ Error Cases: Missing or Invalid Input\r",
                  "pm.test(\"[missing_email] Should return an error for missing email\", function () {\r",
                  "    if (testCase === \"missing_email\") {\r",
                  "        pm.expect(response.error).to.match(/missing.*email/i);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "pm.test(\"[invalid_email_format] Should return an error for invalid email format\", function () {\r",
                  "    if (testCase === \"invalid_email_format\") {\r",
                  "        pm.expect(response.error).to.match(/invalid.*email/i);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "pm.test(\"[unregistered_email] Should return an error for unregistered email\", function () {\r",
                  "    if (testCase === \"unregistered_email\") {\r",
                  "        pm.expect(response.error).to.match(/not found|unregistered/i);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "pm.test(\"[missing_otp] Should return an error for missing OTP\", function () {\r",
                  "    if (testCase === \"missing_otp\") {\r",
                  "        pm.expect(response.error).to.match(/missing.*otp/i);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "pm.test(\"[invalid_otp_format] Should return an error for invalid OTP format\", function () {\r",
                  "    if (testCase === \"invalid_otp_format\") {\r",
                  "        pm.expect(response.error).to.match(/invalid.*otp/i);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "pm.test(\"[expired_otp] Should return an error for expired OTP\", function () {\r",
                  "    if (testCase === \"expired_otp\") {\r",
                  "        pm.expect(response.error).to.match(/expired.*otp/i);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "pm.test(\"[same_old_new_password] Should return an error for using the same password\", function () {\r",
                  "    if (testCase === \"same_old_new_password\") {\r",
                  "        pm.expect(response.error).to.match(/new password cannot be the same as old/i);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "pm.test(\"[used_otp] Should return an error for used OTP\", function () {\r",
                  "    if (testCase === \"used_otp\") {\r",
                  "        pm.expect(response.error).to.match(/otp code has been used/i);\r",
                  "    }\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "f1a96c18-4e92-4b13-b9da-99934f2059d6"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b87a7bd6-3722-42d2-b1b6-276d591d186d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Generate a random new password for testing\r",
                  "const newPassword = `Pass${Math.floor(Math.random() * 10000)}`;\r",
                  "pm.environment.set(\"newPassword\", newPassword);  // Store in environment\r",
                  "\r",
                  "\r",
                  "// Define test cases with different input scenarios\r",
                  "const testCases = {\r",
                  "    \"valid_request\": { \r",
                  "        \"email\": pm.environment.get(\"reg.email\"),\r",
                  "        \"otpCode\": pm.environment.get(\"valid.otpCode\"),\r",
                  "        \"password\": newPassword  \r",
                  "    },\r",
                  "    \"missing_email\": { \r",
                  "        \"email\": \"\",  \r",
                  "        \"otpCode\": \"248015\",\r",
                  "        \"password\": newPassword\r",
                  "    },\r",
                  "    \"missing_otp\": { \r",
                  "        \"email\": pm.environment.get(\"reg.email\"),\r",
                  "        \"otpCode\": \"\",\r",
                  "        \"password\": newPassword\r",
                  "    },\r",
                  "    \"missing_password\": { \r",
                  "        \"email\": pm.environment.get(\"reg.email\"),\r",
                  "        \"otpCode\": \"248015\",\r",
                  "        \"password\": \"\"\r",
                  "    },\r",
                  "    \"invalid_otp_format\": { \r",
                  "        \"email\": pm.environment.get(\"reg.email\"),\r",
                  "        \"otpCode\": \"abcd123\",  // OTP should be numeric\r",
                  "        \"password\": newPassword\r",
                  "    },\r",
                  "    \"expired_otp\": { \r",
                  "        \"email\": pm.environment.get(\"reg.email\"),\r",
                  "        \"otpCode\": \"999999\",  // Simulating expired OTP\r",
                  "        \"password\": newPassword\r",
                  "    },\r",
                  "    \"unregistered_email\": { \r",
                  "        \"email\": \"unregistered@mail.com\",\r",
                  "        \"otpCode\": \"248015\",\r",
                  "        \"password\": newPassword\r",
                  "    },\r",
                  "    \"used_otp\": { \r",
                  "        \"email\": pm.environment.get(\"reg.email\"),\r",
                  "        \"otpCode\": \"123456\",  // Simulating an already used OTP\r",
                  "        \"password\": newPassword\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "// Get the current test case from environment (default to valid_request)\r",
                  "let testCase = pm.environment.get(\"testCase\") || \"valid_request\";\r",
                  "\r",
                  "// Store the selected test case payload as the request body\r",
                  "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                  "\r",
                  "// Set request headers for tracking\r",
                  "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                  "\r",
                  "// Log the test case for debugging in Postman Console\r",
                  "console.log(`Running test case: ${testCase}`, testCases[testCase]);\r",
                  ""
                ],
                "_lastExecutionId": "5fb960e2-cf7e-4087-b903-58d48f887cfe"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "auth",
              "password",
              "reset"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Test-Case",
              "value": "valid_request"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "142284a6-f28d-49b6-9274-9997b956d4d3",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "74",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\"email\":\"test_241@example.com\",\"otpCode\":\"887624\",\"password\":\"Pass5078\"}\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "67c8bac2-125d-4a62-a8d4-7838d1f40261",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:04 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "56"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              114,
              101,
              115,
              101,
              116,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 211,
          "responseSize": 56
        },
        "id": "0cfb3ae3-a106-41d2-9f35-3839d9da9a60",
        "assertions": [
          {
            "assertion": "[valid_request] Status should be 200",
            "skipped": false
          },
          {
            "assertion": "[valid_request] Should return success response",
            "skipped": false
          },
          {
            "assertion": "[missing_email] Should return an error for missing email",
            "skipped": false
          },
          {
            "assertion": "[invalid_email_format] Should return an error for invalid email format",
            "skipped": false
          },
          {
            "assertion": "[unregistered_email] Should return an error for unregistered email",
            "skipped": false
          },
          {
            "assertion": "[missing_otp] Should return an error for missing OTP",
            "skipped": false
          },
          {
            "assertion": "[invalid_otp_format] Should return an error for invalid OTP format",
            "skipped": false
          },
          {
            "assertion": "[expired_otp] Should return an error for expired OTP",
            "skipped": false
          },
          {
            "assertion": "[same_old_new_password] Should return an error for using the same password",
            "skipped": false
          },
          {
            "assertion": "[used_otp] Should return an error for used OTP",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3e37931c-0dc3-40fa-a455-42bd8f1a947f",
          "length": 40,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6b4a76bc-c6dc-4d90-bf3d-7aebf4040b22"
        },
        "item": {
          "id": "7ab6bd71-383f-4e5c-bd73-632e6bc3bef1",
          "name": "Change password",
          "request": {
            "url": {
              "path": [
                "auth",
                "password",
                "change"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{{currentPayload}}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a310fca9-96aa-4499-979b-42b2240ad03b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Retrieve test case and response body\r",
                  "let testCase = pm.environment.get(\"testCase\") || \"valid_request\";\r",
                  "let jsonResponse = pm.response.json();\r",
                  "let expectedPayload = JSON.parse(pm.environment.get(\"currentPayload\"));\r",
                  "\r",
                  "// Test Case 1: Validate Status Code for Successful Password Change\r",
                  "if (testCase === \"valid_request\") {\r",
                  "    pm.test(\"Validate that the status code is 200 for successful password change\", function () {\r",
                  "        pm.response.to.have.status(200);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Verify that the success message is 'Password changed successfully'\", function () {\r",
                  "        pm.expect(jsonResponse.success).to.eql(true);\r",
                  "        pm.expect(jsonResponse.message).to.eql(\"Password changed successfully\");\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Check response structure contains 'success' and 'message'\", function () {\r",
                  "        pm.expect(jsonResponse).to.have.all.keys(\"success\", \"message\");\r",
                  "        pm.expect(jsonResponse.success).to.be.a(\"boolean\");\r",
                  "        pm.expect(jsonResponse.message).to.be.a(\"string\");\r",
                  "    });\r",
                  "}\r",
                  "\r",
                  "// Test Case 2: Verify Status Code and Message for Missing Email\r",
                  "if (testCase === \"missing_email\") {\r",
                  "    pm.test(\"Validate that the status code is 400 for missing email\", function () {\r",
                  "        pm.response.to.have.status(400);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Verify that the error message is 'Email field is required'\", function () {\r",
                  "        pm.expect(jsonResponse.success).to.eql(false);\r",
                  "        pm.expect(jsonResponse.message).to.eql(\"Email field is required\");\r",
                  "    });\r",
                  "}\r",
                  "\r",
                  "// Test Case 3: Validate Status Code and Message for Missing Old Password\r",
                  "if (testCase === \"missing_old_password\") {\r",
                  "    pm.test(\"Validate that the status code is 400 for missing old password\", function () {\r",
                  "        pm.response.to.have.status(400);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Verify that the error message is 'Old password is required'\", function () {\r",
                  "        pm.expect(jsonResponse.success).to.eql(false);\r",
                  "        pm.expect(jsonResponse.message).to.eql(\"Old password is required\");\r",
                  "    });\r",
                  "}\r",
                  "\r",
                  "// Test Case 4: Validate Status Code and Message for Missing New Password\r",
                  "if (testCase === \"missing_new_password\") {\r",
                  "    pm.test(\"Validate that the status code is 400 for missing new password\", function () {\r",
                  "        pm.response.to.have.status(400);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Verify that the error message is 'New password is required'\", function () {\r",
                  "        pm.expect(jsonResponse.success).to.eql(false);\r",
                  "        pm.expect(jsonResponse.message).to.eql(\"New password is required\");\r",
                  "    });\r",
                  "}\r",
                  "\r",
                  "// Test Case 5: Verify Status Code and Message for Same Old and New Password\r",
                  "if (testCase === \"same_old_new_password\") {\r",
                  "    pm.test(\"Validate that the status code is 400 when old and new passwords are the same\", function () {\r",
                  "        pm.response.to.have.status(400);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Verify that the error message is 'New password must be different from the old password'\", function () {\r",
                  "        pm.expect(jsonResponse.success).to.eql(false);\r",
                  "        pm.expect(jsonResponse.message).to.eql(\"New password must be different from the old password\");\r",
                  "    });\r",
                  "}\r",
                  "\r",
                  "// Test Case 6: Validate Status Code and Message for Incorrect Old Password\r",
                  "if (testCase === \"incorrect_old_password\") {\r",
                  "    pm.test(\"Validate that the status code is 400 for incorrect old password\", function () {\r",
                  "        pm.response.to.have.status(400);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Verify that the error message is 'Incorrect old password'\", function () {\r",
                  "        pm.expect(jsonResponse.success).to.eql(false);\r",
                  "        pm.expect(jsonResponse.message).to.eql(\"Incorrect old password\");\r",
                  "    });\r",
                  "}\r",
                  "\r",
                  "// Test Case 7: Validate Status Code and Message for Unregistered Email\r",
                  "if (testCase === \"unregistered_email\") {\r",
                  "    pm.test(\"Validate that the status code is 404 for unregistered email\", function () {\r",
                  "        pm.response.to.have.status(404);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Verify that the error message is 'Email address not found'\", function () {\r",
                  "        pm.expect(jsonResponse.success).to.eql(false);\r",
                  "        pm.expect(jsonResponse.message).to.eql(\"Email address not found\");\r",
                  "    });\r",
                  "}\r",
                  "\r",
                  "// General Test Case: Validate Response Time\r",
                  "pm.test(\"Validate that the response time for password change is less than 1000ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "});\r",
                  "\r",
                  "// Log Test Case Execution\r",
                  "console.log(`Executed test case: ${testCase}`, expectedPayload);\r",
                  ""
                ],
                "_lastExecutionId": "f15e6632-0783-4cb5-a3f6-3af25a06f62b"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e813ff3a-44d9-4442-b93c-c6826fab09d1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Generate a new password dynamically\r",
                  "const changePassword = `Pass${Math.floor(1000 + Math.random() * 9000)}`; // Ensures a 4-digit random number\r",
                  "pm.environment.set(\"changePassword\", changePassword)\r",
                  "\r",
                  "// ✅ Retrieve stored email and old password\r",
                  "const email = pm.environment.get(\"reg.email\");\r",
                  "const oldPassword = pm.environment.get(\"newPassword\");\r",
                  "\r",
                  "// ✅ Define multiple test cases\r",
                  "const testCases = {\r",
                  "    \"valid_request\": { \r",
                  "        \"email\": email,\r",
                  "        \"oldPassword\": oldPassword,\r",
                  "        \"newPassword\": changePassword\r",
                  "    },\r",
                  "    \"missing_email\": { \r",
                  "        \"email\": \"\",\r",
                  "        \"oldPassword\": oldPassword,\r",
                  "        \"newPassword\": changePassword\r",
                  "    },\r",
                  "    \"missing_old_password\": { \r",
                  "        \"email\": email,\r",
                  "        \"oldPassword\": \"\",\r",
                  "        \"newPassword\": changePassword\r",
                  "    },\r",
                  "    \"missing_new_password\": { \r",
                  "        \"email\": email,\r",
                  "        \"oldPassword\": oldPassword,\r",
                  "        \"newPassword\": \"\"\r",
                  "    },\r",
                  "    \"same_old_new_password\": { \r",
                  "        \"email\": email,\r",
                  "        \"oldPassword\": oldPassword,\r",
                  "        \"newPassword\": oldPassword  // Ensures old and new passwords are the same\r",
                  "    },\r",
                  "    \"incorrect_old_password\": { \r",
                  "        \"email\": email,\r",
                  "        \"oldPassword\": \"WrongPass$000\",  // Intentionally incorrect\r",
                  "        \"newPassword\": changePassword\r",
                  "    },\r",
                  "    \"unregistered_email\": { \r",
                  "        \"email\": \"unknownuser@mail.com\",\r",
                  "        \"oldPassword\": oldPassword,\r",
                  "        \"newPassword\": changePassword\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "// ✅ Get test case from environment or default to valid request\r",
                  "let testCase = pm.environment.get(\"testCase\") || \"valid_request\";\r",
                  "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                  "\r",
                  "// ✅ Set request headers for tracking\r",
                  "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                  "\r",
                  "// ✅ Log output for debugging\r",
                  "console.log(`Running test case: ${testCase}`, testCases[testCase]);\r",
                  "console.log(`New password generated and stored: ${changePassword}`);\r",
                  ""
                ],
                "_lastExecutionId": "077a431c-e721-4525-b644-fb94b3622082"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "auth",
              "password",
              "change"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Test-Case",
              "value": "valid_request"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "99b1ff77-87b7-434f-a639-1a08d8abe2f5",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "83",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\"email\":\"test_241@example.com\",\"oldPassword\":\"Pass5078\",\"newPassword\":\"Pass7813\"}\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "8d6abe53-fd22-4fcf-b67b-35be6c1a2c88",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:05 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "58"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              99,
              104,
              97,
              110,
              103,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 242,
          "responseSize": 58
        },
        "id": "7ab6bd71-383f-4e5c-bd73-632e6bc3bef1",
        "assertions": [
          {
            "assertion": "Validate that the status code is 200 for successful password change",
            "skipped": false
          },
          {
            "assertion": "Verify that the success message is 'Password changed successfully'",
            "skipped": false
          },
          {
            "assertion": "Check response structure contains 'success' and 'message'",
            "skipped": false
          },
          {
            "assertion": "Validate that the response time for password change is less than 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "626a389e-03b8-4e53-8076-63e529a7049a",
          "length": 40,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "f88fc676-e5e3-447d-acdc-5f36fdf5bf3d"
        },
        "item": {
          "id": "765619d5-b6bd-40a2-95d0-39671d0b85de",
          "name": "Request email confirmation",
          "request": {
            "url": {
              "path": [
                "auth",
                "confirmation",
                "request",
                "email"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{{currentPayload}}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7502f216-0b7d-4dab-a59d-12d1bc961fbd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Define test cases for different input scenarios\r",
                  "const testCases = {\r",
                  "    \"valid_request\": {\r",
                  "    \"email\": pm.environment.get(\"reg.email\")\r",
                  "},\r",
                  "    \"missing_email\": { \r",
                  "        \"email\": \"\"  // No email provided\r",
                  "    },\r",
                  "    \"invalid_email_format\": { \r",
                  "        \"email\": \"invalid-email\"  // Invalid email format\r",
                  "    },\r",
                  "    \"unregistered_email\": { \r",
                  "        \"email\": \"unknownuser@mail.com\"  // Email not in system\r",
                  "    },\r",
                  "    \"already_confirmed_email\": { \r",
                  "        \"email\": \"testog@e-record.com\"  // Email not in system\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "// Get the current test case from environment (default to valid_request)\r",
                  "let testCase = pm.environment.get(\"testCase\") || \"valid_request\";\r",
                  "\r",
                  "// Store the selected test case payload as the request body\r",
                  "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                  "\r",
                  "// Set request headers for tracking\r",
                  "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                  "\r",
                  "// Log the test case for debugging in Postman Console\r",
                  "console.log(`Running test case: ${testCase}`, testCases[testCase]);\r",
                  ""
                ],
                "_lastExecutionId": "e2867971-68d8-4f34-94b4-1e915fcd3846"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7b420c78-b6dd-4cf6-a428-2dc6fcd23f5d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse response\r",
                  "let response = pm.response.json();\r",
                  "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                  "\r",
                  "// Expected status codes\r",
                  "const expectedStatusCodes = {\r",
                  "    \"valid_request\": 200,\r",
                  "    \"missing_email\": 400,\r",
                  "    \"invalid_email_format\": 400,\r",
                  "    \"unregistered_email\": 404\r",
                  "};\r",
                  "\r",
                  "// ✅ Validate Status Code\r",
                  "pm.test(`[${testCase}] Status should be ${expectedStatusCodes[testCase]}`, function () {\r",
                  "    pm.response.to.have.status(expectedStatusCodes[testCase]);\r",
                  "});\r",
                  "\r",
                  "// ✅ Success Scenario (valid request)\r",
                  "pm.test(\"[valid_request] Verify success response\", function () {\r",
                  "    if (testCase === \"valid_request\") {\r",
                  "        pm.expect(response.success).to.eql(true);\r",
                  "        pm.expect(response.message).to.include(\"confirmation request sent successfully\");\r",
                  "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// ❌ Error Scenario: Missing Email\r",
                  "pm.test(\"[missing_email] Error should mention missing email\", function () {\r",
                  "    if (testCase === \"missing_email\") {\r",
                  "        pm.expect(response.error).to.match(/missing.*email/i);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// ❌ Error Scenario: Invalid Email Format\r",
                  "pm.test(\"[invalid_email_format] Error should indicate invalid email format\", function () {\r",
                  "    if (testCase === \"invalid_email_format\") {\r",
                  "        pm.expect(response.error).to.match(/invalid.*email/i);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// ❌ Error Scenario: Unregistered Email\r",
                  "pm.test(\"[unregistered_email] Error should indicate unregistered email\", function () {\r",
                  "    if (testCase === \"unregistered_email\") {\r",
                  "        pm.expect(response.error).to.match(/not found|unregistered/i);\r",
                  "    }\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "dfc5319e-83cc-48f2-a584-090c39845790"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "auth",
              "confirmation",
              "request",
              "email"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Test-Case",
              "value": "valid_request"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bfb1d7e1-2ba2-4355-abfe-f9028e4e98d3",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "33",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"email\":\"test_241@example.com\"}\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "5517c9e9-a95d-4e63-b6ed-5ea2b43e0d09",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:05 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "74"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              69,
              109,
              97,
              105,
              108,
              32,
              99,
              111,
              110,
              102,
              105,
              114,
              109,
              97,
              116,
              105,
              111,
              110,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              115,
              101,
              110,
              116,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              46,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 212,
          "responseSize": 74
        },
        "id": "765619d5-b6bd-40a2-95d0-39671d0b85de",
        "assertions": [
          {
            "assertion": "[valid_request] Status should be 200",
            "skipped": false
          },
          {
            "assertion": "[valid_request] Verify success response",
            "skipped": false
          },
          {
            "assertion": "[missing_email] Error should mention missing email",
            "skipped": false
          },
          {
            "assertion": "[invalid_email_format] Error should indicate invalid email format",
            "skipped": false
          },
          {
            "assertion": "[unregistered_email] Error should indicate unregistered email",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9c9c796c-87b1-4382-9abe-18ed3e0568d7",
          "length": 40,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bfa261ce-fdca-4c7f-90de-4e7d7262d546"
        },
        "item": {
          "id": "83c80dea-dc07-4be0-9b9c-d3b8d859f049",
          "name": "Email confirmation",
          "request": {
            "url": {
              "path": [
                "auth",
                "confirmation",
                "email"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{test.email}}\",\n    \"otpCode\": \"{{retrievedOTP}}\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4d7ea6e-85f2-4292-9743-b85e740811d9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Define Mail.tm API endpoints\r",
                  "const mailTmBaseUrl = \"https://api.mail.tm\";\r",
                  "const userEmail = pm.environment.get(\"test.email\");  // Ensure you've set this in Postman\r",
                  "const userPassword = pm.environment.get(\"email_password\");  // Ensure this is set in Postman\r",
                  "\r",
                  "// Step 1: Get authentication token for Mail.tm\r",
                  "pm.sendRequest({\r",
                  "    url: `${mailTmBaseUrl}/token`,\r",
                  "    method: \"POST\",\r",
                  "    header: { \"Content-Type\": \"application/json\" },\r",
                  "    body: {\r",
                  "        mode: \"raw\",\r",
                  "        raw: JSON.stringify({\r",
                  "            address: userEmail,\r",
                  "            password: userPassword\r",
                  "        })\r",
                  "    }\r",
                  "}, function (err, res) {\r",
                  "    if (err) {\r",
                  "        console.error(\"Mail.tm Auth Error:\", err);\r",
                  "        return;\r",
                  "    }\r",
                  "\r",
                  "    let token = res.json().token;\r",
                  "    pm.environment.set(\"mailTmToken\", token); // Store token\r",
                  "\r",
                  "    // Step 2: Fetch the latest email\r",
                  "    pm.sendRequest({\r",
                  "        url: `${mailTmBaseUrl}/messages`,\r",
                  "        method: \"GET\",\r",
                  "        header: { \"Authorization\": `Bearer ${token}` }\r",
                  "    }, function (err, res) {\r",
                  "        if (err) {\r",
                  "            console.error(\"Mail.tm Message Fetch Error:\", err);\r",
                  "            return;\r",
                  "        }\r",
                  "\r",
                  "       let messages = res.json()[\"hydra:member\"];\r",
                  "        if (!messages.length) {\r",
                  "            console.warn(\"No OTP emails found.\");\r",
                  "            return;\r",
                  "        }\r",
                  "\r",
                  "        let latestMessageId = messages[0].id; // Get latest message ID\r",
                  "\r",
                  "        // Step 3: Retrieve the OTP from the latest email\r",
                  "        pm.sendRequest({\r",
                  "            url: `${mailTmBaseUrl}/messages/${latestMessageId}`,\r",
                  "            method: \"GET\",\r",
                  "            header: { \"Authorization\": `Bearer ${token}` }\r",
                  "        }, function (err, res) {\r",
                  "            if (err) {\r",
                  "                console.error(\"Mail.tm OTP Extraction Error:\", err);\r",
                  "                return;\r",
                  "            }\r",
                  "\r",
                  "            let emailBody = res.json().text;  \r",
                  "            let otpMatch = emailBody.match(/\\b\\d{6}\\b/);  // Extract the 6-digit OTP\r",
                  "            if (otpMatch) {\r",
                  "                let otpCode = otpMatch[0];\r",
                  "                pm.environment.set(\"retrievedOTP\", otpCode);\r",
                  "                console.log(`✅ OTP Retrieved: ${otpCode}`);\r",
                  "            } else {\r",
                  "                console.warn(\"OTP not found in email body.\");\r",
                  "            }\r",
                  "        });\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "83139b44-48ff-46e5-99a6-9323c2063966"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a82fe448-3f4b-4b22-b4bc-74b191457116",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Verify OTP confirmation response\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "\r",
                  "    let response;\r",
                  "    try {\r",
                  "        response = pm.response.json();\r",
                  "    } catch (e) {\r",
                  "        pm.test(\"Response is a valid JSON\", function () {\r",
                  "            pm.expect(false, \"Invalid JSON response\").to.be.true;\r",
                  "        });\r",
                  "        return; // Stop execution if JSON parsing fails\r",
                  "    }\r",
                  "\r",
                  "    let statusCode = pm.response.code;\r",
                  "\r",
                  "    if (statusCode === 200) {\r",
                  "        // ✅ Success Case: OTP confirmed successfully\r",
                  "        pm.test(\"Status code is 200 (OK)\", function () {\r",
                  "            pm.response.to.have.status(200);\r",
                  "        });\r",
                  "\r",
                  "        pm.test(\"OTP confirmation success message\", function () {\r",
                  "            pm.expect(response.success).to.eql(true);\r",
                  "            pm.expect(response.message).to.match(/successfully confirmed/i);\r",
                  "        });\r",
                  "    } else if (statusCode === 409) {\r",
                  "        // ❌ Error Case: Email already confirmed\r",
                  "        pm.test(\"Status code is 409 (Conflict)\", function () {\r",
                  "            pm.response.to.have.status(409);\r",
                  "        });\r",
                  "\r",
                  "        pm.test(\"Error message for already confirmed email\", function () {\r",
                  "            pm.expect(response.success).to.eql(false);\r",
                  "            pm.expect(response.message).to.eql(\"Email has already been confirmed\");\r",
                  "        });\r",
                  "    } else {\r",
                  "        // ⚠️ Handle unexpected status codes\r",
                  "        pm.test(`Unexpected status code: ${statusCode}`, function () {\r",
                  "            pm.expect(false, `Unexpected response status: ${statusCode}`).to.be.true;\r",
                  "        });\r",
                  "    }\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "6ebbed36-cf99-4362-8a8d-551386f9251b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "auth",
              "confirmation",
              "email"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "de951946-b29d-492c-9b12-86475384d508",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "64",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"email\": \"testog@e-record.com\",\n    \"otpCode\": \"848350\"\n}\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "c083e0e5-9c67-4adb-90d2-71543e56e4df",
          "status": "Conflict",
          "code": 409,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:05 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "62"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              69,
              109,
              97,
              105,
              108,
              32,
              104,
              97,
              115,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              98,
              101,
              101,
              110,
              32,
              99,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 86,
          "responseSize": 62
        },
        "id": "83c80dea-dc07-4be0-9b9c-d3b8d859f049",
        "assertions": [
          {
            "assertion": "Status code is 409 (Conflict)",
            "skipped": false
          },
          {
            "assertion": "Error message for already confirmed email",
            "skipped": false
          },
          {
            "assertion": "Verify OTP confirmation response",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9c9c796c-87b1-4382-9abe-18ed3e0568d7",
          "length": 40,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bfa261ce-fdca-4c7f-90de-4e7d7262d546"
        },
        "item": {
          "id": "83c80dea-dc07-4be0-9b9c-d3b8d859f049",
          "name": "Email confirmation",
          "request": {
            "url": {
              "path": [
                "auth",
                "confirmation",
                "email"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{test.email}}\",\n    \"otpCode\": \"{{retrievedOTP}}\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4d7ea6e-85f2-4292-9743-b85e740811d9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Define Mail.tm API endpoints\r",
                  "const mailTmBaseUrl = \"https://api.mail.tm\";\r",
                  "const userEmail = pm.environment.get(\"test.email\");  // Ensure you've set this in Postman\r",
                  "const userPassword = pm.environment.get(\"email_password\");  // Ensure this is set in Postman\r",
                  "\r",
                  "// Step 1: Get authentication token for Mail.tm\r",
                  "pm.sendRequest({\r",
                  "    url: `${mailTmBaseUrl}/token`,\r",
                  "    method: \"POST\",\r",
                  "    header: { \"Content-Type\": \"application/json\" },\r",
                  "    body: {\r",
                  "        mode: \"raw\",\r",
                  "        raw: JSON.stringify({\r",
                  "            address: userEmail,\r",
                  "            password: userPassword\r",
                  "        })\r",
                  "    }\r",
                  "}, function (err, res) {\r",
                  "    if (err) {\r",
                  "        console.error(\"Mail.tm Auth Error:\", err);\r",
                  "        return;\r",
                  "    }\r",
                  "\r",
                  "    let token = res.json().token;\r",
                  "    pm.environment.set(\"mailTmToken\", token); // Store token\r",
                  "\r",
                  "    // Step 2: Fetch the latest email\r",
                  "    pm.sendRequest({\r",
                  "        url: `${mailTmBaseUrl}/messages`,\r",
                  "        method: \"GET\",\r",
                  "        header: { \"Authorization\": `Bearer ${token}` }\r",
                  "    }, function (err, res) {\r",
                  "        if (err) {\r",
                  "            console.error(\"Mail.tm Message Fetch Error:\", err);\r",
                  "            return;\r",
                  "        }\r",
                  "\r",
                  "       let messages = res.json()[\"hydra:member\"];\r",
                  "        if (!messages.length) {\r",
                  "            console.warn(\"No OTP emails found.\");\r",
                  "            return;\r",
                  "        }\r",
                  "\r",
                  "        let latestMessageId = messages[0].id; // Get latest message ID\r",
                  "\r",
                  "        // Step 3: Retrieve the OTP from the latest email\r",
                  "        pm.sendRequest({\r",
                  "            url: `${mailTmBaseUrl}/messages/${latestMessageId}`,\r",
                  "            method: \"GET\",\r",
                  "            header: { \"Authorization\": `Bearer ${token}` }\r",
                  "        }, function (err, res) {\r",
                  "            if (err) {\r",
                  "                console.error(\"Mail.tm OTP Extraction Error:\", err);\r",
                  "                return;\r",
                  "            }\r",
                  "\r",
                  "            let emailBody = res.json().text;  \r",
                  "            let otpMatch = emailBody.match(/\\b\\d{6}\\b/);  // Extract the 6-digit OTP\r",
                  "            if (otpMatch) {\r",
                  "                let otpCode = otpMatch[0];\r",
                  "                pm.environment.set(\"retrievedOTP\", otpCode);\r",
                  "                console.log(`✅ OTP Retrieved: ${otpCode}`);\r",
                  "            } else {\r",
                  "                console.warn(\"OTP not found in email body.\");\r",
                  "            }\r",
                  "        });\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "83139b44-48ff-46e5-99a6-9323c2063966"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a82fe448-3f4b-4b22-b4bc-74b191457116",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Verify OTP confirmation response\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "\r",
                  "    let response;\r",
                  "    try {\r",
                  "        response = pm.response.json();\r",
                  "    } catch (e) {\r",
                  "        pm.test(\"Response is a valid JSON\", function () {\r",
                  "            pm.expect(false, \"Invalid JSON response\").to.be.true;\r",
                  "        });\r",
                  "        return; // Stop execution if JSON parsing fails\r",
                  "    }\r",
                  "\r",
                  "    let statusCode = pm.response.code;\r",
                  "\r",
                  "    if (statusCode === 200) {\r",
                  "        // ✅ Success Case: OTP confirmed successfully\r",
                  "        pm.test(\"Status code is 200 (OK)\", function () {\r",
                  "            pm.response.to.have.status(200);\r",
                  "        });\r",
                  "\r",
                  "        pm.test(\"OTP confirmation success message\", function () {\r",
                  "            pm.expect(response.success).to.eql(true);\r",
                  "            pm.expect(response.message).to.match(/successfully confirmed/i);\r",
                  "        });\r",
                  "    } else if (statusCode === 409) {\r",
                  "        // ❌ Error Case: Email already confirmed\r",
                  "        pm.test(\"Status code is 409 (Conflict)\", function () {\r",
                  "            pm.response.to.have.status(409);\r",
                  "        });\r",
                  "\r",
                  "        pm.test(\"Error message for already confirmed email\", function () {\r",
                  "            pm.expect(response.success).to.eql(false);\r",
                  "            pm.expect(response.message).to.eql(\"Email has already been confirmed\");\r",
                  "        });\r",
                  "    } else {\r",
                  "        // ⚠️ Handle unexpected status codes\r",
                  "        pm.test(`Unexpected status code: ${statusCode}`, function () {\r",
                  "            pm.expect(false, `Unexpected response status: ${statusCode}`).to.be.true;\r",
                  "        });\r",
                  "    }\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "6ebbed36-cf99-4362-8a8d-551386f9251b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "auth",
              "confirmation",
              "email"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "de951946-b29d-492c-9b12-86475384d508",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "64",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"email\": \"testog@e-record.com\",\n    \"otpCode\": \"848350\"\n}\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "c083e0e5-9c67-4adb-90d2-71543e56e4df",
          "status": "Conflict",
          "code": 409,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:05 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "62"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              69,
              109,
              97,
              105,
              108,
              32,
              104,
              97,
              115,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              98,
              101,
              101,
              110,
              32,
              99,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 86,
          "responseSize": 62
        },
        "id": "83c80dea-dc07-4be0-9b9c-d3b8d859f049",
        "assertions": [
          {
            "assertion": "Status code is 409 (Conflict)",
            "skipped": false
          },
          {
            "assertion": "Error message for already confirmed email",
            "skipped": false
          },
          {
            "assertion": "Verify OTP confirmation response",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9c9c796c-87b1-4382-9abe-18ed3e0568d7",
          "length": 40,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bfa261ce-fdca-4c7f-90de-4e7d7262d546"
        },
        "item": {
          "id": "83c80dea-dc07-4be0-9b9c-d3b8d859f049",
          "name": "Email confirmation",
          "request": {
            "url": {
              "path": [
                "auth",
                "confirmation",
                "email"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{test.email}}\",\n    \"otpCode\": \"{{retrievedOTP}}\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4d7ea6e-85f2-4292-9743-b85e740811d9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Define Mail.tm API endpoints\r",
                  "const mailTmBaseUrl = \"https://api.mail.tm\";\r",
                  "const userEmail = pm.environment.get(\"test.email\");  // Ensure you've set this in Postman\r",
                  "const userPassword = pm.environment.get(\"email_password\");  // Ensure this is set in Postman\r",
                  "\r",
                  "// Step 1: Get authentication token for Mail.tm\r",
                  "pm.sendRequest({\r",
                  "    url: `${mailTmBaseUrl}/token`,\r",
                  "    method: \"POST\",\r",
                  "    header: { \"Content-Type\": \"application/json\" },\r",
                  "    body: {\r",
                  "        mode: \"raw\",\r",
                  "        raw: JSON.stringify({\r",
                  "            address: userEmail,\r",
                  "            password: userPassword\r",
                  "        })\r",
                  "    }\r",
                  "}, function (err, res) {\r",
                  "    if (err) {\r",
                  "        console.error(\"Mail.tm Auth Error:\", err);\r",
                  "        return;\r",
                  "    }\r",
                  "\r",
                  "    let token = res.json().token;\r",
                  "    pm.environment.set(\"mailTmToken\", token); // Store token\r",
                  "\r",
                  "    // Step 2: Fetch the latest email\r",
                  "    pm.sendRequest({\r",
                  "        url: `${mailTmBaseUrl}/messages`,\r",
                  "        method: \"GET\",\r",
                  "        header: { \"Authorization\": `Bearer ${token}` }\r",
                  "    }, function (err, res) {\r",
                  "        if (err) {\r",
                  "            console.error(\"Mail.tm Message Fetch Error:\", err);\r",
                  "            return;\r",
                  "        }\r",
                  "\r",
                  "       let messages = res.json()[\"hydra:member\"];\r",
                  "        if (!messages.length) {\r",
                  "            console.warn(\"No OTP emails found.\");\r",
                  "            return;\r",
                  "        }\r",
                  "\r",
                  "        let latestMessageId = messages[0].id; // Get latest message ID\r",
                  "\r",
                  "        // Step 3: Retrieve the OTP from the latest email\r",
                  "        pm.sendRequest({\r",
                  "            url: `${mailTmBaseUrl}/messages/${latestMessageId}`,\r",
                  "            method: \"GET\",\r",
                  "            header: { \"Authorization\": `Bearer ${token}` }\r",
                  "        }, function (err, res) {\r",
                  "            if (err) {\r",
                  "                console.error(\"Mail.tm OTP Extraction Error:\", err);\r",
                  "                return;\r",
                  "            }\r",
                  "\r",
                  "            let emailBody = res.json().text;  \r",
                  "            let otpMatch = emailBody.match(/\\b\\d{6}\\b/);  // Extract the 6-digit OTP\r",
                  "            if (otpMatch) {\r",
                  "                let otpCode = otpMatch[0];\r",
                  "                pm.environment.set(\"retrievedOTP\", otpCode);\r",
                  "                console.log(`✅ OTP Retrieved: ${otpCode}`);\r",
                  "            } else {\r",
                  "                console.warn(\"OTP not found in email body.\");\r",
                  "            }\r",
                  "        });\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "83139b44-48ff-46e5-99a6-9323c2063966"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a82fe448-3f4b-4b22-b4bc-74b191457116",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Verify OTP confirmation response\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "\r",
                  "    let response;\r",
                  "    try {\r",
                  "        response = pm.response.json();\r",
                  "    } catch (e) {\r",
                  "        pm.test(\"Response is a valid JSON\", function () {\r",
                  "            pm.expect(false, \"Invalid JSON response\").to.be.true;\r",
                  "        });\r",
                  "        return; // Stop execution if JSON parsing fails\r",
                  "    }\r",
                  "\r",
                  "    let statusCode = pm.response.code;\r",
                  "\r",
                  "    if (statusCode === 200) {\r",
                  "        // ✅ Success Case: OTP confirmed successfully\r",
                  "        pm.test(\"Status code is 200 (OK)\", function () {\r",
                  "            pm.response.to.have.status(200);\r",
                  "        });\r",
                  "\r",
                  "        pm.test(\"OTP confirmation success message\", function () {\r",
                  "            pm.expect(response.success).to.eql(true);\r",
                  "            pm.expect(response.message).to.match(/successfully confirmed/i);\r",
                  "        });\r",
                  "    } else if (statusCode === 409) {\r",
                  "        // ❌ Error Case: Email already confirmed\r",
                  "        pm.test(\"Status code is 409 (Conflict)\", function () {\r",
                  "            pm.response.to.have.status(409);\r",
                  "        });\r",
                  "\r",
                  "        pm.test(\"Error message for already confirmed email\", function () {\r",
                  "            pm.expect(response.success).to.eql(false);\r",
                  "            pm.expect(response.message).to.eql(\"Email has already been confirmed\");\r",
                  "        });\r",
                  "    } else {\r",
                  "        // ⚠️ Handle unexpected status codes\r",
                  "        pm.test(`Unexpected status code: ${statusCode}`, function () {\r",
                  "            pm.expect(false, `Unexpected response status: ${statusCode}`).to.be.true;\r",
                  "        });\r",
                  "    }\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "6ebbed36-cf99-4362-8a8d-551386f9251b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "auth",
              "confirmation",
              "email"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "de951946-b29d-492c-9b12-86475384d508",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "64",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"email\": \"testog@e-record.com\",\n    \"otpCode\": \"848350\"\n}\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "c083e0e5-9c67-4adb-90d2-71543e56e4df",
          "status": "Conflict",
          "code": 409,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:05 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "62"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              69,
              109,
              97,
              105,
              108,
              32,
              104,
              97,
              115,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              98,
              101,
              101,
              110,
              32,
              99,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 86,
          "responseSize": 62
        },
        "id": "83c80dea-dc07-4be0-9b9c-d3b8d859f049",
        "assertions": [
          {
            "assertion": "Status code is 409 (Conflict)",
            "skipped": false
          },
          {
            "assertion": "Error message for already confirmed email",
            "skipped": false
          },
          {
            "assertion": "Verify OTP confirmation response",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9c9c796c-87b1-4382-9abe-18ed3e0568d7",
          "length": 40,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bfa261ce-fdca-4c7f-90de-4e7d7262d546"
        },
        "item": {
          "id": "83c80dea-dc07-4be0-9b9c-d3b8d859f049",
          "name": "Email confirmation",
          "request": {
            "url": {
              "path": [
                "auth",
                "confirmation",
                "email"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{test.email}}\",\n    \"otpCode\": \"{{retrievedOTP}}\"\n}\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4d7ea6e-85f2-4292-9743-b85e740811d9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Define Mail.tm API endpoints\r",
                  "const mailTmBaseUrl = \"https://api.mail.tm\";\r",
                  "const userEmail = pm.environment.get(\"test.email\");  // Ensure you've set this in Postman\r",
                  "const userPassword = pm.environment.get(\"email_password\");  // Ensure this is set in Postman\r",
                  "\r",
                  "// Step 1: Get authentication token for Mail.tm\r",
                  "pm.sendRequest({\r",
                  "    url: `${mailTmBaseUrl}/token`,\r",
                  "    method: \"POST\",\r",
                  "    header: { \"Content-Type\": \"application/json\" },\r",
                  "    body: {\r",
                  "        mode: \"raw\",\r",
                  "        raw: JSON.stringify({\r",
                  "            address: userEmail,\r",
                  "            password: userPassword\r",
                  "        })\r",
                  "    }\r",
                  "}, function (err, res) {\r",
                  "    if (err) {\r",
                  "        console.error(\"Mail.tm Auth Error:\", err);\r",
                  "        return;\r",
                  "    }\r",
                  "\r",
                  "    let token = res.json().token;\r",
                  "    pm.environment.set(\"mailTmToken\", token); // Store token\r",
                  "\r",
                  "    // Step 2: Fetch the latest email\r",
                  "    pm.sendRequest({\r",
                  "        url: `${mailTmBaseUrl}/messages`,\r",
                  "        method: \"GET\",\r",
                  "        header: { \"Authorization\": `Bearer ${token}` }\r",
                  "    }, function (err, res) {\r",
                  "        if (err) {\r",
                  "            console.error(\"Mail.tm Message Fetch Error:\", err);\r",
                  "            return;\r",
                  "        }\r",
                  "\r",
                  "       let messages = res.json()[\"hydra:member\"];\r",
                  "        if (!messages.length) {\r",
                  "            console.warn(\"No OTP emails found.\");\r",
                  "            return;\r",
                  "        }\r",
                  "\r",
                  "        let latestMessageId = messages[0].id; // Get latest message ID\r",
                  "\r",
                  "        // Step 3: Retrieve the OTP from the latest email\r",
                  "        pm.sendRequest({\r",
                  "            url: `${mailTmBaseUrl}/messages/${latestMessageId}`,\r",
                  "            method: \"GET\",\r",
                  "            header: { \"Authorization\": `Bearer ${token}` }\r",
                  "        }, function (err, res) {\r",
                  "            if (err) {\r",
                  "                console.error(\"Mail.tm OTP Extraction Error:\", err);\r",
                  "                return;\r",
                  "            }\r",
                  "\r",
                  "            let emailBody = res.json().text;  \r",
                  "            let otpMatch = emailBody.match(/\\b\\d{6}\\b/);  // Extract the 6-digit OTP\r",
                  "            if (otpMatch) {\r",
                  "                let otpCode = otpMatch[0];\r",
                  "                pm.environment.set(\"retrievedOTP\", otpCode);\r",
                  "                console.log(`✅ OTP Retrieved: ${otpCode}`);\r",
                  "            } else {\r",
                  "                console.warn(\"OTP not found in email body.\");\r",
                  "            }\r",
                  "        });\r",
                  "    });\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "83139b44-48ff-46e5-99a6-9323c2063966"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a82fe448-3f4b-4b22-b4bc-74b191457116",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Verify OTP confirmation response\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "\r",
                  "    let response;\r",
                  "    try {\r",
                  "        response = pm.response.json();\r",
                  "    } catch (e) {\r",
                  "        pm.test(\"Response is a valid JSON\", function () {\r",
                  "            pm.expect(false, \"Invalid JSON response\").to.be.true;\r",
                  "        });\r",
                  "        return; // Stop execution if JSON parsing fails\r",
                  "    }\r",
                  "\r",
                  "    let statusCode = pm.response.code;\r",
                  "\r",
                  "    if (statusCode === 200) {\r",
                  "        // ✅ Success Case: OTP confirmed successfully\r",
                  "        pm.test(\"Status code is 200 (OK)\", function () {\r",
                  "            pm.response.to.have.status(200);\r",
                  "        });\r",
                  "\r",
                  "        pm.test(\"OTP confirmation success message\", function () {\r",
                  "            pm.expect(response.success).to.eql(true);\r",
                  "            pm.expect(response.message).to.match(/successfully confirmed/i);\r",
                  "        });\r",
                  "    } else if (statusCode === 409) {\r",
                  "        // ❌ Error Case: Email already confirmed\r",
                  "        pm.test(\"Status code is 409 (Conflict)\", function () {\r",
                  "            pm.response.to.have.status(409);\r",
                  "        });\r",
                  "\r",
                  "        pm.test(\"Error message for already confirmed email\", function () {\r",
                  "            pm.expect(response.success).to.eql(false);\r",
                  "            pm.expect(response.message).to.eql(\"Email has already been confirmed\");\r",
                  "        });\r",
                  "    } else {\r",
                  "        // ⚠️ Handle unexpected status codes\r",
                  "        pm.test(`Unexpected status code: ${statusCode}`, function () {\r",
                  "            pm.expect(false, `Unexpected response status: ${statusCode}`).to.be.true;\r",
                  "        });\r",
                  "    }\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "6ebbed36-cf99-4362-8a8d-551386f9251b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "auth",
              "confirmation",
              "email"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "de951946-b29d-492c-9b12-86475384d508",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "64",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"email\": \"testog@e-record.com\",\n    \"otpCode\": \"848350\"\n}\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "c083e0e5-9c67-4adb-90d2-71543e56e4df",
          "status": "Conflict",
          "code": 409,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:05 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "62"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              69,
              109,
              97,
              105,
              108,
              32,
              104,
              97,
              115,
              32,
              97,
              108,
              114,
              101,
              97,
              100,
              121,
              32,
              98,
              101,
              101,
              110,
              32,
              99,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 86,
          "responseSize": 62
        },
        "id": "83c80dea-dc07-4be0-9b9c-d3b8d859f049",
        "assertions": [
          {
            "assertion": "Status code is 409 (Conflict)",
            "skipped": false
          },
          {
            "assertion": "Error message for already confirmed email",
            "skipped": false
          },
          {
            "assertion": "Verify OTP confirmation response",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "766fdbc6-21d0-4e5e-b362-e4faf4d00fb4",
          "length": 40,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1b7a58e6-4bc9-4bec-8d59-3e61cb03f2ec"
        },
        "item": {
          "id": "0cb85dc3-7dc7-48b8-b2fc-fa82cb742732",
          "name": "update user",
          "request": {
            "url": {
              "path": [
                "user"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{{currentPayload}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{authToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "efa8afee-70e4-4747-a958-fd5a404797c5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure Authorization Token is Set\r",
                  "if (!pm.environment.get(\"authToken\")) {\r",
                  "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");\r",
                  "}\r",
                  "\r",
                  "// ✅ Set Authorization Header\r",
                  "pm.request.headers.add({\r",
                  "    key: \"Authorization\",\r",
                  "    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
                  "});\r",
                  "\r",
                  "function getRandomNames() {\r",
                  "    const names = [\r",
                  "        \"James\", \"Mary\", \"John\", \"Patricia\", \"Robert\", \"Jennifer\", \"Ben\", \r",
                  "        \"Michael\", \"Linda\", \"William\", \"Elizabeth\", \"David\", \"Johnson\", \r",
                  "        \"Richard\", \"Fydel\", \"Joseph\", \"Jessica\", \"Thomas\", \"Sarah\", \"Ojay\", \"Rodri\",\r",
                  "        \"Charles\", \"Karen\", \"Christopher\", \"Lisa\", \"Daniel\", \"Nancy\", \"Walter\",\r",
                  "        \"Friedrich\", \"Betty\", \"Anthony\", \"Margaret\", \"Mark\", \"Sandra\", \"James\"\r",
                  "    ];\r",
                  "\r",
                  "    let firstName = names[Math.floor(Math.random() * names.length)];\r",
                  "    let lastName = names[Math.floor(Math.random() * names.length)];\r",
                  "\r",
                  "    while (firstName === lastName) {\r",
                  "        lastName = names[Math.floor(Math.random() * names.length)];\r",
                  "    }\r",
                  "\r",
                  "    return { firstName, lastName };\r",
                  "}\r",
                  "\r",
                  "const { firstName: randomFirstName, lastName: randomLastName } = getRandomNames();\r",
                  "const testPhoneNumber = `0813${Math.floor(1000000 + Math.random() * 9000000)}`;\r",
                  "\r",
                  "const testCases = {\r",
                  "    \"valid_request\": { \r",
                  "        \"firstName\": randomFirstName, \r",
                  "        \"lastName\": randomLastName, \r",
                  "        \"phone\": testPhoneNumber\r",
                  "    },\r",
                  "    \"missing_firstName\": { \r",
                  "        \"firstName\": \"\", \r",
                  "        \"lastName\": randomLastName, \r",
                  "        \"phone\": testPhoneNumber\r",
                  "    },\r",
                  "    \"missing_lastName\": { \r",
                  "        \"firstName\": randomFirstName, \r",
                  "        \"lastName\": \"\", \r",
                  "        \"phone\": testPhoneNumber\r",
                  "    },\r",
                  "    \"missing_phone\": { \r",
                  "        \"firstName\": randomFirstName, \r",
                  "        \"lastName\": randomLastName, \r",
                  "        \"phone\": \"\"\r",
                  "    },\r",
                  "    \"duplicate_phone\": { \r",
                  "        \"firstName\": randomFirstName, \r",
                  "        \"lastName\": randomLastName, \r",
                  "        \"phone\": pm.environment.get(\"existing.phone\") // Assume this exists\r",
                  "    },\r",
                  "    \"invalid_phone_format\": { \r",
                  "        \"firstName\": randomFirstName, \r",
                  "        \"lastName\": randomLastName, \r",
                  "        \"phone\": \"abcd12345\"\r",
                  "    },\r",
                  "    \"special_characters\": { \r",
                  "        \"firstName\": \"John@Doe\", \r",
                  "        \"lastName\": \"Jane#Smith\", \r",
                  "        \"phone\": testPhoneNumber\r",
                  "    },\r",
                  "    \"unauthorized_request\": null  // Simulate request without authorization\r",
                  "};\r",
                  "\r",
                  "let testCase = pm.environment.get(\"testCase\") || \"valid_request\";\r",
                  "\r",
                  "// ✅ Store the selected test case payload as the request body (except for unauthorized request)\r",
                  "if (testCase !== \"unauthorized_request\") {\r",
                  "    pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                  "} else {\r",
                  "    pm.request.headers.remove(\"Authorization\"); // Simulate unauthorized request\r",
                  "}\r",
                  "\r",
                  "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                  "\r",
                  "console.log(`Running test case: ${testCase}`, testCases[testCase]);\r",
                  ""
                ],
                "_lastExecutionId": "a9c4de27-37cf-46b1-bc9c-dcf87b3490a3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ed7df556-8048-4853-94c0-cfdaa98606fc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                  "\r",
                  "// Expected status codes\r",
                  "const expectedStatus = {\r",
                  "    \"valid_request\": 200,\r",
                  "    \"missing_firstName\": 400,\r",
                  "    \"missing_lastName\": 400,\r",
                  "    \"missing_phone\": 400,\r",
                  "    \"duplicate_phone\": 409,\r",
                  "    \"invalid_phone_format\": 400,\r",
                  "    \"sql_injection\": 400,\r",
                  "    \"long_names\": 400,\r",
                  "    \"special_characters\": 400\r",
                  "};\r",
                  "\r",
                  "// ✅ Status Code Validation\r",
                  "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                  "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                  "});\r",
                  "\r",
                  "// ✅ Success Case\r",
                  "if (pm.response.code === 200) {\r",
                  "    pm.test(\"Success flag should be true\", function () {\r",
                  "        pm.expect(response.success).to.eql(true);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Verify that response message confirms update\", function () {\r",
                  "        pm.expect(response.message).to.match(/updated successfully/i);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Response time should be < 500ms\", function () {\r",
                  "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "    });\r",
                  "\r",
                  "} else {\r",
                  "    // ✅ Error Handling for each test case\r",
                  "    pm.test(\"Response contains an error message\", function () {\r",
                  "        pm.expect(response).to.have.property(\"error\");\r",
                  "        pm.expect(response.error).to.be.a(\"string\");\r",
                  "    });\r",
                  "\r",
                  "    const errorMessages = {\r",
                  "        \"missing_firstName\": /missing.*first name/i,\r",
                  "        \"missing_lastName\": /missing.*last name/i,\r",
                  "        \"missing_phone\": /missing.*phone/i,\r",
                  "        \"duplicate_phone\": /already exists|duplicate phone/i,\r",
                  "        \"invalid_phone_format\": /invalid.*phone/i,\r",
                  "        \"special_characters\": /invalid.*characters/i\r",
                  "    };\r",
                  "\r",
                  "    if (errorMessages[testCase]) {\r",
                  "        pm.test(`Error message should match expected pattern for ${testCase}`, function () {\r",
                  "            pm.expect(response.error).to.match(errorMessages[testCase]);\r",
                  "        });\r",
                  "    }\r",
                  "}\r",
                  ""
                ],
                "_lastExecutionId": "b6f1bf16-5419-4be8-97af-ab4b2e4b43d0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "user"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Test-Case",
              "value": "valid_request"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImE1OTVhZTZjLWFiNDYtNGI4YS04NGE1LWZmNTBmM2ZlNWMyYiIsImlhdCI6MTc0NzA2MzA4NCwiZXhwIjoxNzQ3MjM1ODg0fQ.aBzNRTt-22YRBY6jkLfgYyTp3aMymLgYVWWHpqvklW0",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "54ed42e0-1dad-4973-8f93-b783464b0d30",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "63",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\"firstName\":\"Thomas\",\"lastName\":\"Rodri\",\"phone\":\"08138532342\"}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImE1OTVhZTZjLWFiNDYtNGI4YS04NGE1LWZmNTBmM2ZlNWMyYiIsImlhdCI6MTc0NzA2MzA4NCwiZXhwIjoxNzQ3MjM1ODg0fQ.aBzNRTt-22YRBY6jkLfgYyTp3aMymLgYVWWHpqvklW0",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "774fd75b-1083-4bb0-9116-aac92f258ef8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:05 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "844"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              32,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              46,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              97,
              53,
              57,
              53,
              97,
              101,
              54,
              99,
              45,
              97,
              98,
              52,
              54,
              45,
              52,
              98,
              56,
              97,
              45,
              56,
              52,
              97,
              53,
              45,
              102,
              102,
              53,
              48,
              102,
              51,
              102,
              101,
              53,
              99,
              50,
              98,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              104,
              111,
              109,
              97,
              115,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              82,
              111,
              100,
              114,
              105,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              115,
              111,
              110,
              32,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              50,
              52,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              48,
              56,
              49,
              51,
              56,
              53,
              51,
              50,
              51,
              52,
              50,
              34,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              110,
              102,
              118,
              67,
              108,
              89,
              67,
              65,
              109,
              51,
              120,
              90,
              103,
              78,
              51,
              77,
              48,
              66,
              77,
              119,
              111,
              65,
              36,
              74,
              97,
              47,
              48,
              98,
              119,
              98,
              116,
              72,
              75,
              54,
              109,
              81,
              90,
              74,
              79,
              85,
              83,
              65,
              54,
              69,
              98,
              66,
              68,
              81,
              72,
              79,
              99,
              78,
              81,
              117,
              55,
              108,
              85,
              72,
              67,
              76,
              50,
              74,
              52,
              57,
              80,
              119,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              49,
              50,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              48,
              51,
              46,
              55,
              52,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              49,
              50,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              48,
              53,
              46,
              57,
              50,
              50,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              49,
              50,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              48,
              52,
              46,
              50,
              48,
              52,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 91,
          "responseSize": 844
        },
        "id": "0cb85dc3-7dc7-48b8-b2fc-fa82cb742732",
        "assertions": [
          {
            "assertion": "[valid_request] Status should be 200",
            "skipped": false
          },
          {
            "assertion": "Success flag should be true",
            "skipped": false
          },
          {
            "assertion": "Verify that response message confirms update",
            "skipped": false
          },
          {
            "assertion": "Response time should be < 500ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "280b0a9a-74d1-4fdc-910f-8af5fdc86500",
          "length": 40,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e08e3446-a93a-4601-94c7-86f4e9edf037"
        },
        "item": {
          "id": "67a105e8-090a-457d-992b-cceb2c18a484",
          "name": "delete user",
          "request": {
            "url": {
              "path": [
                "user"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{authToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "92c7a403-7dd5-45e0-aadc-b6787e37c1ac",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Define test cases with different scenarios\r",
                  "const testCases = {\r",
                  "    \"valid_request\": {}, // No special changes; uses valid token\r",
                  "    \"missing_token\": { token: \"\" }, // Simulate a request with no token\r",
                  "    \"invalid_token\": { token: \"invalid_token_value\" }, // Simulate an expired/invalid token\r",
                  "    \"non_existent_user\": { token: pm.environment.get(\"valid.token\") } // Valid token, but user does not exist\r",
                  "};\r",
                  "\r",
                  "// ✅ Get the current test case (default: valid_request)\r",
                  "let testCase = pm.environment.get(\"testCase\") || \"valid_request\";\r",
                  "let testData = testCases[testCase];\r",
                  "\r",
                  "// ✅ Set the authorization token dynamically\r",
                  "if (testData.token !== undefined) {\r",
                  "    pm.request.headers.upsert({ key: \"Authorization\", value: `Bearer ${testData.token}` });\r",
                  "} else {\r",
                  "    pm.request.headers.upsert({ key: \"Authorization\", value: `Bearer ${pm.environment.get(\"valid.token\")}` });\r",
                  "}\r",
                  "\r",
                  "// ✅ Set test case header for tracking\r",
                  "pm.request.headers.upsert({ key: \"Test-Case\", value: testCase });\r",
                  "\r",
                  "// ✅ Log the test case for debugging\r",
                  "console.log(`Running test case: ${testCase}`, testData);\r",
                  ""
                ],
                "_lastExecutionId": "eba63cbd-aab2-4ad7-8535-fa07aa5fa79d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "10774409-95a3-4250-86c8-b8644b7d34b5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Parse response JSON safely\r",
                  "let response = {};\r",
                  "try {\r",
                  "    response = pm.response.json();\r",
                  "} catch (e) {\r",
                  "    console.error(\"Response is not in JSON format\", e);\r",
                  "}\r",
                  "\r",
                  "// ✅ Retrieve test case from request headers or environment\r",
                  "let testCase = pm.request.headers.get(\"Test-Case\") || pm.environment.get(\"testCase\");\r",
                  "\r",
                  "// ✅ Define expected status codes\r",
                  "const expectedStatus = {\r",
                  "    \"valid_request\": 200,\r",
                  "    \"missing_token\": 401,\r",
                  "    \"invalid_token\": 403,\r",
                  "    \"non_existent_user\": 404\r",
                  "};\r",
                  "\r",
                  "// ✅ Log test case for debugging\r",
                  "console.log(`Running test case: ${testCase}`);\r",
                  "\r",
                  "// ✅ Validate the status code\r",
                  "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                  "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                  "});\r",
                  "\r",
                  "// ✅ Test Case: Successful User Deletion (200 OK)\r",
                  "pm.test(\"[valid_request] User Account should be deleted successfully\", function () {\r",
                  "    if (testCase === \"valid_request\") {\r",
                  "        pm.expect(response.success).to.eql(true);\r",
                  "        pm.expect(response.message).to.eql(\"Account deleted successfully\");\r",
                  "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// ✅ Test Case: Missing Access Token (401 Unauthorized)\r",
                  "pm.test(\"[missing_token] Request should fail due to missing token\", function () {\r",
                  "    if (testCase === \"missing_token\") {\r",
                  "        pm.expect(response).to.have.property(\"error\");\r",
                  "        pm.expect(response.error).to.match(/missing.*token/i);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// ✅ Test Case: Invalid or Expired Token (403 Forbidden)\r",
                  "pm.test(\"[invalid_token] Request should fail due to invalid token\", function () {\r",
                  "    if (testCase === \"invalid_token\") {\r",
                  "        pm.expect(response).to.have.property(\"error\");\r",
                  "        pm.expect(response.error).to.match(/invalid|expired.*token/i);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// ✅ Test Case: Non-Existent User (404 Not Found)\r",
                  "pm.test(\"[non_existent_user] Request should fail when the user does not exist\", function () {\r",
                  "    if (testCase === \"non_existent_user\") {\r",
                  "        pm.expect(response).to.have.property(\"error\");\r",
                  "        pm.expect(response.error).to.match(/user does not exist/i);\r",
                  "    }\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "e6454b78-b3e4-49ae-a8dc-d127ac08d62f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "user"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Test-Case",
              "value": "valid_request"
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImE1OTVhZTZjLWFiNDYtNGI4YS04NGE1LWZmNTBmM2ZlNWMyYiIsImlhdCI6MTc0NzA2MzA4NCwiZXhwIjoxNzQ3MjM1ODg0fQ.aBzNRTt-22YRBY6jkLfgYyTp3aMymLgYVWWHpqvklW0",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "42aba02b-74fd-4955-b9fb-fd76ae49472c",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImE1OTVhZTZjLWFiNDYtNGI4YS04NGE1LWZmNTBmM2ZlNWMyYiIsImlhdCI6MTc0NzA2MzA4NCwiZXhwIjoxNzQ3MjM1ODg0fQ.aBzNRTt-22YRBY6jkLfgYyTp3aMymLgYVWWHpqvklW0",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "cb6dbcbe-cac6-4bf7-bc66-5dbba11634e0",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:06 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "57"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              99,
              99,
              111,
              117,
              110,
              116,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 90,
          "responseSize": 57
        },
        "id": "67a105e8-090a-457d-992b-cceb2c18a484",
        "assertions": [
          {
            "assertion": "[valid_request] Status should be 200",
            "skipped": false
          },
          {
            "assertion": "[valid_request] User Account should be deleted successfully",
            "skipped": false
          },
          {
            "assertion": "[missing_token] Request should fail due to missing token",
            "skipped": false
          },
          {
            "assertion": "[invalid_token] Request should fail due to invalid token",
            "skipped": false
          },
          {
            "assertion": "[non_existent_user] Request should fail when the user does not exist",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "848c4dfc-158d-4cf1-b262-22419425803a",
          "length": 40,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c8ecca58-3f68-430a-8cdb-ed965cc7574f"
        },
        "item": {
          "id": "dcfec899-1eeb-4faf-ba04-31ddaba07d92",
          "name": "Contact us notifications",
          "request": {
            "url": {
              "path": [
                "notifications",
                "contact-us"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\":\"tesade9636@godsi.com\",\n    \"name\":\"jondoe\",\n    \"message\":\"hello tomorrow\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b63228d3-10fb-4d27-91f8-89102aaa82d5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Define test cases with various input scenarios\r",
                  "const testCases = {\r",
                  "    \"valid_request\": { \r",
                  "        \"name\": \"John Doe\",\r",
                  "        \"email\": pm.environment.get(\"reg.email\") || \"johndoe@example.com\",\r",
                  "        \"subject\": \"Inquiry about services\",\r",
                  "        \"message\": \"I would like to know more about your offerings.\"\r",
                  "    },\r",
                  "    \"missing_name\": { \r",
                  "        \"email\": \"johndoe@example.com\",\r",
                  "        \"subject\": \"Inquiry about services\",\r",
                  "        \"message\": \"I would like to know more about your offerings.\"\r",
                  "    },\r",
                  "    \"missing_email\": { \r",
                  "        \"name\": \"John Doe\",\r",
                  "        \"subject\": \"Inquiry about services\",\r",
                  "        \"message\": \"I would like to know more about your offerings.\"\r",
                  "    },\r",
                  "    \"invalid_email_format\": { \r",
                  "        \"name\": \"John Doe\",\r",
                  "        \"email\": \"invalid-email\",\r",
                  "        \"subject\": \"Inquiry about services\",\r",
                  "        \"message\": \"I would like to know more about your offerings.\"\r",
                  "    },\r",
                  "    \"missing_subject\": { \r",
                  "        \"name\": \"John Doe\",\r",
                  "        \"email\": \"johndoe@example.com\",\r",
                  "        \"message\": \"I would like to know more about your offerings.\"\r",
                  "    },\r",
                  "    \"missing_message\": { \r",
                  "        \"name\": \"John Doe\",\r",
                  "        \"email\": \"johndoe@example.com\",\r",
                  "        \"subject\": \"Inquiry about services\"\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "// ✅ Get the current test case from environment (default to valid_request)\r",
                  "let testCase = pm.environment.get(\"testCase\") || \"valid_request\";\r",
                  "\r",
                  "// ✅ Store the selected test case payload as the request body\r",
                  "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                  "\r",
                  "// ✅ Set request headers for tracking test cases\r",
                  "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                  "\r",
                  "// ✅ Log the test case for debugging in Postman Console\r",
                  "console.log(`Running test case: ${testCase}`, testCases[testCase]);\r",
                  ""
                ],
                "_lastExecutionId": "1e4c2601-efe0-48ff-afc8-203e4b4e4ebc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3df5c5bb-8210-43c7-ad53-66483a8fd569",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Parse JSON response\r",
                  "let response = pm.response.json();\r",
                  "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                  "\r",
                  "// ✅ Expected status codes for each test case\r",
                  "const expectedStatus = {\r",
                  "    \"valid_request\": 200,\r",
                  "    \"missing_name\": 400,\r",
                  "    \"missing_email\": 400,\r",
                  "    \"invalid_email_format\": 400,\r",
                  "    \"missing_message\": 400\r",
                  "};\r",
                  "\r",
                  "// ✅ Validate HTTP status code\r",
                  "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                  "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                  "});\r",
                  "\r",
                  "// ✅ Success Case Handling (200 OK)\r",
                  "if (pm.response.code === 200) {\r",
                  "    pm.test(\"Verify that the success field is true\", function () {\r",
                  "        pm.expect(response.success).to.eql(true);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Check that the message field confirms successful submission\", function () {\r",
                  "        pm.expect(response.message).to.include(\"successfully\");\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Validate response time is below 500ms\", function () {\r",
                  "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "    });\r",
                  "\r",
                  "} else {\r",
                  "    // ✅ Error Case Handling\r",
                  "    pm.test(\"Response contains an error message\", function () {\r",
                  "        pm.expect(response).to.have.property(\"error\");\r",
                  "        pm.expect(response.error).to.be.a(\"string\");\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Specific Error Messages Per Test Case\r",
                  "    const errorMessages = {\r",
                  "        \"missing_name\": \"Name is required\",\r",
                  "        \"missing_email\": \"Email is required\",\r",
                  "        \"invalid_email_format\": \"Invalid email format\",\r",
                  "        \"missing_message\": \"Message is required\"\r",
                  "    };\r",
                  "\r",
                  "    if (errorMessages[testCase]) {\r",
                  "        pm.test(`Error message should mention '${errorMessages[testCase]}'`, function () {\r",
                  "            pm.expect(response.error).to.match(new RegExp(errorMessages[testCase], \"i\"));\r",
                  "        });\r",
                  "    }\r",
                  "}\r",
                  ""
                ],
                "_lastExecutionId": "e46672eb-040d-4caa-8864-dbe159545823"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "notifications",
              "contact-us"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Test-Case",
              "value": "valid_request"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "182a2c91-9639-424c-8ff8-c2fc921d6676",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "91",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"email\":\"tesade9636@godsi.com\",\n    \"name\":\"jondoe\",\n    \"message\":\"hello tomorrow\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "71cd9c7e-8e8b-4be6-839a-f6eaaf6b3792",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:06 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "67"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              111,
              110,
              116,
              97,
              99,
              116,
              32,
              117,
              115,
              32,
              102,
              111,
              114,
              109,
              32,
              115,
              117,
              98,
              109,
              105,
              116,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 213,
          "responseSize": 67
        },
        "id": "dcfec899-1eeb-4faf-ba04-31ddaba07d92",
        "assertions": [
          {
            "assertion": "[valid_request] Status should be 200",
            "skipped": false
          },
          {
            "assertion": "Verify that the success field is true",
            "skipped": false
          },
          {
            "assertion": "Check that the message field confirms successful submission",
            "skipped": false
          },
          {
            "assertion": "Validate response time is below 500ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "18ef7842-16d2-4b0a-8b0d-3b84c9ae1736",
          "length": 40,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "b72c4b6c-b7ac-45c9-8e34-6c3c27b3e3ec"
        },
        "item": {
          "id": "67a0b64a-e321-4e86-ae53-a7045e9aaa04",
          "name": "signin",
          "request": {
            "url": {
              "path": [
                "admin",
                "signin"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n     \"email\": \"testog@e-record.com\",\n    \"password\": \"Pass@12345\"\n}\n\n// {{ADMcurrentPayload}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6071d595-689d-444a-b87a-f65e1a2c2b11",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Ensure required environment variables exist\r",
                  "const adminEmail = (pm.environment.get(\"admin.email\") || \"testog@e-record.com\").trim();\r",
                  "const adminPassword = (pm.environment.get(\"admin.password\") || \"Pass@12345\").trim();\r",
                  "\r",
                  "if (!adminEmail || !adminPassword) {\r",
                  "    console.warn(\"⚠️ Warning: 'admin.email' or 'admin.password' is missing in environment variables.\");\r",
                  "}\r",
                  "\r",
                  "// Define test cases with sanitized values\r",
                  "const testCases = {\r",
                  "    \"valid_request\": {\r",
                  "        \"email\": adminEmail,\r",
                  "        \"password\": adminPassword\r",
                  "    },\r",
                  "    \"missing_email\": {\r",
                  "        \"email\": \"\",\r",
                  "        \"password\": adminPassword\r",
                  "    },\r",
                  "    \"missing_password\": {\r",
                  "        \"email\": adminEmail,\r",
                  "        \"password\": \"\"\r",
                  "    },\r",
                  "    \"invalid_credentials\": {\r",
                  "        \"email\": \"invalid@admin.com\",\r",
                  "        \"password\": \"wrongpassword123\"\r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "// Get test case from environment or use default\r",
                  "let testCase = (pm.environment.get(\"testCase\") || \"valid_request\").trim();\r",
                  "\r",
                  "if (!testCases.hasOwnProperty(testCase)) {\r",
                  "    console.error(`❌ Error: Test case '${testCase}' not found! Defaulting to 'valid_request'.`);\r",
                  "    testCase = \"valid_request\";\r",
                  "}\r",
                  "\r",
                  "// Set and verify the test payload\r",
                  "const requestBody = JSON.stringify(testCases[testCase]); // Ensure proper JSON format\r",
                  "pm.environment.set(\"currentPayload\", requestBody);\r",
                  "\r",
                  "// Debug output\r",
                  "console.log(`✅ Running test case: ${testCase}`, testCases[testCase]);\r",
                  "console.log(\"🟢 Final request payload stored in environment:\", pm.environment.get(\"currentPayload\"));\r",
                  ""
                ],
                "_lastExecutionId": "244b5dba-00f9-4d53-b569-64ca8b09aaa2"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6e419be5-c2b6-4f55-958c-f7f19b9f0ab1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Parse JSON response\r",
                  "let response;\r",
                  "try {\r",
                  "    response = pm.response.json();\r",
                  "} catch (e) {\r",
                  "    pm.test(\"Response should be valid JSON\", () => {\r",
                  "        pm.expect.fail(\"Response is not in JSON format\");\r",
                  "    });\r",
                  "}\r",
                  "\r",
                  "// Capture the test case from headers\r",
                  "let testCase = pm.request.headers.get(\"Test-Case\") || \"valid_request\";\r",
                  "\r",
                  "// Define expected status codes for test cases\r",
                  "const expectedStatus = {\r",
                  "    \"valid_request\": 200,\r",
                  "    \"missing_email\": 400,\r",
                  "    \"missing_password\": 400,\r",
                  "    \"invalid_credentials\": 401\r",
                  "};\r",
                  "\r",
                  "// Ensure status code is as expected\r",
                  "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, () => {\r",
                  "    pm.expect(pm.response.code).to.eql(expectedStatus[testCase]);\r",
                  "});\r",
                  "\r",
                  "// Success Case: 200 OK\r",
                  "if (pm.response.code === 200) {\r",
                  "    pm.test(\"Success should be true\", () => {\r",
                  "        pm.expect(response.success).to.eql(true);\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Response contains auth token\", () => {\r",
                  "        pm.expect(response.data).to.have.property(\"token\");\r",
                  "    });\r",
                  "\r",
                  "    pm.test(\"Store auth token for future requests\", () => {\r",
                  "        pm.environment.set(\"adminAuthToken\", response.data.token);\r",
                  "    });\r",
                  "}\r",
                  "\r",
                  "// Error Case: Response should contain an error message\r",
                  "if (pm.response.code !== 200) {\r",
                  "    pm.test(\"Response should contain an error message\", () => {\r",
                  "        pm.expect(response).to.have.property(\"error\");\r",
                  "        pm.expect(response.error).to.be.a(\"string\");\r",
                  "    });\r",
                  "\r",
                  "    // Specific Error Messages\r",
                  "    if (testCase === \"missing_email\") {\r",
                  "        pm.test(\"Error message should mention missing email\", () => {\r",
                  "            pm.expect(response.error).to.match(/missing.*email/i);\r",
                  "        });\r",
                  "    } else if (testCase === \"missing_password\") {\r",
                  "        pm.test(\"Error message should mention missing password\", () => {\r",
                  "            pm.expect(response.error).to.match(/missing.*password/i);\r",
                  "        });\r",
                  "    } else if (testCase === \"invalid_credentials\") {\r",
                  "        pm.test(\"Error message should indicate invalid credentials\", () => {\r",
                  "            pm.expect(response.error).to.match(/invalid.*credentials/i);\r",
                  "        });\r",
                  "    }\r",
                  "}\r",
                  "\r",
                  "// Response time check\r",
                  "pm.test(\"Response time should be under 500ms\", () => {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "13d71a59-487c-4925-b536-143c35592eb0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "admin",
              "signin"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3c71b1fb-947d-4029-b563-271c65aa1747",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "71",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n     \"email\": \"testog@e-record.com\",\n    \"password\": \"Pass@12345\"\n}\n\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "5554ce84-fd9f-4c07-887a-898236de669f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:06 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "397"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              32,
              115,
              105,
              103,
              110,
              32,
              105,
              110,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              101,
              121,
              74,
              104,
              98,
              71,
              99,
              105,
              79,
              105,
              74,
              73,
              85,
              122,
              73,
              49,
              78,
              105,
              73,
              115,
              73,
              110,
              82,
              53,
              99,
              67,
              73,
              54,
              73,
              107,
              112,
              88,
              86,
              67,
              74,
              57,
              46,
              101,
              121,
              74,
              112,
              90,
              67,
              73,
              54,
              73,
              109,
              82,
              109,
              77,
              87,
              74,
              107,
              79,
              68,
              74,
              109,
              76,
              84,
              108,
              105,
              77,
              50,
              81,
              116,
              78,
              68,
              81,
              48,
              78,
              67,
              49,
              105,
              79,
              71,
              70,
              104,
              76,
              84,
              107,
              121,
              78,
              109,
              70,
              104,
              89,
              122,
              82,
              109,
              79,
              87,
              70,
              106,
              90,
              83,
              73,
              115,
              73,
              109,
              108,
              104,
              100,
              67,
              73,
              54,
              77,
              84,
              99,
              48,
              78,
              122,
              65,
              50,
              77,
              122,
              65,
              52,
              78,
              105,
              119,
              105,
              90,
              88,
              104,
              119,
              73,
              106,
              111,
              120,
              78,
              122,
              81,
              51,
              77,
              106,
              77,
              49,
              79,
              68,
              103,
              50,
              102,
              81,
              46,
              72,
              75,
              55,
              66,
              72,
              45,
              80,
              49,
              122,
              114,
              85,
              48,
              85,
              86,
              65,
              110,
              103,
              103,
              90,
              65,
              88,
              89,
              45,
              56,
              45,
              117,
              52,
              73,
              57,
              79,
              74,
              113,
              107,
              105,
              45,
              115,
              99,
              73,
              79,
              106,
              70,
              75,
              111,
              34,
              44,
              34,
              101,
              120,
              112,
              105,
              114,
              101,
              115,
              73,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              49,
              51,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              48,
              54,
              46,
              52,
              48,
              50,
              90,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              34,
              58,
              123,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              111,
              103,
              64,
              101,
              45,
              114,
              101,
              99,
              111,
              114,
              100,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              79,
              106,
              97,
              121,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              106,
              97,
              121,
              34,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 93,
          "responseSize": 397
        },
        "id": "67a0b64a-e321-4e86-ae53-a7045e9aaa04",
        "assertions": [
          {
            "assertion": "[valid_request] Status should be 200",
            "skipped": false
          },
          {
            "assertion": "Success should be true",
            "skipped": false
          },
          {
            "assertion": "Response contains auth token",
            "skipped": false
          },
          {
            "assertion": "Store auth token for future requests",
            "skipped": false
          },
          {
            "assertion": "Response time should be under 500ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c98cb6c2-4318-4edf-a12e-06738797e70e",
          "length": 40,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "ed12c58c-920d-4eb3-a28c-b428c333b69f"
        },
        "item": {
          "id": "a0ee2bcd-a17f-4ad5-b9e6-a181638a6de7",
          "name": "dashboard",
          "request": {
            "url": {
              "path": [
                "admin",
                "dashboard"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f6efefb4-e801-4f0f-a8d3-fdc1f4ede7f6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Ensure response is in JSON format\r",
                  "pm.test(\"Response is valid JSON\", function () {\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "// Parse response JSON safely\r",
                  "let jsonData;\r",
                  "try {\r",
                  "    jsonData = pm.response.json();\r",
                  "} catch (e) {\r",
                  "    pm.test(\"Response is valid JSON\", function () {\r",
                  "        pm.expect(false).to.be.true; // Force failure if parsing fails\r",
                  "    });\r",
                  "}\r",
                  "\r",
                  "// Validate required fields in the response\r",
                  "pm.test(\"Response contains expected fields\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\");\r",
                  "    pm.expect(jsonData).to.have.property(\"message\");\r",
                  "    pm.expect(jsonData).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "// Ensure `data.allUsers` exists and is an array before accessing it\r",
                  "pm.test(\"allUsers array exists\", function () {\r",
                  "    pm.expect(jsonData.data).to.have.property(\"allUsers\");\r",
                  "    pm.expect(jsonData.data.allUsers).to.be.an(\"array\").that.is.not.empty;\r",
                  "});\r",
                  "\r",
                  "// Validate user data while excluding sensitive fields\r",
                  "if (jsonData.data.allUsers.length > 0) {\r",
                  "    let userData = jsonData.data.allUsers[0];\r",
                  "\r",
                  "    pm.test(\"User data contains required fields\", function () {\r",
                  "        pm.expect(userData).to.have.property(\"id\");\r",
                  "        pm.expect(userData).to.have.property(\"email\");\r",
                  "        pm.expect(userData).to.have.property(\"firstName\");\r",
                  "        pm.expect(userData).to.have.property(\"lastName\");\r",
                  "        pm.expect(userData).to.have.property(\"password\");\r",
                  "    \r",
                  "    });\r",
                  "} else {\r",
                  "    pm.test(\"allUsers is empty\", function () {\r",
                  "        pm.expect(false).to.be.true; // Fails if users list is unexpectedly empty\r",
                  "    });\r",
                  "}\r",
                  "\r",
                  "// Validate response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "7347d1ea-560b-4935-aec9-d7db5aa2cd65"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "admin",
              "dashboard"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d52b1bfd-0ac7-4ded-ad5a-626182c46251",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "4e54a1c0-a20d-4944-a8b9-0c4491a4ee02",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:06 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "24636"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              32,
              100,
              97,
              115,
              104,
              98,
              111,
              97,
              114,
              100,
              32,
              102,
              101,
              116,
              99,
              104,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              46,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              97,
              108,
              108,
              85,
              115,
              101,
              114,
              115,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              100,
              56,
              49,
              48,
              48,
              102,
              101,
              45,
              48,
              52,
              98,
              50,
              45,
              52,
              101,
              98,
              97,
              45,
              56,
              98,
              57,
              56,
              45,
              51,
              49,
              48,
              52,
              97,
              97,
              56,
              48,
              53,
              57,
              50,
              99,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              121,
              100,
              101,
              108,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              114,
              105,
              101,
              100,
              114,
              105,
              99,
              104,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              121,
              100,
              101,
              108,
              32,
              70,
              114,
              105,
              101,
              100,
              114,
              105,
              99,
              104,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              57,
              56,
              50,
              49,
              51,
              64,
              101,
              45,
              114,
              101,
              99,
              111,
              114,
              100,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              76,
              111,
              69,
              55,
              118,
              72,
              107,
              56,
              89,
              56,
              82,
              88,
              88,
              86,
              66,
              99,
              116,
              86,
              107,
              49,
              49,
              65,
              36,
              79,
              122,
              120,
              51,
              79,
              100,
              57,
              76,
              101,
              118,
              101,
              107,
              103,
              110,
              115,
              74,
              69,
              117,
              70,
              84,
              97,
              122,
              119,
              72,
              74,
              104,
              68,
              43,
              119,
              108,
              118,
              116,
              117,
              121,
              80,
              112,
              86,
              97,
              43,
              104,
              49,
              66,
              56,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              48,
              55,
              58,
              49,
              56,
              58,
              50,
              50,
              46,
              53,
              54,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              48,
              55,
              58,
              49,
              56,
              58,
              50,
              50,
              46,
              53,
              54,
              48,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              99,
              102,
              49,
              50,
              56,
              51,
              57,
              97,
              45,
              55,
              99,
              49,
              101,
              45,
              52,
              99,
              53,
              99,
              45,
              57,
              48,
              99,
              97,
              45,
              102,
              102,
              48,
              97,
              57,
              53,
              101,
              56,
              53,
              54,
              52,
              49,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              121,
              100,
              101,
              108,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              114,
              105,
              101,
              100,
              114,
              105,
              99,
              104,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              121,
              100,
              101,
              108,
              32,
              70,
              114,
              105,
              101,
              100,
              114,
              105,
              99,
              104,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              52,
              54,
              53,
              57,
              52,
              64,
              101,
              45,
              114,
              101,
              99,
              111,
              114,
              100,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              122,
              74,
              48,
              48,
              89,
              115,
              83,
              116,
              72,
              70,
              104,
              67,
              55,
              113,
              82,
              111,
              84,
              81,
              100,
              73,
              122,
              119,
              36,
              87,
              83,
              114,
              55,
              51,
              108,
              111,
              77,
              54,
              43,
              110,
              100,
              65,
              90,
              101,
              102,
              70,
              77,
              52,
              77,
              56,
              75,
              78,
              48,
              68,
              66,
              77,
              53,
              52,
              106,
              49,
              57,
              114,
              114,
              108,
              98,
              105,
              120,
              108,
              75,
              109,
              43,
              85,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              48,
              55,
              58,
              50,
              51,
              58,
              48,
              55,
              46,
              56,
              57,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              48,
              55,
              58,
              50,
              51,
              58,
              48,
              55,
              46,
              56,
              57,
              51,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              98,
              99,
              50,
              48,
              48,
              49,
              99,
              45,
              97,
              54,
              54,
              97,
              45,
              52,
              56,
              52,
              53,
              45,
              56,
              48,
              48,
              98,
              45,
              99,
              102,
              97,
              97,
              49,
              50,
              57,
              56,
              57,
              55,
              54,
              52,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              121,
              100,
              101,
              108,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              114,
              105,
              101,
              100,
              114,
              105,
              99,
              104,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              121,
              100,
              101,
              108,
              32,
              70,
              114,
              105,
              101,
              100,
              114,
              105,
              99,
              104,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              50,
              53,
              52,
              56,
              56,
              64,
              101,
              45,
              114,
              101,
              99,
              111,
              114,
              100,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              55,
              121,
              85,
              83,
              85,
              81,
              122,
              83,
              43,
              43,
              81,
              67,
              84,
              121,
              107,
              74,
              47,
              80,
              51,
              100,
              103,
              119,
              36,
              97,
              90,
              110,
              110,
              75,
              69,
              89,
              99,
              68,
              114,
              43,
              50,
              78,
              52,
              109,
              49,
              50,
              90,
              100,
              90,
              98,
              85,
              49,
              83,
              111,
              108,
              86,
              72,
              66,
              57,
              86,
              81,
              57,
              99,
              76,
              121,
              67,
              48,
              97,
              107,
              118,
              122,
              73,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              48,
              55,
              58,
              51,
              49,
              58,
              51,
              53,
              46,
              57,
              57,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              48,
              55,
              58,
              51,
              49,
              58,
              51,
              53,
              46,
              57,
              57,
              51,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              55,
              51,
              97,
              97,
              50,
              99,
              52,
              57,
              45,
              49,
              102,
              102,
              57,
              45,
              52,
              99,
              102,
              51,
              45,
              98,
              51,
              52,
              52,
              45,
              100,
              50,
              56,
              98,
              52,
              98,
              98,
              49,
              48,
              97,
              100,
              102,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              104,
              117,
              107,
              111,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              102,
              101,
              109,
              101,
              110,
              97,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              97,
              114,
              97,
              104,
              32,
              74,
              101,
              115,
              115,
              105,
              99,
              97,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              52,
              52,
              52,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              48,
              56,
              49,
              51,
              49,
              49,
              52,
              52,
              49,
              49,
              48,
              34,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              118,
              74,
              43,
              102,
              108,
              104,
              83,
              48,
              85,
              99,
              118,
              89,
              120,
              43,
              69,
              113,
              56,
              115,
              43,
              101,
              71,
              103,
              36,
              122,
              112,
              113,
              107,
              47,
              70,
              57,
              54,
              108,
              67,
              71,
              114,
              100,
              78,
              43,
              76,
              87,
              100,
              105,
              68,
              85,
              84,
              116,
              102,
              51,
              78,
              69,
              82,
              80,
              106,
              56,
              122,
              81,
              89,
              112,
              71,
              51,
              79,
              43,
              43,
              53,
              112,
              65,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              51,
              58,
              52,
              54,
              58,
              53,
              55,
              46,
              57,
              49,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              55,
              58,
              52,
              53,
              58,
              52,
              51,
              46,
              56,
              51,
              48,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              54,
              58,
              51,
              55,
              58,
              50,
              53,
              46,
              50,
              51,
              55,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              57,
              49,
              53,
              49,
              100,
              56,
              49,
              45,
              101,
              54,
              55,
              53,
              45,
              52,
              53,
              97,
              48,
              45,
              56,
              55,
              100,
              49,
              45,
              101,
              99,
              48,
              101,
              57,
              100,
              101,
              98,
              100,
              102,
              48,
              51,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              121,
              100,
              101,
              108,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              114,
              105,
              101,
              100,
              114,
              105,
              99,
              104,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              121,
              100,
              101,
              108,
              32,
              70,
              114,
              105,
              101,
              100,
              114,
              105,
              99,
              104,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              52,
              51,
              52,
              56,
              50,
              64,
              101,
              45,
              114,
              101,
              99,
              111,
              114,
              100,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              118,
              110,
              87,
              79,
              67,
              67,
              81,
              99,
              111,
              89,
              76,
              118,
              53,
              76,
              83,
              113,
              83,
              66,
              100,
              51,
              117,
              119,
              36,
              82,
              49,
              110,
              86,
              49,
              49,
              65,
              114,
              88,
              83,
              115,
              121,
              97,
              112,
              69,
              99,
              116,
              102,
              53,
              67,
              107,
              85,
              48,
              87,
              120,
              102,
              55,
              43,
              75,
              99,
              108,
              75,
              65,
              99,
              86,
              103,
              48,
              52,
              57,
              101,
              78,
              43,
              52,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              48,
              57,
              58,
              50,
              54,
              58,
              53,
              57,
              46,
              55,
              51,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              48,
              57,
              58,
              51,
              56,
              58,
              49,
              54,
              46,
              50,
              55,
              48,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              48,
              57,
              58,
              51,
              56,
              58,
              49,
              54,
              46,
              50,
              55,
              48,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              50,
              97,
              55,
              102,
              101,
              101,
              98,
              100,
              45,
              48,
              57,
              55,
              53,
              45,
              52,
              97,
              100,
              97,
              45,
              97,
              56,
              52,
              55,
              45,
              53,
              52,
              48,
              97,
              50,
              56,
              49,
              55,
              53,
              101,
              48,
              55,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              104,
              114,
              105,
              115,
              116,
              111,
              112,
              104,
              101,
              114,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              114,
              97,
              110,
              100,
              111,
              109,
              76,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              104,
              114,
              105,
              115,
              116,
              111,
              112,
              104,
              101,
              114,
              32,
              114,
              97,
              110,
              100,
              111,
              109,
              76,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              55,
              51,
              48,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              87,
              74,
              47,
              76,
              49,
              97,
              99,
              87,
              81,
              119,
              86,
              105,
              80,
              104,
              47,
              105,
              76,
              51,
              85,
              121,
              102,
              103,
              36,
              43,
              105,
              118,
              88,
              97,
              79,
              99,
              74,
              101,
              86,
              51,
              108,
              76,
              78,
              122,
              82,
              71,
              110,
              90,
              48,
              114,
              83,
              111,
              49,
              73,
              65,
              86,
              76,
              90,
              79,
              102,
              102,
              105,
              112,
              78,
              80,
              49,
              73,
              70,
              87,
              115,
              118,
              89,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              48,
              57,
              58,
              53,
              55,
              58,
              49,
              54,
              46,
              53,
              50,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              48,
              57,
              58,
              53,
              55,
              58,
              49,
              54,
              46,
              53,
              50,
              49,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              51,
              51,
              53,
              101,
              57,
              55,
              55,
              45,
              55,
              101,
              49,
              52,
              45,
              52,
              98,
              99,
              52,
              45,
              97,
              99,
              101,
              56,
              45,
              52,
              100,
              52,
              98,
              57,
              54,
              51,
              98,
              56,
              97,
              100,
              51,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              114,
              103,
              97,
              114,
              101,
              116,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              114,
              103,
              97,
              114,
              101,
              116,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              114,
              103,
              97,
              114,
              101,
              116,
              32,
              77,
              97,
              114,
              103,
              97,
              114,
              101,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              50,
              57,
              50,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              105,
              67,
              73,
              97,
              72,
              112,
              111,
              73,
              67,
              55,
              55,
              43,
              108,
              120,
              54,
              120,
              105,
              86,
              54,
              85,
              97,
              81,
              36,
              48,
              89,
              47,
              90,
              105,
              116,
              116,
              83,
              71,
              82,
              98,
              107,
              77,
              74,
              70,
              70,
              112,
              79,
              106,
              72,
              82,
              118,
              73,
              107,
              50,
              99,
              107,
              100,
              49,
              69,
              112,
              88,
              90,
              114,
              78,
              102,
              65,
              109,
              115,
              43,
              109,
              51,
              65,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              48,
              57,
              58,
              53,
              57,
              58,
              51,
              50,
              46,
              57,
              50,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              48,
              57,
              58,
              53,
              57,
              58,
              51,
              50,
              46,
              57,
              50,
              50,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              57,
              48,
              101,
              97,
              55,
              99,
              97,
              50,
              45,
              49,
              98,
              52,
              98,
              45,
              52,
              99,
              101,
              56,
              45,
              57,
              102,
              51,
              51,
              45,
              55,
              56,
              102,
              56,
              54,
              101,
              102,
              57,
              48,
              101,
              52,
              49,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              101,
              116,
              116,
              121,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              108,
              105,
              122,
              97,
              98,
              101,
              116,
              104,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              101,
              116,
              116,
              121,
              32,
              69,
              108,
              105,
              122,
              97,
              98,
              101,
              116,
              104,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              53,
              57,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              102,
              99,
              67,
              112,
              79,
              109,
              80,
              65,
              114,
              106,
              117,
              85,
              71,
              74,
              77,
              118,
              110,
              116,
              48,
              118,
              115,
              81,
              36,
              104,
              50,
              54,
              89,
              99,
              75,
              50,
              52,
              121,
              88,
              116,
              112,
              74,
              99,
              110,
              78,
              109,
              116,
              109,
              54,
              108,
              112,
              67,
              89,
              69,
              74,
              105,
              114,
              52,
              103,
              102,
              99,
              43,
              52,
              69,
              98,
              50,
              111,
              120,
              87,
              99,
              51,
              111,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              50,
              48,
              58,
              49,
              50,
              58,
              53,
              54,
              46,
              52,
              54,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              50,
              48,
              58,
              49,
              51,
              58,
              48,
              52,
              46,
              53,
              51,
              57,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              50,
              48,
              58,
              49,
              51,
              58,
              48,
              52,
              46,
              53,
              51,
              56,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              51,
              102,
              99,
              57,
              51,
              97,
              56,
              100,
              45,
              51,
              54,
              98,
              102,
              45,
              52,
              49,
              99,
              99,
              45,
              97,
              48,
              52,
              56,
              45,
              97,
              98,
              54,
              102,
              101,
              100,
              50,
              97,
              52,
              57,
              57,
              99,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              115,
              101,
              112,
              104,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              97,
              110,
              105,
              101,
              108,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              115,
              101,
              112,
              104,
              32,
              68,
              97,
              110,
              105,
              101,
              108,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              52,
              57,
              57,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              85,
              78,
              108,
              54,
              82,
              105,
              122,
              99,
              65,
              82,
              119,
              115,
              111,
              97,
              112,
              73,
              121,
              68,
              117,
              72,
              98,
              65,
              36,
              48,
              87,
              78,
              122,
              86,
              85,
              97,
              67,
              79,
              117,
              79,
              56,
              54,
              111,
              72,
              109,
              68,
              56,
              100,
              57,
              117,
              122,
              68,
              57,
              119,
              85,
              110,
              65,
              117,
              57,
              113,
              99,
              72,
              113,
              52,
              71,
              50,
              103,
              84,
              77,
              52,
              100,
              111,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              48,
              49,
              58,
              52,
              50,
              46,
              54,
              55,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              50,
              48,
              58,
              50,
              56,
              46,
              53,
              49,
              49,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              50,
              48,
              58,
              50,
              56,
              46,
              53,
              49,
              49,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              50,
              51,
              50,
              51,
              48,
              48,
              54,
              56,
              45,
              99,
              54,
              57,
              53,
              45,
              52,
              57,
              49,
              50,
              45,
              56,
              99,
              56,
              99,
              45,
              54,
              51,
              50,
              51,
              99,
              99,
              56,
              97,
              98,
              57,
              50,
              53,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              114,
              103,
              97,
              114,
              101,
              116,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              82,
              111,
              98,
              101,
              114,
              116,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              114,
              103,
              97,
              114,
              101,
              116,
              32,
              82,
              111,
              98,
              101,
              114,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              51,
              53,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              49,
              49,
              84,
              48,
              78,
              82,
              74,
              87,
              111,
              76,
              111,
              76,
              75,
              70,
              90,
              74,
              99,
              49,
              53,
              47,
              48,
              81,
              36,
              54,
              87,
              49,
              97,
              98,
              51,
              47,
              107,
              49,
              78,
              105,
              117,
              88,
              109,
              66,
              85,
              55,
              55,
              67,
              54,
              122,
              119,
              70,
              78,
              69,
              100,
              98,
              76,
              122,
              121,
              87,
              43,
              51,
              121,
              88,
              67,
              120,
              57,
              117,
              108,
              83,
              122,
              81,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              50,
              49,
              58,
              50,
              54,
              46,
              49,
              51,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              50,
              49,
              58,
              52,
              57,
              46,
              50,
              51,
              50,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              50,
              49,
              58,
              52,
              57,
              46,
              50,
              51,
              48,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              101,
              99,
              55,
              51,
              50,
              51,
              52,
              102,
              45,
              53,
              52,
              49,
              57,
              45,
              52,
              57,
              53,
              51,
              45,
              56,
              53,
              53,
              98,
              45,
              50,
              99,
              52,
              99,
              50,
              49,
              51,
              48,
              55,
              98,
              54,
              55,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              105,
              102,
              121,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              106,
              97,
              121,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              105,
              102,
              121,
              32,
              79,
              106,
              97,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              111,
              106,
              64,
              101,
              45,
              114,
              101,
              99,
              111,
              114,
              100,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              83,
              78,
              70,
              73,
              121,
              51,
              72,
              76,
              81,
              57,
              110,
              101,
              73,
              99,
              81,
              69,
              75,
              67,
              122,
              111,
              80,
              119,
              36,
              105,
              56,
              51,
              88,
              43,
              113,
              83,
              86,
              82,
              47,
              101,
              113,
              65,
              87,
              111,
              104,
              118,
              48,
              73,
              79,
              114,
              120,
              65,
              115,
              114,
              57,
              74,
              76,
              116,
              110,
              56,
              84,
              52,
              53,
              75,
              112,
              102,
              100,
              77,
              99,
              56,
              54,
              65,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              50,
              54,
              46,
              51,
              54,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              50,
              54,
              46,
              51,
              54,
              49,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              55,
              49,
              53,
              52,
              53,
              99,
              55,
              55,
              45,
              56,
              48,
              49,
              56,
              45,
              52,
              57,
              101,
              102,
              45,
              98,
              57,
              99,
              97,
              45,
              101,
              97,
              50,
              50,
              98,
              102,
              51,
              48,
              50,
              57,
              54,
              52,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              97,
              116,
              114,
              105,
              99,
              105,
              97,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              97,
              110,
              105,
              101,
              108,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              97,
              116,
              114,
              105,
              99,
              105,
              97,
              32,
              68,
              97,
              110,
              105,
              101,
              108,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              52,
              53,
              52,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              122,
              67,
              80,
              69,
              67,
              97,
              113,
              121,
              53,
              110,
              67,
              103,
              113,
              83,
              109,
              43,
              71,
              101,
              52,
              53,
              73,
              103,
              36,
              88,
              81,
              119,
              52,
              113,
              119,
              86,
              103,
              106,
              66,
              111,
              50,
              121,
              51,
              121,
              52,
              51,
              114,
              107,
              69,
              121,
              90,
              76,
              67,
              71,
              72,
              54,
              101,
              113,
              116,
              121,
              122,
              72,
              110,
              90,
              109,
              115,
              43,
              110,
              66,
              71,
              100,
              119,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              51,
              48,
              58,
              53,
              53,
              46,
              55,
              50,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              51,
              48,
              58,
              53,
              53,
              46,
              55,
              50,
              49,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              101,
              55,
              98,
              97,
              49,
              100,
              51,
              50,
              45,
              48,
              100,
              56,
              101,
              45,
              52,
              52,
              57,
              50,
              45,
              97,
              101,
              101,
              98,
              45,
              53,
              53,
              57,
              52,
              99,
              48,
              98,
              97,
              49,
              97,
              57,
              49,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              105,
              110,
              100,
              97,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              105,
              110,
              100,
              97,
              32,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              54,
              55,
              52,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              70,
              114,
              81,
              81,
              88,
              116,
              48,
              122,
              72,
              109,
              47,
              112,
              72,
              80,
              114,
              104,
              97,
              117,
              76,
              73,
              84,
              119,
              36,
              104,
              65,
              112,
              119,
              68,
              86,
              43,
              119,
              82,
              113,
              109,
              118,
              65,
              120,
              48,
              80,
              109,
              110,
              106,
              116,
              87,
              77,
              97,
              43,
              73,
              49,
              86,
              103,
              57,
              90,
              103,
              99,
              111,
              103,
              55,
              81,
              115,
              79,
              71,
              75,
              121,
              82,
              52,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              51,
              55,
              58,
              49,
              51,
              46,
              53,
              55,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              51,
              55,
              58,
              49,
              51,
              46,
              53,
              55,
              50,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              54,
              57,
              101,
              98,
              48,
              56,
              48,
              45,
              56,
              48,
              48,
              56,
              45,
              52,
              54,
              98,
              97,
              45,
              97,
              50,
              97,
              102,
              45,
              56,
              101,
              98,
              57,
              97,
              48,
              50,
              56,
              50,
              55,
              52,
              52,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              105,
              99,
              104,
              97,
              101,
              108,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              75,
              97,
              114,
              101,
              110,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              105,
              99,
              104,
              97,
              101,
              108,
              32,
              75,
              97,
              114,
              101,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              50,
              54,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              80,
              55,
              105,
              51,
              71,
              66,
              80,
              86,
              49,
              71,
              82,
              102,
              55,
              81,
              88,
              84,
              68,
              71,
              87,
              51,
              56,
              65,
              36,
              100,
              108,
              105,
              119,
              85,
              56,
              89,
              110,
              53,
              70,
              110,
              43,
              74,
              84,
              86,
              51,
              109,
              108,
              80,
              103,
              77,
              110,
              47,
              88,
              108,
              111,
              73,
              54,
              101,
              89,
              67,
              117,
              114,
              117,
              118,
              108,
              83,
              99,
              109,
              116,
              48,
              83,
              56,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              51,
              55,
              46,
              54,
              48,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              51,
              55,
              46,
              54,
              48,
              49,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              57,
              49,
              50,
              101,
              55,
              56,
              102,
              56,
              45,
              56,
              56,
              102,
              51,
              45,
              52,
              100,
              101,
              98,
              45,
              97,
              57,
              52,
              54,
              45,
              51,
              50,
              101,
              97,
              97,
              55,
              54,
              57,
              55,
              48,
              100,
              54,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              97,
              114,
              97,
              104,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              121,
              100,
              101,
              108,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              97,
              114,
              97,
              104,
              32,
              70,
              121,
              100,
              101,
              108,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              51,
              50,
              51,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              68,
              70,
              68,
              110,
              83,
              86,
              53,
              117,
              121,
              52,
              114,
              100,
              110,
              51,
              118,
              84,
              56,
              52,
              83,
              82,
              75,
              119,
              36,
              106,
              78,
              72,
              70,
              80,
              81,
              57,
              117,
              106,
              65,
              43,
              80,
              68,
              83,
              70,
              51,
              77,
              118,
              114,
              116,
              122,
              75,
              106,
              84,
              82,
              99,
              104,
              85,
              77,
              87,
              56,
              115,
              105,
              83,
              105,
              50,
              54,
              101,
              67,
              111,
              98,
              76,
              99,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              52,
              55,
              58,
              49,
              57,
              46,
              56,
              56,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              52,
              55,
              58,
              49,
              57,
              46,
              56,
              56,
              50,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              102,
              49,
              98,
              100,
              56,
              50,
              102,
              45,
              57,
              98,
              51,
              100,
              45,
              52,
              52,
              52,
              52,
              45,
              98,
              56,
              97,
              97,
              45,
              57,
              50,
              54,
              97,
              97,
              99,
              52,
              102,
              57,
              97,
              99,
              101,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              106,
              97,
              121,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              79,
              106,
              97,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              111,
              103,
              64,
              101,
              45,
              114,
              101,
              99,
              111,
              114,
              100,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              114,
              102,
              82,
              47,
              51,
              51,
              69,
              86,
              101,
              120,
              43,
              87,
              78,
              89,
              82,
              66,
              98,
              89,
              98,
              78,
              65,
              81,
              36,
              120,
              75,
              101,
              74,
              111,
              47,
              108,
              105,
              72,
              111,
              82,
              85,
              69,
              121,
              90,
              57,
              106,
              97,
              55,
              55,
              76,
              78,
              113,
              97,
              88,
              98,
              122,
              77,
              119,
              57,
              43,
              68,
              49,
              113,
              53,
              106,
              47,
              79,
              109,
              88,
              112,
              73,
              73,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              115,
              116,
              111,
              114,
              97,
              103,
              101,
              46,
              103,
              111,
              111,
              103,
              108,
              101,
              97,
              112,
              105,
              115,
              46,
              99,
              111,
              109,
              47,
              100,
              97,
              110,
              100,
              121,
              115,
              45,
              55,
              100,
              101,
              56,
              49,
              46,
              97,
              112,
              112,
              115,
              112,
              111,
              116,
              46,
              99,
              111,
              109,
              47,
              97,
              118,
              97,
              116,
              97,
              114,
              37,
              50,
              70,
              105,
              109,
              97,
              103,
              101,
              115,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              54,
              58,
              52,
              52,
              58,
              49,
              57,
              46,
              50,
              57,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              49,
              50,
              84,
              49,
              53,
              58,
              48,
              57,
              58,
              50,
              51,
              46,
              53,
              48,
              48,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              49,
              50,
              84,
              49,
              53,
              58,
              48,
              57,
              58,
              50,
              51,
              46,
              52,
              57,
              57,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              56,
              52,
              48,
              50,
              51,
              48,
              98,
              53,
              45,
              49,
              98,
              57,
              57,
              45,
              52,
              102,
              97,
              54,
              45,
              98,
              48,
              57,
              48,
              45,
              50,
              99,
              100,
              101,
              102,
              97,
              55,
              50,
              99,
              50,
              98,
              102,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              104,
              114,
              105,
              115,
              116,
              111,
              112,
              104,
              101,
              114,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              32,
              67,
              104,
              114,
              105,
              115,
              116,
              111,
              112,
              104,
              101,
              114,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              122,
              105,
              107,
              68,
              79,
              113,
              51,
              51,
              85,
              122,
              88,
              82,
              83,
              67,
              115,
              43,
              113,
              75,
              43,
              107,
              110,
              65,
              36,
              72,
              71,
              98,
              98,
              98,
              116,
              111,
              116,
              80,
              80,
              119,
              69,
              87,
              100,
              81,
              105,
              76,
              76,
              79,
              88,
              77,
              101,
              105,
              72,
              74,
              57,
              101,
              104,
              105,
              76,
              99,
              122,
              65,
              101,
              74,
              49,
              55,
              68,
              71,
              106,
              81,
              112,
              73,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              50,
              49,
              58,
              50,
              53,
              58,
              53,
              56,
              46,
              49,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              50,
              49,
              58,
              50,
              53,
              58,
              53,
              57,
              46,
              52,
              48,
              57,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              50,
              49,
              58,
              50,
              53,
              58,
              53,
              56,
              46,
              52,
              56,
              53,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              55,
              48,
              101,
              48,
              97,
              99,
              97,
              51,
              45,
              98,
              98,
              54,
              99,
              45,
              52,
              97,
              99,
              57,
              45,
              97,
              100,
              51,
              49,
              45,
              50,
              99,
              48,
              54,
              57,
              49,
              100,
              102,
              51,
              54,
              100,
              98,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              121,
              100,
              101,
              108,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              106,
              97,
              121,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              114,
              107,
              32,
              82,
              111,
              100,
              114,
              105,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              52,
              57,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              48,
              56,
              49,
              51,
              49,
              49,
              56,
              57,
              51,
              57,
              49,
              34,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              104,
              71,
              55,
              112,
              118,
              109,
              114,
              103,
              120,
              84,
              99,
              79,
              65,
              55,
              88,
              108,
              98,
              98,
              55,
              104,
              81,
              81,
              36,
              43,
              88,
              81,
              82,
              51,
              104,
              53,
              76,
              50,
              102,
              85,
              102,
              47,
              104,
              107,
              78,
              76,
              51,
              48,
              54,
              113,
              122,
              49,
              73,
              115,
              85,
              51,
              76,
              70,
              67,
              109,
              118,
              73,
              121,
              110,
              84,
              71,
              105,
              98,
              54,
              119,
              122,
              56,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              50,
              49,
              58,
              50,
              55,
              58,
              51,
              55,
              46,
              57,
              53,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              53,
              84,
              49,
              56,
              58,
              51,
              51,
              58,
              53,
              53,
              46,
              55,
              56,
              54,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              52,
              84,
              50,
              48,
              58,
              50,
              50,
              58,
              49,
              52,
              46,
              52,
              55,
              54,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              101,
              98,
              49,
              55,
              49,
              53,
              49,
              52,
              45,
              52,
              53,
              55,
              99,
              45,
              52,
              52,
              97,
              50,
              45,
              97,
              52,
              100,
              101,
              45,
              97,
              48,
              97,
              55,
              57,
              53,
              56,
              102,
              97,
              54,
              98,
              97,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              108,
              105,
              122,
              97,
              98,
              101,
              116,
              104,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              97,
              116,
              114,
              105,
              99,
              105,
              97,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              108,
              105,
              122,
              97,
              98,
              101,
              116,
              104,
              32,
              80,
              97,
              116,
              114,
              105,
              99,
              105,
              97,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              52,
              54,
              53,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              118,
              72,
              77,
              48,
              75,
              83,
              81,
              90,
              54,
              119,
              100,
              118,
              48,
              110,
              71,
              76,
              114,
              72,
              50,
              50,
              113,
              81,
              36,
              52,
              88,
              105,
              66,
              115,
              83,
              79,
              81,
              71,
              83,
              106,
              43,
              80,
              102,
              81,
              47,
              119,
              87,
              89,
              102,
              65,
              51,
              54,
              47,
              103,
              107,
              100,
              100,
              80,
              119,
              65,
              104,
              112,
              102,
              89,
              43,
              108,
              47,
              50,
              113,
              49,
              55,
              89,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              54,
              58,
              48,
              52,
              58,
              49,
              49,
              46,
              52,
              50,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              54,
              58,
              48,
              52,
              58,
              49,
              50,
              46,
              52,
              52,
              54,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              54,
              58,
              48,
              52,
              58,
              49,
              49,
              46,
              57,
              49,
              52,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              54,
              52,
              101,
              100,
              100,
              53,
              98,
              102,
              45,
              50,
              100,
              97,
              53,
              45,
              52,
              99,
              102,
              100,
              45,
              97,
              99,
              57,
              56,
              45,
              49,
              57,
              99,
              49,
              52,
              102,
              97,
              52,
              55,
              49,
              51,
              53,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              100,
              111,
              101,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              32,
              100,
              111,
              101,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              102,
              111,
              103,
              98,
              101,
              110,
              105,
              50,
              49,
              64,
              103,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              120,
              121,
              65,
              70,
              118,
              49,
              117,
              69,
              71,
              110,
              74,
              53,
              71,
              102,
              101,
              75,
              52,
              75,
              116,
              65,
              106,
              103,
              36,
              54,
              122,
              47,
              112,
              49,
              109,
              52,
              67,
              67,
              107,
              57,
              50,
              74,
              67,
              87,
              53,
              88,
              101,
              52,
              50,
              99,
              85,
              51,
              49,
              72,
              111,
              68,
              114,
              102,
              65,
              65,
              72,
              55,
              48,
              72,
              56,
              43,
              71,
              115,
              121,
              103,
              80,
              69,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              49,
              84,
              49,
              48,
              58,
              52,
              55,
              58,
              48,
              53,
              46,
              54,
              53,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              49,
              84,
              49,
              48,
              58,
              52,
              55,
              58,
              49,
              57,
              46,
              53,
              54,
              52,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              54,
              98,
              55,
              102,
              98,
              48,
              102,
              45,
              57,
              52,
              57,
              50,
              45,
              52,
              56,
              53,
              53,
              45,
              56,
              50,
              57,
              57,
              45,
              57,
              99,
              52,
              56,
              55,
              102,
              56,
              51,
              57,
              52,
              54,
              102,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              108,
              105,
              122,
              97,
              98,
              101,
              116,
              104,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              97,
              110,
              99,
              121,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              108,
              105,
              122,
              97,
              98,
              101,
              116,
              104,
              32,
              78,
              97,
              110,
              99,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              56,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              90,
              100,
              67,
              101,
              104,
              69,
              65,
              122,
              50,
              90,
              50,
              83,
              112,
              70,
              101,
              48,
              74,
              109,
              105,
              89,
              67,
              81,
              36,
              56,
              119,
              109,
              97,
              84,
              122,
              78,
              86,
              55,
              98,
              122,
              65,
              65,
              86,
              122,
              67,
              113,
              54,
              100,
              113,
              43,
              79,
              86,
              119,
              55,
              70,
              50,
              72,
              120,
              106,
              86,
              104,
              114,
              110,
              54,
              97,
              71,
              78,
              54,
              51,
              53,
              69,
              99,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              53,
              58,
              49,
              55,
              58,
              51,
              50,
              46,
              53,
              57,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              53,
              58,
              49,
              55,
              58,
              51,
              52,
              46,
              50,
              55,
              57,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              53,
              58,
              49,
              55,
              58,
              51,
              51,
              46,
              49,
              53,
              53,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              102,
              56,
              98,
              97,
              55,
              102,
              99,
              100,
              45,
              53,
              102,
              98,
              100,
              45,
              52,
              56,
              55,
              102,
              45,
              97,
              101,
              100,
              54,
              45,
              101,
              98,
              57,
              56,
              50,
              100,
              99,
              54,
              48,
              49,
              51,
              51,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              97,
              110,
              100,
              114,
              97,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              104,
              111,
              109,
              97,
              115,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              97,
              110,
              100,
              114,
              97,
              32,
              84,
              104,
              111,
              109,
              97,
              115,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              52,
              53,
              51,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              76,
              81,
              52,
              103,
              114,
              51,
              50,
              57,
              76,
              77,
              112,
              71,
              112,
              121,
              118,
              109,
              113,
              112,
              80,
              83,
              54,
              103,
              36,
              57,
              122,
              54,
              43,
              116,
              49,
              78,
              48,
              52,
              72,
              54,
              100,
              117,
              112,
              48,
              105,
              122,
              75,
              116,
              67,
              114,
              69,
              54,
              122,
              75,
              90,
              86,
              78,
              85,
              43,
              56,
              50,
              99,
              110,
              120,
              114,
              122,
              84,
              108,
              69,
              55,
              71,
              111,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              54,
              58,
              48,
              54,
              58,
              50,
              48,
              46,
              56,
              53,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              54,
              58,
              48,
              54,
              58,
              50,
              49,
              46,
              55,
              55,
              53,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              54,
              58,
              48,
              54,
              58,
              50,
              49,
              46,
              50,
              55,
              51,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              97,
              98,
              56,
              49,
              50,
              102,
              53,
              56,
              45,
              48,
              56,
              54,
              100,
              45,
              52,
              50,
              51,
              102,
              45,
              56,
              52,
              52,
              98,
              45,
              49,
              51,
              57,
              54,
              53,
              51,
              52,
              99,
              54,
              99,
              99,
              102,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              97,
              116,
              114,
              105,
              99,
              105,
              97,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              114,
              121,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              97,
              116,
              114,
              105,
              99,
              105,
              97,
              32,
              77,
              97,
              114,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              49,
              53,
              57,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              70,
              112,
              43,
              78,
              86,
              73,
              106,
              85,
              117,
              84,
              83,
              49,
              117,
              66,
              50,
              71,
              116,
              79,
              112,
              72,
              99,
              81,
              36,
              51,
              65,
              70,
              105,
              110,
              90,
              53,
              120,
              98,
              99,
              108,
              55,
              50,
              43,
              110,
              112,
              98,
              51,
              116,
              67,
              68,
              73,
              55,
              67,
              99,
              112,
              109,
              70,
              54,
              87,
              90,
              65,
              118,
              65,
              77,
              70,
              48,
              116,
              67,
              111,
              85,
              49,
              107,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              57,
              58,
              51,
              50,
              58,
              50,
              56,
              46,
              49,
              52,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              57,
              58,
              51,
              50,
              58,
              50,
              57,
              46,
              52,
              53,
              52,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              57,
              58,
              51,
              50,
              58,
              50,
              56,
              46,
              53,
              51,
              52,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              102,
              99,
              51,
              53,
              48,
              102,
              54,
              51,
              45,
              52,
              54,
              52,
              102,
              45,
              52,
              100,
              57,
              56,
              45,
              57,
              56,
              52,
              53,
              45,
              52,
              102,
              50,
              100,
              101,
              55,
              99,
              100,
              53,
              102,
              49,
              53,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              75,
              97,
              114,
              101,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              109,
              101,
              115,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              75,
              97,
              114,
              101,
              110,
              32,
              74,
              97,
              109,
              101,
              115,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              56,
              56,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              115,
              75,
              65,
              116,
              116,
              100,
              73,
              48,
              109,
              114,
              83,
              83,
              71,
              109,
              50,
              67,
              100,
              49,
              50,
              52,
              80,
              119,
              36,
              101,
              119,
              51,
              49,
              87,
              114,
              66,
              116,
              115,
              54,
              80,
              119,
              116,
              66,
              79,
              51,
              102,
              47,
              118,
              105,
              97,
              98,
              84,
              88,
              57,
              121,
              83,
              98,
              66,
              70,
              115,
              57,
              113,
              70,
              77,
              81,
              71,
              52,
              105,
              122,
              97,
              66,
              65,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              57,
              58,
              51,
              50,
              58,
              49,
              51,
              46,
              56,
              50,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              57,
              58,
              51,
              50,
              58,
              49,
              53,
              46,
              51,
              49,
              56,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              57,
              58,
              51,
              50,
              58,
              49,
              52,
              46,
              50,
              52,
              51,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              57,
              100,
              97,
              50,
              99,
              48,
              55,
              48,
              45,
              97,
              56,
              51,
              102,
              45,
              52,
              48,
              56,
              56,
              45,
              98,
              48,
              102,
              57,
              45,
              99,
              101,
              56,
              51,
              100,
              57,
              57,
              51,
              99,
              48,
              102,
              98,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              82,
              111,
              100,
              114,
              105,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              109,
              101,
              115,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              82,
              111,
              100,
              114,
              105,
              32,
              74,
              97,
              109,
              101,
              115,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              49,
              54,
              53,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              104,
              103,
              113,
              115,
              73,
              116,
              67,
              119,
              111,
              70,
              114,
              118,
              115,
              56,
              88,
              66,
              105,
              76,
              111,
              84,
              112,
              103,
              36,
              47,
              112,
              121,
              81,
              52,
              99,
              72,
              104,
              69,
              52,
              54,
              97,
              117,
              50,
              78,
              114,
              115,
              66,
              110,
              110,
              116,
              97,
              79,
              71,
              119,
              74,
              117,
              82,
              105,
              99,
              81,
              49,
              102,
              85,
              110,
              107,
              122,
              71,
              101,
              67,
              86,
              97,
              85,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              115,
              116,
              111,
              114,
              97,
              103,
              101,
              46,
              103,
              111,
              111,
              103,
              108,
              101,
              97,
              112,
              105,
              115,
              46,
              99,
              111,
              109,
              47,
              100,
              97,
              110,
              100,
              121,
              115,
              45,
              55,
              100,
              101,
              56,
              49,
              46,
              97,
              112,
              112,
              115,
              112,
              111,
              116,
              46,
              99,
              111,
              109,
              47,
              97,
              118,
              97,
              116,
              97,
              114,
              37,
              50,
              70,
              105,
              109,
              97,
              103,
              101,
              115,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              49,
              50,
              58,
              49,
              50,
              58,
              53,
              55,
              46,
              49,
              48,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              49,
              50,
              58,
              50,
              48,
              58,
              50,
              56,
              46,
              53,
              54,
              54,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              49,
              50,
              58,
              49,
              51,
              58,
              48,
              50,
              46,
              49,
              50,
              55,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              101,
              101,
              57,
              50,
              52,
              48,
              100,
              45,
              98,
              99,
              48,
              99,
              45,
              52,
              53,
              49,
              97,
              45,
              56,
              53,
              102,
              55,
              45,
              48,
              54,
              101,
              54,
              53,
              57,
              56,
              48,
              49,
              51,
              48,
              97,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              114,
              105,
              101,
              100,
              114,
              105,
              99,
              104,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              97,
              110,
              105,
              101,
              108,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              114,
              105,
              101,
              100,
              114,
              105,
              99,
              104,
              32,
              68,
              97,
              110,
              105,
              101,
              108,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              51,
              48,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              100,
              86,
              79,
              105,
              100,
              43,
              54,
              89,
              86,
              48,
              74,
              98,
              111,
              56,
              114,
              105,
              72,
              121,
              121,
              118,
              68,
              65,
              36,
              76,
              80,
              113,
              82,
              57,
              112,
              80,
              119,
              48,
              109,
              55,
              52,
              70,
              54,
              70,
              117,
              80,
              55,
              71,
              122,
              107,
              85,
              74,
              53,
              73,
              52,
              72,
              106,
              115,
              109,
              89,
              80,
              109,
              118,
              119,
              55,
              111,
              69,
              108,
              101,
              47,
              117,
              48,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              49,
              56,
              58,
              49,
              50,
              58,
              49,
              49,
              46,
              55,
              50,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              49,
              56,
              58,
              51,
              48,
              58,
              49,
              54,
              46,
              55,
              56,
              56,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              49,
              56,
              58,
              49,
              50,
              58,
              49,
              50,
              46,
              52,
              50,
              57,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              97,
              57,
              50,
              52,
              101,
              99,
              53,
              45,
              56,
              98,
              51,
              102,
              45,
              52,
              49,
              54,
              52,
              45,
              97,
              50,
              101,
              51,
              45,
              55,
              101,
              48,
              57,
              51,
              97,
              54,
              51,
              100,
              53,
              97,
              49,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              101,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              105,
              115,
              97,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              101,
              110,
              32,
              76,
              105,
              115,
              97,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              54,
              49,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              78,
              77,
              50,
              105,
              52,
              90,
              84,
              77,
              84,
              114,
              105,
              87,
              69,
              47,
              105,
              81,
              76,
              98,
              99,
              74,
              101,
              103,
              36,
              119,
              100,
              81,
              69,
              74,
              121,
              68,
              49,
              113,
              81,
              107,
              76,
              109,
              43,
              101,
              57,
              74,
              118,
              118,
              83,
              117,
              80,
              82,
              110,
              88,
              118,
              56,
              78,
              120,
              98,
              104,
              43,
              89,
              89,
              48,
              116,
              119,
              81,
              51,
              113,
              122,
              90,
              65,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              55,
              84,
              48,
              52,
              58,
              53,
              54,
              58,
              50,
              50,
              46,
              52,
              49,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              55,
              84,
              48,
              55,
              58,
              53,
              48,
              58,
              52,
              48,
              46,
              56,
              54,
              56,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              55,
              84,
              48,
              55,
              58,
              53,
              48,
              58,
              49,
              51,
              46,
              50,
              49,
              51,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              56,
              100,
              54,
              98,
              54,
              101,
              101,
              55,
              45,
              48,
              50,
              97,
              97,
              45,
              52,
              48,
              55,
              54,
              45,
              57,
              101,
              50,
              56,
              45,
              53,
              102,
              50,
              53,
              48,
              99,
              102,
              102,
              50,
              98,
              55,
              102,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              97,
              110,
              100,
              114,
              97,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              109,
              101,
              115,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              97,
              110,
              100,
              114,
              97,
              32,
              74,
              97,
              109,
              101,
              115,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              57,
              53,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              102,
              57,
              49,
              100,
              118,
              47,
              50,
              83,
              77,
              120,
              79,
              120,
              110,
              122,
              49,
              72,
              68,
              122,
              52,
              111,
              67,
              103,
              36,
              116,
              55,
              110,
              69,
              113,
              112,
              68,
              120,
              53,
              81,
              110,
              109,
              66,
              100,
              50,
              43,
              99,
              118,
              78,
              57,
              116,
              81,
              117,
              110,
              111,
              119,
              76,
              118,
              66,
              49,
              120,
              88,
              57,
              74,
              121,
              102,
              105,
              76,
              83,
              73,
              83,
              68,
              103,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              55,
              84,
              49,
              55,
              58,
              53,
              52,
              58,
              53,
              48,
              46,
              50,
              55,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              55,
              84,
              49,
              55,
              58,
              53,
              52,
              58,
              53,
              50,
              46,
              48,
              53,
              48,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              55,
              84,
              49,
              55,
              58,
              53,
              52,
              58,
              53,
              48,
              46,
              56,
              55,
              56,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              99,
              54,
              100,
              53,
              49,
              102,
              51,
              45,
              99,
              102,
              102,
              49,
              45,
              52,
              52,
              52,
              48,
              45,
              56,
              57,
              56,
              48,
              45,
              55,
              102,
              53,
              101,
              55,
              48,
              55,
              50,
              48,
              99,
              52,
              101,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              97,
              116,
              114,
              105,
              99,
              105,
              97,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              115,
              111,
              110,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              97,
              116,
              114,
              105,
              99,
              105,
              97,
              32,
              74,
              111,
              104,
              110,
              115,
              111,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              51,
              55,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              112,
              111,
              112,
              51,
              66,
              105,
              108,
              75,
              53,
              101,
              116,
              55,
              83,
              107,
              82,
              88,
              51,
              70,
              57,
              111,
              116,
              81,
              36,
              122,
              70,
              89,
              85,
              121,
              108,
              73,
              55,
              73,
              89,
              55,
              52,
              77,
              75,
              105,
              97,
              78,
              120,
              54,
              77,
              117,
              52,
              51,
              122,
              69,
              75,
              110,
              81,
              74,
              100,
              54,
              76,
              83,
              77,
              117,
              53,
              114,
              110,
              85,
              112,
              54,
              47,
              85,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              53,
              58,
              50,
              48,
              58,
              53,
              50,
              46,
              53,
              56,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              53,
              58,
              50,
              48,
              58,
              53,
              52,
              46,
              49,
              55,
              52,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              53,
              58,
              50,
              48,
              58,
              53,
              51,
              46,
              48,
              52,
              55,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              52,
              48,
              100,
              98,
              51,
              53,
              102,
              45,
              50,
              52,
              102,
              53,
              45,
              52,
              102,
              54,
              50,
              45,
              97,
              99,
              100,
              54,
              45,
              54,
              55,
              51,
              100,
              54,
              50,
              52,
              97,
              52,
              51,
              49,
              52,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              97,
              114,
              97,
              104,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              114,
              107,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              97,
              114,
              97,
              104,
              32,
              77,
              97,
              114,
              107,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              54,
              54,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              111,
              107,
              81,
              110,
              109,
              108,
              114,
              66,
              77,
              74,
              83,
              54,
              121,
              118,
              73,
              73,
              103,
              72,
              106,
              80,
              108,
              65,
              36,
              117,
              77,
              53,
              80,
              56,
              111,
              115,
              99,
              72,
              89,
              83,
              47,
              78,
              89,
              51,
              83,
              85,
              43,
              84,
              113,
              75,
              100,
              107,
              67,
              110,
              77,
              110,
              99,
              43,
              85,
              120,
              51,
              43,
              66,
              85,
              72,
              99,
              47,
              111,
              77,
              70,
              67,
              99,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              53,
              58,
              50,
              53,
              58,
              52,
              49,
              46,
              53,
              48,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              53,
              58,
              50,
              54,
              58,
              49,
              57,
              46,
              53,
              50,
              49,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              53,
              58,
              50,
              54,
              58,
              49,
              57,
              46,
              53,
              49,
              57,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              97,
              52,
              54,
              100,
              50,
              49,
              55,
              53,
              45,
              50,
              54,
              101,
              100,
              45,
              52,
              51,
              101,
              49,
              45,
              97,
              54,
              55,
              48,
              45,
              53,
              54,
              48,
              54,
              57,
              97,
              50,
              57,
              52,
              50,
              56,
              101,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              104,
              97,
              114,
              108,
              101,
              115,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              101,
              110,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              104,
              97,
              114,
              108,
              101,
              115,
              32,
              66,
              101,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              57,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              98,
              105,
              66,
              120,
              57,
              97,
              77,
              43,
              53,
              67,
              108,
              79,
              101,
              119,
              109,
              89,
              82,
              47,
              49,
              70,
              69,
              119,
              36,
              78,
              97,
              66,
              113,
              56,
              52,
              100,
              55,
              57,
              74,
              86,
              86,
              116,
              105,
              79,
              74,
              122,
              88,
              74,
              84,
              103,
              108,
              56,
              67,
              121,
              106,
              99,
              120,
              119,
              84,
              83,
              56,
              75,
              103,
              121,
              111,
              107,
              113,
              102,
              115,
              80,
              122,
              65,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              53,
              58,
              51,
              52,
              58,
              48,
              51,
              46,
              54,
              52,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              53,
              58,
              52,
              52,
              58,
              51,
              48,
              46,
              49,
              51,
              51,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              53,
              58,
              51,
              52,
              58,
              48,
              57,
              46,
              51,
              57,
              55,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              50,
              55,
              51,
              54,
              55,
              49,
              101,
              57,
              45,
              57,
              52,
              53,
              51,
              45,
              52,
              98,
              51,
              57,
              45,
              97,
              97,
              52,
              51,
              45,
              100,
              102,
              100,
              97,
              54,
              97,
              99,
              52,
              49,
              102,
              102,
              56,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              72,
              85,
              75,
              87,
              85,
              69,
              77,
              69,
              75,
              65,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              70,
              73,
              69,
              78,
              69,
              77,
              79,
              75,
              87,
              85,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              72,
              85,
              75,
              87,
              85,
              69,
              77,
              69,
              75,
              65,
              32,
              69,
              70,
              73,
              69,
              78,
              69,
              77,
              79,
              75,
              87,
              85,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              106,
              101,
              102,
              105,
              101,
              110,
              101,
              55,
              55,
              64,
              103,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              48,
              56,
              49,
              54,
              54,
              56,
              52,
              51,
              56,
              57,
              55,
              34,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              68,
              82,
              121,
              68,
              47,
              78,
              65,
              105,
              74,
              69,
              67,
              111,
              74,
              57,
              54,
              71,
              104,
              53,
              116,
              70,
              56,
              119,
              36,
              69,
              121,
              85,
              86,
              110,
              49,
              99,
              68,
              69,
              82,
              73,
              75,
              76,
              68,
              107,
              85,
              73,
              48,
              111,
              106,
              87,
              84,
              85,
              65,
              68,
              77,
              73,
              115,
              55,
              52,
              53,
              74,
              71,
              52,
              47,
              115,
              111,
              85,
              52,
              55,
              77,
              109,
              119,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              56,
              58,
              52,
              54,
              58,
              49,
              49,
              46,
              51,
              48,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              57,
              58,
              48,
              48,
              58,
              48,
              50,
              46,
              56,
              48,
              57,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              57,
              58,
              48,
              48,
              58,
              48,
              50,
              46,
              56,
              48,
              56,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              93,
              44,
              34,
              97,
              108,
              108,
              85,
              115,
              101,
              114,
              115,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              51,
              50,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 169,
          "responseSize": 24636
        },
        "id": "a0ee2bcd-a17f-4ad5-b9e6-a181638a6de7",
        "assertions": [
          {
            "assertion": "Response is valid JSON",
            "skipped": false
          },
          {
            "assertion": "Response contains expected fields",
            "skipped": false
          },
          {
            "assertion": "allUsers array exists",
            "skipped": false
          },
          {
            "assertion": "User data contains required fields",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8bed6a7e-6f84-4b79-ba39-d74f79f6119e",
          "length": 40,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e012d58c-276e-40b5-8560-523d64d3974e"
        },
        "item": {
          "id": "17208e8d-3925-4553-ae83-4474e61062c2",
          "name": "Get user by ID",
          "request": {
            "url": {
              "path": [
                "admin",
                "users",
                ":id"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "disabled": true,
                  "key": "id",
                  "value": "ec73234f-5419-4953-855b-2c4c21307b67"
                }
              ],
              "variable": [
                {
                  "type": "any",
                  "value": "ec73234f-5419-4953-855b-2c4c21307b67",
                  "key": "id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "faebfb9a-1af7-4029-8b99-ebfeff1685f8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "d36cb7a5-24a4-4bec-ab2e-21052fcb2891"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3bb3822a-33cd-4495-acc8-58de0884abcb",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Ensure response status code is 200\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Ensure response is JSON\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// Validate success field\r",
                  "pm.test(\"Response success flag is true\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// Validate message field\r",
                  "pm.test(\"Response message is correct\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\", \"Users fetched successfully\");\r",
                  "});\r",
                  "\r",
                  "// Validate user data structure\r",
                  "pm.test(\"Response contains expected user fields\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"data\");\r",
                  "    let userData = jsonData.data;\r",
                  "\r",
                  "    pm.expect(userData).to.have.property(\"id\").that.is.a(\"string\");\r",
                  "    pm.expect(userData).to.have.property(\"firstName\").that.is.a(\"string\");\r",
                  "    pm.expect(userData).to.have.property(\"lastName\").that.is.a(\"string\");\r",
                  "    pm.expect(userData).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                  "    pm.expect(userData).to.have.property(\"email\").that.is.a(\"string\");\r",
                  "    pm.expect(userData).to.have.property(\"avatar\").that.is.a(\"string\");\r",
                  "    pm.expect(userData).to.have.property(\"username\"); // Can be null\r",
                  "    pm.expect(userData).to.have.property(\"isActive\").that.is.a(\"boolean\");\r",
                  "});\r",
                  "\r",
                  "// Validate adminAuthToken is present in request headers\r",
                  "pm.test(\"Auth token is provided\", function () {\r",
                  "    pm.expect(pm.request.headers.has(\"Authorization\")).to.be.true;\r",
                  "});\r",
                  "\r",
                  "pm.environment.set(\"UserId\", jsonData.data.id)"
                ],
                "_lastExecutionId": "a9b8a19f-a53b-44dd-85f2-6d299661e542"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "admin",
              "users",
              "ec73234f-5419-4953-855b-2c4c21307b67"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0809bda1-fc9d-4b5d-abeb-8f36e9516d83",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a0deb210-0642-4bdb-b9a9-4ac4e17df4a9",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:06 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "248"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              115,
              32,
              102,
              101,
              116,
              99,
              104,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              101,
              99,
              55,
              51,
              50,
              51,
              52,
              102,
              45,
              53,
              52,
              49,
              57,
              45,
              52,
              57,
              53,
              51,
              45,
              56,
              53,
              53,
              98,
              45,
              50,
              99,
              52,
              99,
              50,
              49,
              51,
              48,
              55,
              98,
              54,
              55,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              105,
              102,
              121,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              106,
              97,
              121,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              105,
              102,
              121,
              32,
              79,
              106,
              97,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              111,
              106,
              64,
              101,
              45,
              114,
              101,
              99,
              111,
              114,
              100,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 88,
          "responseSize": 248
        },
        "id": "17208e8d-3925-4553-ae83-4474e61062c2",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is in JSON format",
            "skipped": false
          },
          {
            "assertion": "Response success flag is true",
            "skipped": false
          },
          {
            "assertion": "Response message is correct",
            "skipped": false
          },
          {
            "assertion": "Response contains expected user fields",
            "skipped": false
          },
          {
            "assertion": "Auth token is provided",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "383e5a63-eb08-4fb1-bcfc-02c2bd9c8569",
          "length": 40,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "3d0a3597-d021-4496-9e9f-68cc1d3b7bc5"
        },
        "item": {
          "id": "fc57dd6c-58af-4fc2-a42f-e2caeb33e33a",
          "name": "Get All users",
          "request": {
            "url": {
              "path": [
                "admin",
                "users"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "13760dcf-a574-4246-8ae3-522f3e02b810",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Validate response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Validate response format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// Validate required response fields\r",
                  "pm.test(\"Response contains expected fields\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "    pm.expect(jsonData).to.have.property(\"message\");\r",
                  "    pm.expect(jsonData).to.have.property(\"data\");\r",
                  "});\r",
                  "\r",
                  "// Validate user data structure (assuming data is an array of users)\r",
                  "pm.test(\"User data structure is correct\", function () {\r",
                  "    pm.expect(jsonData.data.result).to.be.an(\"array\");\r",
                  "\r",
                  "    if (jsonData.data.result.length > 0) {\r",
                  "        let user = jsonData.data.result[0]; // Check the first user\r",
                  "\r",
                  "        pm.expect(user).to.have.property(\"id\").that.is.a(\"string\");\r",
                  "        pm.expect(user).to.have.property(\"firstName\").that.is.a(\"string\");\r",
                  "        pm.expect(user).to.have.property(\"lastName\").that.is.a(\"string\");\r",
                  "        pm.expect(user).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                  "        pm.expect(user).to.have.property(\"email\").that.is.a(\"string\");\r",
                  "        pm.expect(user).to.have.property(\"avatar\");\r",
                  "        pm.expect(user).to.have.property(\"username\");\r",
                  "        pm.expect(user).to.have.property(\"isActive\").that.is.a(\"boolean\");\r",
                  "    };\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "b7fa67fc-9842-47b3-b988-0fbfb4a7be53"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "admin",
              "users"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ee4d3440-a7d9-40d7-9f82-7c40918a5782",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "5db8631d-f2b6-4ce2-905f-3c4383c26e79",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:06 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "15512"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              115,
              32,
              102,
              101,
              116,
              99,
              104,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              114,
              101,
              115,
              117,
              108,
              116,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              102,
              99,
              51,
              53,
              48,
              102,
              54,
              51,
              45,
              52,
              54,
              52,
              102,
              45,
              52,
              100,
              57,
              56,
              45,
              57,
              56,
              52,
              53,
              45,
              52,
              102,
              50,
              100,
              101,
              55,
              99,
              100,
              53,
              102,
              49,
              53,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              75,
              97,
              114,
              101,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              109,
              101,
              115,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              75,
              97,
              114,
              101,
              110,
              32,
              74,
              97,
              109,
              101,
              115,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              56,
              56,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              115,
              75,
              65,
              116,
              116,
              100,
              73,
              48,
              109,
              114,
              83,
              83,
              71,
              109,
              50,
              67,
              100,
              49,
              50,
              52,
              80,
              119,
              36,
              101,
              119,
              51,
              49,
              87,
              114,
              66,
              116,
              115,
              54,
              80,
              119,
              116,
              66,
              79,
              51,
              102,
              47,
              118,
              105,
              97,
              98,
              84,
              88,
              57,
              121,
              83,
              98,
              66,
              70,
              115,
              57,
              113,
              70,
              77,
              81,
              71,
              52,
              105,
              122,
              97,
              66,
              65,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              57,
              58,
              51,
              50,
              58,
              49,
              51,
              46,
              56,
              50,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              57,
              58,
              51,
              50,
              58,
              49,
              53,
              46,
              51,
              49,
              56,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              57,
              58,
              51,
              50,
              58,
              49,
              52,
              46,
              50,
              52,
              51,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              102,
              56,
              98,
              97,
              55,
              102,
              99,
              100,
              45,
              53,
              102,
              98,
              100,
              45,
              52,
              56,
              55,
              102,
              45,
              97,
              101,
              100,
              54,
              45,
              101,
              98,
              57,
              56,
              50,
              100,
              99,
              54,
              48,
              49,
              51,
              51,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              97,
              110,
              100,
              114,
              97,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              104,
              111,
              109,
              97,
              115,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              97,
              110,
              100,
              114,
              97,
              32,
              84,
              104,
              111,
              109,
              97,
              115,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              52,
              53,
              51,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              76,
              81,
              52,
              103,
              114,
              51,
              50,
              57,
              76,
              77,
              112,
              71,
              112,
              121,
              118,
              109,
              113,
              112,
              80,
              83,
              54,
              103,
              36,
              57,
              122,
              54,
              43,
              116,
              49,
              78,
              48,
              52,
              72,
              54,
              100,
              117,
              112,
              48,
              105,
              122,
              75,
              116,
              67,
              114,
              69,
              54,
              122,
              75,
              90,
              86,
              78,
              85,
              43,
              56,
              50,
              99,
              110,
              120,
              114,
              122,
              84,
              108,
              69,
              55,
              71,
              111,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              54,
              58,
              48,
              54,
              58,
              50,
              48,
              46,
              56,
              53,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              54,
              58,
              48,
              54,
              58,
              50,
              49,
              46,
              55,
              55,
              53,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              54,
              58,
              48,
              54,
              58,
              50,
              49,
              46,
              50,
              55,
              51,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              101,
              99,
              55,
              51,
              50,
              51,
              52,
              102,
              45,
              53,
              52,
              49,
              57,
              45,
              52,
              57,
              53,
              51,
              45,
              56,
              53,
              53,
              98,
              45,
              50,
              99,
              52,
              99,
              50,
              49,
              51,
              48,
              55,
              98,
              54,
              55,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              105,
              102,
              121,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              106,
              97,
              121,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              105,
              102,
              121,
              32,
              79,
              106,
              97,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              111,
              106,
              64,
              101,
              45,
              114,
              101,
              99,
              111,
              114,
              100,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              83,
              78,
              70,
              73,
              121,
              51,
              72,
              76,
              81,
              57,
              110,
              101,
              73,
              99,
              81,
              69,
              75,
              67,
              122,
              111,
              80,
              119,
              36,
              105,
              56,
              51,
              88,
              43,
              113,
              83,
              86,
              82,
              47,
              101,
              113,
              65,
              87,
              111,
              104,
              118,
              48,
              73,
              79,
              114,
              120,
              65,
              115,
              114,
              57,
              74,
              76,
              116,
              110,
              56,
              84,
              52,
              53,
              75,
              112,
              102,
              100,
              77,
              99,
              56,
              54,
              65,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              50,
              54,
              46,
              51,
              54,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              50,
              52,
              58,
              50,
              54,
              46,
              51,
              54,
              49,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              101,
              98,
              49,
              55,
              49,
              53,
              49,
              52,
              45,
              52,
              53,
              55,
              99,
              45,
              52,
              52,
              97,
              50,
              45,
              97,
              52,
              100,
              101,
              45,
              97,
              48,
              97,
              55,
              57,
              53,
              56,
              102,
              97,
              54,
              98,
              97,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              108,
              105,
              122,
              97,
              98,
              101,
              116,
              104,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              97,
              116,
              114,
              105,
              99,
              105,
              97,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              108,
              105,
              122,
              97,
              98,
              101,
              116,
              104,
              32,
              80,
              97,
              116,
              114,
              105,
              99,
              105,
              97,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              52,
              54,
              53,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              118,
              72,
              77,
              48,
              75,
              83,
              81,
              90,
              54,
              119,
              100,
              118,
              48,
              110,
              71,
              76,
              114,
              72,
              50,
              50,
              113,
              81,
              36,
              52,
              88,
              105,
              66,
              115,
              83,
              79,
              81,
              71,
              83,
              106,
              43,
              80,
              102,
              81,
              47,
              119,
              87,
              89,
              102,
              65,
              51,
              54,
              47,
              103,
              107,
              100,
              100,
              80,
              119,
              65,
              104,
              112,
              102,
              89,
              43,
              108,
              47,
              50,
              113,
              49,
              55,
              89,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              54,
              58,
              48,
              52,
              58,
              49,
              49,
              46,
              52,
              50,
              56,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              54,
              58,
              48,
              52,
              58,
              49,
              50,
              46,
              52,
              52,
              54,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              54,
              58,
              48,
              52,
              58,
              49,
              49,
              46,
              57,
              49,
              52,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              101,
              55,
              98,
              97,
              49,
              100,
              51,
              50,
              45,
              48,
              100,
              56,
              101,
              45,
              52,
              52,
              57,
              50,
              45,
              97,
              101,
              101,
              98,
              45,
              53,
              53,
              57,
              52,
              99,
              48,
              98,
              97,
              49,
              97,
              57,
              49,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              105,
              110,
              100,
              97,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              105,
              110,
              100,
              97,
              32,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              54,
              55,
              52,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              70,
              114,
              81,
              81,
              88,
              116,
              48,
              122,
              72,
              109,
              47,
              112,
              72,
              80,
              114,
              104,
              97,
              117,
              76,
              73,
              84,
              119,
              36,
              104,
              65,
              112,
              119,
              68,
              86,
              43,
              119,
              82,
              113,
              109,
              118,
              65,
              120,
              48,
              80,
              109,
              110,
              106,
              116,
              87,
              77,
              97,
              43,
              73,
              49,
              86,
              103,
              57,
              90,
              103,
              99,
              111,
              103,
              55,
              81,
              115,
              79,
              71,
              75,
              121,
              82,
              52,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              51,
              55,
              58,
              49,
              51,
              46,
              53,
              55,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              51,
              55,
              58,
              49,
              51,
              46,
              53,
              55,
              50,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              102,
              49,
              98,
              100,
              56,
              50,
              102,
              45,
              57,
              98,
              51,
              100,
              45,
              52,
              52,
              52,
              52,
              45,
              98,
              56,
              97,
              97,
              45,
              57,
              50,
              54,
              97,
              97,
              99,
              52,
              102,
              57,
              97,
              99,
              101,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              106,
              97,
              121,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              79,
              106,
              97,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              111,
              103,
              64,
              101,
              45,
              114,
              101,
              99,
              111,
              114,
              100,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              114,
              102,
              82,
              47,
              51,
              51,
              69,
              86,
              101,
              120,
              43,
              87,
              78,
              89,
              82,
              66,
              98,
              89,
              98,
              78,
              65,
              81,
              36,
              120,
              75,
              101,
              74,
              111,
              47,
              108,
              105,
              72,
              111,
              82,
              85,
              69,
              121,
              90,
              57,
              106,
              97,
              55,
              55,
              76,
              78,
              113,
              97,
              88,
              98,
              122,
              77,
              119,
              57,
              43,
              68,
              49,
              113,
              53,
              106,
              47,
              79,
              109,
              88,
              112,
              73,
              73,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              115,
              116,
              111,
              114,
              97,
              103,
              101,
              46,
              103,
              111,
              111,
              103,
              108,
              101,
              97,
              112,
              105,
              115,
              46,
              99,
              111,
              109,
              47,
              100,
              97,
              110,
              100,
              121,
              115,
              45,
              55,
              100,
              101,
              56,
              49,
              46,
              97,
              112,
              112,
              115,
              112,
              111,
              116,
              46,
              99,
              111,
              109,
              47,
              97,
              118,
              97,
              116,
              97,
              114,
              37,
              50,
              70,
              105,
              109,
              97,
              103,
              101,
              115,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              54,
              58,
              52,
              52,
              58,
              49,
              57,
              46,
              50,
              57,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              49,
              50,
              84,
              49,
              53,
              58,
              48,
              57,
              58,
              50,
              51,
              46,
              53,
              48,
              48,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              49,
              50,
              84,
              49,
              53,
              58,
              48,
              57,
              58,
              50,
              51,
              46,
              52,
              57,
              57,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              98,
              99,
              50,
              48,
              48,
              49,
              99,
              45,
              97,
              54,
              54,
              97,
              45,
              52,
              56,
              52,
              53,
              45,
              56,
              48,
              48,
              98,
              45,
              99,
              102,
              97,
              97,
              49,
              50,
              57,
              56,
              57,
              55,
              54,
              52,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              121,
              100,
              101,
              108,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              114,
              105,
              101,
              100,
              114,
              105,
              99,
              104,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              121,
              100,
              101,
              108,
              32,
              70,
              114,
              105,
              101,
              100,
              114,
              105,
              99,
              104,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              50,
              53,
              52,
              56,
              56,
              64,
              101,
              45,
              114,
              101,
              99,
              111,
              114,
              100,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              55,
              121,
              85,
              83,
              85,
              81,
              122,
              83,
              43,
              43,
              81,
              67,
              84,
              121,
              107,
              74,
              47,
              80,
              51,
              100,
              103,
              119,
              36,
              97,
              90,
              110,
              110,
              75,
              69,
              89,
              99,
              68,
              114,
              43,
              50,
              78,
              52,
              109,
              49,
              50,
              90,
              100,
              90,
              98,
              85,
              49,
              83,
              111,
              108,
              86,
              72,
              66,
              57,
              86,
              81,
              57,
              99,
              76,
              121,
              67,
              48,
              97,
              107,
              118,
              122,
              73,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              48,
              55,
              58,
              51,
              49,
              58,
              51,
              53,
              46,
              57,
              57,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              48,
              55,
              58,
              51,
              49,
              58,
              51,
              53,
              46,
              57,
              57,
              51,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              97,
              57,
              50,
              52,
              101,
              99,
              53,
              45,
              56,
              98,
              51,
              102,
              45,
              52,
              49,
              54,
              52,
              45,
              97,
              50,
              101,
              51,
              45,
              55,
              101,
              48,
              57,
              51,
              97,
              54,
              51,
              100,
              53,
              97,
              49,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              101,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              105,
              115,
              97,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              101,
              110,
              32,
              76,
              105,
              115,
              97,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              54,
              49,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              78,
              77,
              50,
              105,
              52,
              90,
              84,
              77,
              84,
              114,
              105,
              87,
              69,
              47,
              105,
              81,
              76,
              98,
              99,
              74,
              101,
              103,
              36,
              119,
              100,
              81,
              69,
              74,
              121,
              68,
              49,
              113,
              81,
              107,
              76,
              109,
              43,
              101,
              57,
              74,
              118,
              118,
              83,
              117,
              80,
              82,
              110,
              88,
              118,
              56,
              78,
              120,
              98,
              104,
              43,
              89,
              89,
              48,
              116,
              119,
              81,
              51,
              113,
              122,
              90,
              65,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              55,
              84,
              48,
              52,
              58,
              53,
              54,
              58,
              50,
              50,
              46,
              52,
              49,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              55,
              84,
              48,
              55,
              58,
              53,
              48,
              58,
              52,
              48,
              46,
              56,
              54,
              56,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              55,
              84,
              48,
              55,
              58,
              53,
              48,
              58,
              49,
              51,
              46,
              50,
              49,
              51,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              57,
              49,
              53,
              49,
              100,
              56,
              49,
              45,
              101,
              54,
              55,
              53,
              45,
              52,
              53,
              97,
              48,
              45,
              56,
              55,
              100,
              49,
              45,
              101,
              99,
              48,
              101,
              57,
              100,
              101,
              98,
              100,
              102,
              48,
              51,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              121,
              100,
              101,
              108,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              114,
              105,
              101,
              100,
              114,
              105,
              99,
              104,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              121,
              100,
              101,
              108,
              32,
              70,
              114,
              105,
              101,
              100,
              114,
              105,
              99,
              104,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              52,
              51,
              52,
              56,
              50,
              64,
              101,
              45,
              114,
              101,
              99,
              111,
              114,
              100,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              118,
              110,
              87,
              79,
              67,
              67,
              81,
              99,
              111,
              89,
              76,
              118,
              53,
              76,
              83,
              113,
              83,
              66,
              100,
              51,
              117,
              119,
              36,
              82,
              49,
              110,
              86,
              49,
              49,
              65,
              114,
              88,
              83,
              115,
              121,
              97,
              112,
              69,
              99,
              116,
              102,
              53,
              67,
              107,
              85,
              48,
              87,
              120,
              102,
              55,
              43,
              75,
              99,
              108,
              75,
              65,
              99,
              86,
              103,
              48,
              52,
              57,
              101,
              78,
              43,
              52,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              48,
              57,
              58,
              50,
              54,
              58,
              53,
              57,
              46,
              55,
              51,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              48,
              57,
              58,
              51,
              56,
              58,
              49,
              54,
              46,
              50,
              55,
              48,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              48,
              57,
              58,
              51,
              56,
              58,
              49,
              54,
              46,
              50,
              55,
              48,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              54,
              57,
              101,
              98,
              48,
              56,
              48,
              45,
              56,
              48,
              48,
              56,
              45,
              52,
              54,
              98,
              97,
              45,
              97,
              50,
              97,
              102,
              45,
              56,
              101,
              98,
              57,
              97,
              48,
              50,
              56,
              50,
              55,
              52,
              52,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              105,
              99,
              104,
              97,
              101,
              108,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              75,
              97,
              114,
              101,
              110,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              105,
              99,
              104,
              97,
              101,
              108,
              32,
              75,
              97,
              114,
              101,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              50,
              54,
              55,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              80,
              55,
              105,
              51,
              71,
              66,
              80,
              86,
              49,
              71,
              82,
              102,
              55,
              81,
              88,
              84,
              68,
              71,
              87,
              51,
              56,
              65,
              36,
              100,
              108,
              105,
              119,
              85,
              56,
              89,
              110,
              53,
              70,
              110,
              43,
              74,
              84,
              86,
              51,
              109,
              108,
              80,
              103,
              77,
              110,
              47,
              88,
              108,
              111,
              73,
              54,
              101,
              89,
              67,
              117,
              114,
              117,
              118,
              108,
              83,
              99,
              109,
              116,
              48,
              83,
              56,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              51,
              55,
              46,
              54,
              48,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              52,
              52,
              58,
              51,
              55,
              46,
              54,
              48,
              49,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              99,
              102,
              49,
              50,
              56,
              51,
              57,
              97,
              45,
              55,
              99,
              49,
              101,
              45,
              52,
              99,
              53,
              99,
              45,
              57,
              48,
              99,
              97,
              45,
              102,
              102,
              48,
              97,
              57,
              53,
              101,
              56,
              53,
              54,
              52,
              49,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              121,
              100,
              101,
              108,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              114,
              105,
              101,
              100,
              114,
              105,
              99,
              104,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              121,
              100,
              101,
              108,
              32,
              70,
              114,
              105,
              101,
              100,
              114,
              105,
              99,
              104,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              52,
              54,
              53,
              57,
              52,
              64,
              101,
              45,
              114,
              101,
              99,
              111,
              114,
              100,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              122,
              74,
              48,
              48,
              89,
              115,
              83,
              116,
              72,
              70,
              104,
              67,
              55,
              113,
              82,
              111,
              84,
              81,
              100,
              73,
              122,
              119,
              36,
              87,
              83,
              114,
              55,
              51,
              108,
              111,
              77,
              54,
              43,
              110,
              100,
              65,
              90,
              101,
              102,
              70,
              77,
              52,
              77,
              56,
              75,
              78,
              48,
              68,
              66,
              77,
              53,
              52,
              106,
              49,
              57,
              114,
              114,
              108,
              98,
              105,
              120,
              108,
              75,
              109,
              43,
              85,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              48,
              55,
              58,
              50,
              51,
              58,
              48,
              55,
              46,
              56,
              57,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              48,
              55,
              58,
              50,
              51,
              58,
              48,
              55,
              46,
              56,
              57,
              51,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              97,
              98,
              56,
              49,
              50,
              102,
              53,
              56,
              45,
              48,
              56,
              54,
              100,
              45,
              52,
              50,
              51,
              102,
              45,
              56,
              52,
              52,
              98,
              45,
              49,
              51,
              57,
              54,
              53,
              51,
              52,
              99,
              54,
              99,
              99,
              102,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              97,
              116,
              114,
              105,
              99,
              105,
              97,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              77,
              97,
              114,
              121,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              97,
              116,
              114,
              105,
              99,
              105,
              97,
              32,
              77,
              97,
              114,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              49,
              53,
              57,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              70,
              112,
              43,
              78,
              86,
              73,
              106,
              85,
              117,
              84,
              83,
              49,
              117,
              66,
              50,
              71,
              116,
              79,
              112,
              72,
              99,
              81,
              36,
              51,
              65,
              70,
              105,
              110,
              90,
              53,
              120,
              98,
              99,
              108,
              55,
              50,
              43,
              110,
              112,
              98,
              51,
              116,
              67,
              68,
              73,
              55,
              67,
              99,
              112,
              109,
              70,
              54,
              87,
              90,
              65,
              118,
              65,
              77,
              70,
              48,
              116,
              67,
              111,
              85,
              49,
              107,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              57,
              58,
              51,
              50,
              58,
              50,
              56,
              46,
              49,
              52,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              57,
              58,
              51,
              50,
              58,
              50,
              57,
              46,
              52,
              53,
              52,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              48,
              57,
              58,
              51,
              50,
              58,
              50,
              56,
              46,
              53,
              51,
              52,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              97,
              52,
              54,
              100,
              50,
              49,
              55,
              53,
              45,
              50,
              54,
              101,
              100,
              45,
              52,
              51,
              101,
              49,
              45,
              97,
              54,
              55,
              48,
              45,
              53,
              54,
              48,
              54,
              57,
              97,
              50,
              57,
              52,
              50,
              56,
              101,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              104,
              97,
              114,
              108,
              101,
              115,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              101,
              110,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              104,
              97,
              114,
              108,
              101,
              115,
              32,
              66,
              101,
              110,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              57,
              54,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              98,
              105,
              66,
              120,
              57,
              97,
              77,
              43,
              53,
              67,
              108,
              79,
              101,
              119,
              109,
              89,
              82,
              47,
              49,
              70,
              69,
              119,
              36,
              78,
              97,
              66,
              113,
              56,
              52,
              100,
              55,
              57,
              74,
              86,
              86,
              116,
              105,
              79,
              74,
              122,
              88,
              74,
              84,
              103,
              108,
              56,
              67,
              121,
              106,
              99,
              120,
              119,
              84,
              83,
              56,
              75,
              103,
              121,
              111,
              107,
              113,
              102,
              115,
              80,
              122,
              65,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              53,
              58,
              51,
              52,
              58,
              48,
              51,
              46,
              54,
              52,
              57,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              53,
              58,
              52,
              52,
              58,
              51,
              48,
              46,
              49,
              51,
              51,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              53,
              58,
              51,
              52,
              58,
              48,
              57,
              46,
              51,
              57,
              55,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              57,
              100,
              97,
              50,
              99,
              48,
              55,
              48,
              45,
              97,
              56,
              51,
              102,
              45,
              52,
              48,
              56,
              56,
              45,
              98,
              48,
              102,
              57,
              45,
              99,
              101,
              56,
              51,
              100,
              57,
              57,
              51,
              99,
              48,
              102,
              98,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              82,
              111,
              100,
              114,
              105,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              109,
              101,
              115,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              82,
              111,
              100,
              114,
              105,
              32,
              74,
              97,
              109,
              101,
              115,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              49,
              54,
              53,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              104,
              103,
              113,
              115,
              73,
              116,
              67,
              119,
              111,
              70,
              114,
              118,
              115,
              56,
              88,
              66,
              105,
              76,
              111,
              84,
              112,
              103,
              36,
              47,
              112,
              121,
              81,
              52,
              99,
              72,
              104,
              69,
              52,
              54,
              97,
              117,
              50,
              78,
              114,
              115,
              66,
              110,
              110,
              116,
              97,
              79,
              71,
              119,
              74,
              117,
              82,
              105,
              99,
              81,
              49,
              102,
              85,
              110,
              107,
              122,
              71,
              101,
              67,
              86,
              97,
              85,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              115,
              116,
              111,
              114,
              97,
              103,
              101,
              46,
              103,
              111,
              111,
              103,
              108,
              101,
              97,
              112,
              105,
              115,
              46,
              99,
              111,
              109,
              47,
              100,
              97,
              110,
              100,
              121,
              115,
              45,
              55,
              100,
              101,
              56,
              49,
              46,
              97,
              112,
              112,
              115,
              112,
              111,
              116,
              46,
              99,
              111,
              109,
              47,
              97,
              118,
              97,
              116,
              97,
              114,
              37,
              50,
              70,
              105,
              109,
              97,
              103,
              101,
              115,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              49,
              50,
              58,
              49,
              50,
              58,
              53,
              55,
              46,
              49,
              48,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              49,
              50,
              58,
              50,
              48,
              58,
              50,
              56,
              46,
              53,
              54,
              54,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              54,
              84,
              49,
              50,
              58,
              49,
              51,
              58,
              48,
              50,
              46,
              49,
              50,
              55,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              57,
              49,
              50,
              101,
              55,
              56,
              102,
              56,
              45,
              56,
              56,
              102,
              51,
              45,
              52,
              100,
              101,
              98,
              45,
              97,
              57,
              52,
              54,
              45,
              51,
              50,
              101,
              97,
              97,
              55,
              54,
              57,
              55,
              48,
              100,
              54,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              97,
              114,
              97,
              104,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              121,
              100,
              101,
              108,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              97,
              114,
              97,
              104,
              32,
              70,
              121,
              100,
              101,
              108,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              51,
              50,
              51,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              68,
              70,
              68,
              110,
              83,
              86,
              53,
              117,
              121,
              52,
              114,
              100,
              110,
              51,
              118,
              84,
              56,
              52,
              83,
              82,
              75,
              119,
              36,
              106,
              78,
              72,
              70,
              80,
              81,
              57,
              117,
              106,
              65,
              43,
              80,
              68,
              83,
              70,
              51,
              77,
              118,
              114,
              116,
              122,
              75,
              106,
              84,
              82,
              99,
              104,
              85,
              77,
              87,
              56,
              115,
              105,
              83,
              105,
              50,
              54,
              101,
              67,
              111,
              98,
              76,
              99,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              52,
              55,
              58,
              49,
              57,
              46,
              56,
              56,
              50,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              52,
              55,
              58,
              49,
              57,
              46,
              56,
              56,
              50,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              57,
              48,
              101,
              97,
              55,
              99,
              97,
              50,
              45,
              49,
              98,
              52,
              98,
              45,
              52,
              99,
              101,
              56,
              45,
              57,
              102,
              51,
              51,
              45,
              55,
              56,
              102,
              56,
              54,
              101,
              102,
              57,
              48,
              101,
              52,
              49,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              101,
              116,
              116,
              121,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              108,
              105,
              122,
              97,
              98,
              101,
              116,
              104,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              101,
              116,
              116,
              121,
              32,
              69,
              108,
              105,
              122,
              97,
              98,
              101,
              116,
              104,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              53,
              57,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              102,
              99,
              67,
              112,
              79,
              109,
              80,
              65,
              114,
              106,
              117,
              85,
              71,
              74,
              77,
              118,
              110,
              116,
              48,
              118,
              115,
              81,
              36,
              104,
              50,
              54,
              89,
              99,
              75,
              50,
              52,
              121,
              88,
              116,
              112,
              74,
              99,
              110,
              78,
              109,
              116,
              109,
              54,
              108,
              112,
              67,
              89,
              69,
              74,
              105,
              114,
              52,
              103,
              102,
              99,
              43,
              52,
              69,
              98,
              50,
              111,
              120,
              87,
              99,
              51,
              111,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              50,
              48,
              58,
              49,
              50,
              58,
              53,
              54,
              46,
              52,
              54,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              50,
              48,
              58,
              49,
              51,
              58,
              48,
              52,
              46,
              53,
              51,
              57,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              50,
              48,
              58,
              49,
              51,
              58,
              48,
              52,
              46,
              53,
              51,
              56,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              56,
              100,
              54,
              98,
              54,
              101,
              101,
              55,
              45,
              48,
              50,
              97,
              97,
              45,
              52,
              48,
              55,
              54,
              45,
              57,
              101,
              50,
              56,
              45,
              53,
              102,
              50,
              53,
              48,
              99,
              102,
              102,
              50,
              98,
              55,
              102,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              97,
              110,
              100,
              114,
              97,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              97,
              109,
              101,
              115,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              97,
              110,
              100,
              114,
              97,
              32,
              74,
              97,
              109,
              101,
              115,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              57,
              53,
              49,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              102,
              57,
              49,
              100,
              118,
              47,
              50,
              83,
              77,
              120,
              79,
              120,
              110,
              122,
              49,
              72,
              68,
              122,
              52,
              111,
              67,
              103,
              36,
              116,
              55,
              110,
              69,
              113,
              112,
              68,
              120,
              53,
              81,
              110,
              109,
              66,
              100,
              50,
              43,
              99,
              118,
              78,
              57,
              116,
              81,
              117,
              110,
              111,
              119,
              76,
              118,
              66,
              49,
              120,
              88,
              57,
              74,
              121,
              102,
              105,
              76,
              83,
              73,
              83,
              68,
              103,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              55,
              84,
              49,
              55,
              58,
              53,
              52,
              58,
              53,
              48,
              46,
              50,
              55,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              55,
              84,
              49,
              55,
              58,
              53,
              52,
              58,
              53,
              50,
              46,
              48,
              53,
              48,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              55,
              84,
              49,
              55,
              58,
              53,
              52,
              58,
              53,
              48,
              46,
              56,
              55,
              56,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              56,
              52,
              48,
              50,
              51,
              48,
              98,
              53,
              45,
              49,
              98,
              57,
              57,
              45,
              52,
              102,
              97,
              54,
              45,
              98,
              48,
              57,
              48,
              45,
              50,
              99,
              100,
              101,
              102,
              97,
              55,
              50,
              99,
              50,
              98,
              102,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              104,
              114,
              105,
              115,
              116,
              111,
              112,
              104,
              101,
              114,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              74,
              111,
              104,
              110,
              32,
              67,
              104,
              114,
              105,
              115,
              116,
              111,
              112,
              104,
              101,
              114,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              54,
              56,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              122,
              105,
              107,
              68,
              79,
              113,
              51,
              51,
              85,
              122,
              88,
              82,
              83,
              67,
              115,
              43,
              113,
              75,
              43,
              107,
              110,
              65,
              36,
              72,
              71,
              98,
              98,
              98,
              116,
              111,
              116,
              80,
              80,
              119,
              69,
              87,
              100,
              81,
              105,
              76,
              76,
              79,
              88,
              77,
              101,
              105,
              72,
              74,
              57,
              101,
              104,
              105,
              76,
              99,
              122,
              65,
              101,
              74,
              49,
              55,
              68,
              71,
              106,
              81,
              112,
              73,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              50,
              49,
              58,
              50,
              53,
              58,
              53,
              56,
              46,
              49,
              48,
              48,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              50,
              49,
              58,
              50,
              53,
              58,
              53,
              57,
              46,
              52,
              48,
              57,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              50,
              49,
              58,
              50,
              53,
              58,
              53,
              56,
              46,
              52,
              56,
              53,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              55,
              51,
              97,
              97,
              50,
              99,
              52,
              57,
              45,
              49,
              102,
              102,
              57,
              45,
              52,
              99,
              102,
              51,
              45,
              98,
              51,
              52,
              52,
              45,
              100,
              50,
              56,
              98,
              52,
              98,
              98,
              49,
              48,
              97,
              100,
              102,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              104,
              117,
              107,
              111,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              102,
              101,
              109,
              101,
              110,
              97,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              97,
              114,
              97,
              104,
              32,
              74,
              101,
              115,
              115,
              105,
              99,
              97,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              52,
              52,
              52,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              34,
              48,
              56,
              49,
              51,
              49,
              49,
              52,
              52,
              49,
              49,
              48,
              34,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              118,
              74,
              43,
              102,
              108,
              104,
              83,
              48,
              85,
              99,
              118,
              89,
              120,
              43,
              69,
              113,
              56,
              115,
              43,
              101,
              71,
              103,
              36,
              122,
              112,
              113,
              107,
              47,
              70,
              57,
              54,
              108,
              67,
              71,
              114,
              100,
              78,
              43,
              76,
              87,
              100,
              105,
              68,
              85,
              84,
              116,
              102,
              51,
              78,
              69,
              82,
              80,
              106,
              56,
              122,
              81,
              89,
              112,
              71,
              51,
              79,
              43,
              43,
              53,
              112,
              65,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              51,
              58,
              52,
              54,
              58,
              53,
              55,
              46,
              57,
              49,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              55,
              58,
              52,
              53,
              58,
              52,
              51,
              46,
              56,
              51,
              48,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              54,
              58,
              51,
              55,
              58,
              50,
              53,
              46,
              50,
              51,
              55,
              90,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              55,
              49,
              53,
              52,
              53,
              99,
              55,
              55,
              45,
              56,
              48,
              49,
              56,
              45,
              52,
              57,
              101,
              102,
              45,
              98,
              57,
              99,
              97,
              45,
              101,
              97,
              50,
              50,
              98,
              102,
              51,
              48,
              50,
              57,
              54,
              52,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              97,
              116,
              114,
              105,
              99,
              105,
              97,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              68,
              97,
              110,
              105,
              101,
              108,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              80,
              97,
              116,
              114,
              105,
              99,
              105,
              97,
              32,
              68,
              97,
              110,
              105,
              101,
              108,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              95,
              52,
              53,
              52,
              64,
              101,
              120,
              97,
              109,
              112,
              108,
              101,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              58,
              34,
              36,
              97,
              114,
              103,
              111,
              110,
              50,
              105,
              100,
              36,
              118,
              61,
              49,
              57,
              36,
              109,
              61,
              52,
              48,
              57,
              54,
              44,
              116,
              61,
              51,
              44,
              112,
              61,
              49,
              36,
              122,
              67,
              80,
              69,
              67,
              97,
              113,
              121,
              53,
              110,
              67,
              103,
              113,
              83,
              109,
              43,
              71,
              101,
              52,
              53,
              73,
              103,
              36,
              88,
              81,
              119,
              52,
              113,
              119,
              86,
              103,
              106,
              66,
              111,
              50,
              121,
              51,
              121,
              52,
              51,
              114,
              107,
              69,
              121,
              90,
              76,
              67,
              71,
              72,
              54,
              101,
              113,
              116,
              121,
              122,
              72,
              110,
              90,
              109,
              115,
              43,
              110,
              66,
              71,
              100,
              119,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              103,
              101,
              110,
              100,
              101,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              34,
              58,
              34,
              34,
              44,
              34,
              110,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              67,
              111,
              110,
              102,
              105,
              114,
              109,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              86,
              101,
              114,
              105,
              102,
              105,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              105,
              115,
              65,
              99,
              116,
              105,
              118,
              101,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              105,
              115,
              83,
              117,
              115,
              112,
              101,
              110,
              100,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              79,
              116,
              112,
              67,
              111,
              100,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              51,
              48,
              58,
              53,
              53,
              46,
              55,
              50,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              48,
              58,
              51,
              48,
              58,
              53,
              53,
              46,
              55,
              50,
              49,
              90,
              34,
              44,
              34,
              105,
              115,
              65,
              100,
              109,
              105,
              110,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              118,
              105,
              99,
              101,
              84,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              34,
              44,
              34,
              100,
              111,
              98,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              108,
              97,
              115,
              116,
              76,
              111,
              103,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              116,
              114,
              97,
              110,
              115,
              97,
              99,
              116,
              105,
              111,
              110,
              80,
              105,
              110,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              99,
              99,
              111,
              117,
              110,
              116,
              84,
              121,
              112,
              101,
              34,
              58,
              34,
              83,
              69,
              76,
              76,
              69,
              82,
              34,
              125,
              93,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              80,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              112,
              97,
              103,
              101,
              83,
              105,
              122,
              101,
              34,
              58,
              50,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              97,
              103,
              101,
              115,
              34,
              58,
              50,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              51,
              50,
              44,
              34,
              104,
              97,
              115,
              80,
              114,
              101,
              118,
              105,
              111,
              117,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              104,
              97,
              115,
              78,
              101,
              120,
              116,
              34,
              58,
              116,
              114,
              117,
              101,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 92,
          "responseSize": 15512
        },
        "id": "fc57dd6c-58af-4fc2-a42f-e2caeb33e33a",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is in JSON format",
            "skipped": false
          },
          {
            "assertion": "Response contains expected fields",
            "skipped": false
          },
          {
            "assertion": "User data structure is correct",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "334bda1b-c3dd-40dd-add5-3be8d314f380",
          "length": 40,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a2c35908-1af0-4b80-bba3-8c84b9634e4d"
        },
        "item": {
          "id": "9fccf26f-f573-4edf-aa09-71ad96a76aa7",
          "name": "make user admin",
          "request": {
            "url": {
              "path": [
                "admin",
                "make-user-admin"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "x-access-token",
                "value": "{{token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"testog@e-record.com\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "943fb355-4353-4065-ad25-322ed5680b0c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Response status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response time is less than 800ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(800);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response body has 'success' field set to true\", function () {\r",
                  "    pm.expect(pm.response.json().success).to.be.true;\r",
                  "});\r",
                  "\r",
                  "pm.test(\"Response body has 'message' field with value 'User profile updated successfully.'\", function () {\r",
                  "    pm.expect(pm.response.json().message).to.equal(\"User profile updated successfully.\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "657f71c1-47be-4d91-ade1-17a47f731e7f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "admin",
              "make-user-admin"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "x-access-token",
              "value": ""
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "efbaadf1-5aff-4571-b306-8b68a91b620f",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "38",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"email\": \"testog@e-record.com\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "31d8f5a2-a5cc-4a37-b779-c80efea472cd",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:06 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "63"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              32,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              46,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 92,
          "responseSize": 63
        },
        "id": "9fccf26f-f573-4edf-aa09-71ad96a76aa7",
        "assertions": [
          {
            "assertion": "Response status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 800ms",
            "skipped": false
          },
          {
            "assertion": "Response body has 'success' field set to true",
            "skipped": false
          },
          {
            "assertion": "Response body has 'message' field with value 'User profile updated successfully.'",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "db5674a1-d276-4259-b45f-dd544de61ad9",
          "length": 40,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "59b509c7-9755-4fb1-89da-2a414125ece8"
        },
        "item": {
          "id": "e3bb1f2b-68da-48d0-b620-1e275bc92302",
          "name": "make admin user",
          "request": {
            "url": {
              "path": [
                "admin",
                "make-admin-user"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"email\": \"testog@e-record.com\"\r\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0ee7c7fb-96c2-4d21-8d21-a1db21a6c9fd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Validate response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Validate response format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// Validate required response fields\r",
                  "pm.test(\"Response contains expected fields\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "    pm.expect(jsonData).to.have.property(\"message\");\r",
                  "});\r",
                  "\r",
                  "// Validate message in the response\r",
                  "pm.test(\"Message in the response is 'User profile updated successfully.'\", function () {\r",
                  "    pm.expect(jsonData.message).to.equal(\"User profile updated successfully.\");\r",
                  "});\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "10234f14-314d-41d6-a03c-e77166823722"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "admin",
              "make-admin-user"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "38a2a0ee-9a12-47ad-a66e-4e61aeb28a91",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "40",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\r\n    \"email\": \"testog@e-record.com\"\r\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "48026f3e-5f04-48ba-9a6e-32a5dc1be343",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:07 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "63"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              32,
              112,
              114,
              111,
              102,
              105,
              108,
              101,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              46,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 89,
          "responseSize": 63
        },
        "id": "e3bb1f2b-68da-48d0-b620-1e275bc92302",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response is in JSON format",
            "skipped": false
          },
          {
            "assertion": "Response contains expected fields",
            "skipped": false
          },
          {
            "assertion": "Message in the response is 'User profile updated successfully.'",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1262bcd7-d24c-4a84-9de3-219529e5c9ba",
          "length": 40,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "898bd43f-ff21-4cf4-abd7-6600555e3afa"
        },
        "item": {
          "id": "922b9511-fcd0-43ec-98b4-fb8305ee7faa",
          "name": "suspend user",
          "request": {
            "url": {
              "path": [
                "admin",
                "user",
                "suspend"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "admin",
              "user",
              "suspend"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2b5a0440-a3bb-4f49-954a-14b7535c561b",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "6c2e4b8d-df92-439f-8bac-2b74d2915e78",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:07 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "44"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 85,
          "responseSize": 44
        },
        "id": "922b9511-fcd0-43ec-98b4-fb8305ee7faa"
      },
      {
        "cursor": {
          "ref": "3413e138-b4ba-4628-b020-ca8773e8717e",
          "length": 40,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "a807afe3-2d29-4c3a-abf6-f08416436194"
        },
        "item": {
          "id": "a004f54a-5d5b-4655-975c-2c5ae89e642a",
          "name": "unsuspend user",
          "request": {
            "url": {
              "path": [
                "admin",
                "user",
                "unsuspend",
                ":id"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "ec73234f-5419-4953-855b-2c4c21307b67",
                  "key": "id"
                }
              ]
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "// {\r\n//     \"email\": \"testog@e-record.com\"\r\n// }",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "admin",
              "user",
              "unsuspend",
              "ec73234f-5419-4953-855b-2c4c21307b67"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c2df930c-0bf1-4487-a8f0-b3bcb05ec4ab",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "2",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "\n\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "58ef4e1c-8561-405b-9cab-a610ba28b484",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:07 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "58"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              110,
              101,
              120,
              112,
              101,
              99,
              116,
              101,
              100,
              32,
              101,
              110,
              100,
              32,
              111,
              102,
              32,
              74,
              83,
              79,
              78,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 82,
          "responseSize": 58
        },
        "id": "a004f54a-5d5b-4655-975c-2c5ae89e642a"
      },
      {
        "cursor": {
          "ref": "3c845f43-b7c9-4a2e-b6dd-371197fba608",
          "length": 40,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "19ed8d8d-b470-4413-b11f-4442f84cb7ae"
        },
        "item": {
          "id": "fc411c8b-215f-4bf6-a27e-ee7c6e948f39",
          "name": "config",
          "request": {
            "url": {
              "path": [
                "admin",
                "config"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b0db7cf7-5a56-4aa5-a504-90d715c68420",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test for the status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Test for response time\r",
                  "pm.test(\"Response time is less than 500ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                  "});\r",
                  "\r",
                  "// Test for response body properties\r",
                  "pm.test(\"Response body has required properties\", function () {\r",
                  "    pm.response.to.have.jsonBody('success');\r",
                  "    pm.response.to.have.jsonBody('message');\r",
                  "    pm.response.to.have.jsonBody('data');\r",
                  "});\r",
                  "\r",
                  "// Test for specific values in the response body\r",
                  "pm.test(\"Success is true and message is 'Config fetched successfully.'\", function () {\r",
                  "    pm.expect(pm.response.json().success).to.be.true;\r",
                  "    pm.expect(pm.response.json().message).to.equal(\"Config fetched successfully.\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "cbd52a5a-6393-4617-a64b-f9de3834f583"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "admin",
              "config"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "48cb4da3-96e1-4242-900f-f3c750737c6a",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "e86749d8-0fa1-4495-b6e7-20a864cd1182",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:07 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "69"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              111,
              110,
              102,
              105,
              103,
              32,
              102,
              101,
              116,
              99,
              104,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              46,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 87,
          "responseSize": 69
        },
        "id": "fc411c8b-215f-4bf6-a27e-ee7c6e948f39",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response time is less than 500ms",
            "skipped": false
          },
          {
            "assertion": "Response body has required properties",
            "skipped": false
          },
          {
            "assertion": "Success is true and message is 'Config fetched successfully.'",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a4cefd37-9c3a-4313-81ec-e57083b6aa2a",
          "length": 40,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cf52c668-d38d-4b52-bd2f-1933399a5916"
        },
        "item": {
          "id": "0b0bbaca-55b1-4d35-a423-263c74b08dd5",
          "name": "config",
          "request": {
            "url": {
              "path": [
                "admin",
                "config"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "admin",
              "config"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "75df2cd1-9cf4-42e3-be5e-58724d841ffa",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "b08d3fa0-3af7-428a-af83-1b4f5613060e",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:07 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "44"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              111,
              98,
              106,
              101,
              99,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 85,
          "responseSize": 44
        },
        "id": "0b0bbaca-55b1-4d35-a423-263c74b08dd5"
      },
      {
        "cursor": {
          "ref": "53cc2a54-0d6f-4b5a-a09f-398c1ed1caf1",
          "length": 40,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "828e1b46-02fe-4d86-b59b-9d81325bb160"
        },
        "item": {
          "id": "f74798e9-c6e1-4c6d-b067-71b9717d5449",
          "name": "avatar",
          "request": {
            "url": {
              "path": [
                "user",
                "avatar"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "avatar",
                  "type": "file",
                  "src": "postman-cloud:///1f00a020-2861-4780-8431-d61fc2551cd6"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "210309b7-c4d4-4e8d-b850-8292c615b050",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response message\r",
                  "pm.test(\"Response contains success message\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Profile picture set successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate avatar URL is returned\r",
                  "pm.test(\"Response contains an avatar URL\", function () {\r",
                  "    pm.expect(jsonData.data).to.have.property(\"profilePicture\").that.is.a(\"string\").and.includes(\"http\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate authorization requirement\r",
                  "pm.test(\"Request requires authorization\", function () {\r",
                  "    pm.response.to.not.have.status(401);\r",
                  "});\r",
                  "\r",
                  "// ✅ Store avatar URL in environment variable for future use\r",
                  "if (jsonData.data.avatar) {\r",
                  "    pm.environment.set(\"uploadedAvatarUrl\", jsonData.data.avatar);\r",
                  "    console.log(\"Avatar uploaded:\", jsonData.data.avatar);\r",
                  "}\r",
                  ""
                ],
                "_lastExecutionId": "4e90ff61-5d8f-4d78-8fad-366e3cc03331"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "user",
              "avatar"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "21b7d72a-3c26-4f7d-9238-718efc3a9df8",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "avatar",
                "type": "file",
                "src": "postman-cloud:///1f00a020-2861-4780-8431-d61fc2551cd6",
                "disabled": true
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "6f93901f-730b-446b-808b-535a26b63245",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:07 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "63"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              110,
              32,
              105,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              115,
              101,
              114,
              118,
              101,
              114,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 84,
          "responseSize": 63
        },
        "id": "f74798e9-c6e1-4c6d-b067-71b9717d5449",
        "assertions": [
          {
            "assertion": "Response is in JSON format",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:2:21)"
            }
          },
          {
            "assertion": "Response contains success flag",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response contains success flag",
              "message": "expected { success: false, …(1) } to have property 'success' of true, but got false",
              "stack": "AssertionError: expected { success: false, …(1) } to have property 'success' of true, but got false\n   at Object.eval sandbox-script.js:3:21)"
            }
          },
          {
            "assertion": "Response contains success message",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Response contains success message",
              "message": "expected 'An internal server error occurred' to include 'Profile picture set successfully'",
              "stack": "AssertionError: expected 'An internal server error occurred' to include 'Profile picture set successfully'\n   at Object.eval sandbox-script.js:4:21)"
            }
          },
          {
            "assertion": "Response contains an avatar URL",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "Response contains an avatar URL",
              "message": "Target cannot be null or undefined.",
              "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:5:21)"
            }
          },
          {
            "assertion": "Request requires authorization",
            "skipped": false
          }
        ],
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'avatar')",
              "checksum": "d02a1f2d357a46a1d204d8a91167737c",
              "id": "7ba33d2d-e24f-49c3-9685-23e4b4eb49ee",
              "timestamp": 1747063087672,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3be21d6b-6371-49ee-878b-8f462b20053b",
          "length": 40,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1a6d3cc7-ed07-4120-b42e-ab3a72dae226"
        },
        "item": {
          "id": "b8453c1d-17c1-40c1-9dfd-1fafa97dd316",
          "name": "Create Category",
          "request": {
            "url": {
              "path": [
                "admin",
                "category"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{{currentPayload}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bf7cbaba-1179-4561-9cc4-82b7f688533a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Test Case: Verify Status Code 201 (Created)\r",
                  "pm.test(\"Status code is 201 - Category Created\", function () {\r",
                  "    pm.response.to.have.status(200 || 201);\r",
                  "});\r",
                  "\r",
                  "// ✅ Test Case: Response Contains Success Message\r",
                  "pm.test(\"Response includes success message\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Category created\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Test Case: Validate Category ID Exists\r",
                  "pm.test(\"Response contains categoryId\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.data).to.have.property(\"id\").that.is.a(\"string\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Test Case: Response Time Within Limits\r",
                  "pm.test(\"Response time is under 1000ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "});\r",
                  "\r",
                  "// ✅ Test Case: Attempt to Create Duplicate Category (Should Fail)\r",
                  "pm.test(\"Duplicate category creation should fail\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    if (pm.response.code === 400) {\r",
                  "        pm.expect(jsonData).to.have.property(\"error\").that.includes(\"already exists\");\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "pm.environment.set(\"categoryId\", pm.response.json().data.id);\r",
                  ""
                ],
                "_lastExecutionId": "b6bdb0f4-7922-4f33-80a6-2d0e989e6b14"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c85ee4b7-eb6c-48b7-a8a0-683cc75c5c2b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Ensure admin token exists\r",
                  "if (!pm.environment.get(\"admin_token\")) {\r",
                  "    console.warn(\"⚠️ Warning: Missing 'admin_token'. Ensure authentication is set.\");\r",
                  "}\r",
                  "\r",
                  "// Category Data Pool\r",
                  "const categories = [\r",
                  "    { name: \"Foregin Fragrance\", description: \"Luxurious perfumes, body mists, and essential oils to express your style.\" },\r",
                  "    { name: \"Local Fragrance\", description: \"Luxurious perfumes, body mists, and essential oils to express your style.\" },\r",
                  "    { name: \"Foreign Cosmetics\", description: \"Enhance beauty with premium skincare, makeup, and beauty essentials.\" },\r",
                  "    { name: \"Local Cosmetics\", description: \"Enhance beauty with premium skincare, makeup, and beauty essentials.\" },\r",
                  "    { name: \"Chic Clothing\", description: \"Trendy outfits for every season, occasion, and lifestyle.\" },\r",
                  "    { name: \"Stylist Clothing\", description: \"Trendy outfits for every season, occasion, and lifestyle.\" },\r",
                  "    { name: \"Men Clothing\", description: \"Trendy outfits for every season, occasion, and lifestyle.\" },\r",
                  "    { name: \"Women Clothing\", description: \"Trendy outfits for every season, occasion, and lifestyle.\" },\r",
                  "    { name: \"Children Clothing\", description: \"Trendy outfits for every season, occasion, and lifestyle.\" },\r",
                  "    { name: \"Teens Clothing\", description: \"Trendy outfits for every season, occasion, and lifestyle.\" },\r",
                  "    { name: \"Unisex Clothing\", description: \"Trendy outfits for every season, occasion, and lifestyle.\" },\r",
                  "    { name: \"Men Shoe Wears\", description: \"Step up your fashion with stylish and comfortable footwear.\" },\r",
                  "    { name: \"Electronics\", description: \"Latest gadgets, smart devices, and high-tech accessories.\" }\r",
                  "];\r",
                  "\r",
                  "// Randomly select a category\r",
                  "const randomCategory = categories[Math.floor(Math.random() * categories.length)];\r",
                  "\r",
                  "// Set request body dynamically\r",
                  "pm.environment.set(\"currentPayload\", JSON.stringify(randomCategory));\r",
                  "\r",
                  "// Log request payload for debugging\r",
                  "console.log(\"🟢 Auto-generated Category:\", randomCategory);\r",
                  ""
                ],
                "_lastExecutionId": "26bfd33f-e3f6-4651-b5c9-1bfb4edf5196"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "admin",
              "category"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "04c2d78c-745b-450b-a549-74bc9cd23a16",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "101",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"name\":\"Stylist Clothing\",\"description\":\"Trendy outfits for every season, occasion, and lifestyle.\"}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "9b3b37fe-e92d-4f74-90f6-4da5a47d2f46",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:07 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "305"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              32,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              56,
              55,
              49,
              48,
              54,
              102,
              99,
              55,
              45,
              54,
              98,
              50,
              49,
              45,
              52,
              54,
              97,
              57,
              45,
              98,
              48,
              48,
              55,
              45,
              97,
              98,
              48,
              51,
              54,
              51,
              49,
              50,
              54,
              51,
              52,
              56,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              116,
              121,
              108,
              105,
              115,
              116,
              32,
              67,
              108,
              111,
              116,
              104,
              105,
              110,
              103,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              121,
              32,
              111,
              117,
              116,
              102,
              105,
              116,
              115,
              32,
              102,
              111,
              114,
              32,
              101,
              118,
              101,
              114,
              121,
              32,
              115,
              101,
              97,
              115,
              111,
              110,
              44,
              32,
              111,
              99,
              99,
              97,
              115,
              105,
              111,
              110,
              44,
              32,
              97,
              110,
              100,
              32,
              108,
              105,
              102,
              101,
              115,
              116,
              121,
              108,
              101,
              46,
              34,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              49,
              50,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              48,
              55,
              46,
              55,
              50,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              49,
              50,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              48,
              55,
              46,
              55,
              50,
              54,
              90,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 88,
          "responseSize": 305
        },
        "id": "b8453c1d-17c1-40c1-9dfd-1fafa97dd316",
        "assertions": [
          {
            "assertion": "Status code is 201 - Category Created",
            "skipped": false
          },
          {
            "assertion": "Response includes success message",
            "skipped": false
          },
          {
            "assertion": "Response contains categoryId",
            "skipped": false
          },
          {
            "assertion": "Response time is under 1000ms",
            "skipped": false
          },
          {
            "assertion": "Duplicate category creation should fail",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "925f1ced-09b5-46e7-a9a3-6d0c162919fe",
          "length": 40,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a7b6d2d4-a228-48dc-8aa7-cd4d3795473e"
        },
        "item": {
          "id": "9ab3f152-4cbc-4ced-be79-02dafa5b9ea9",
          "name": "Get Categories",
          "request": {
            "url": {
              "path": [
                "admin",
                "category"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9deb947d-8e87-427a-a3e3-0ca3e3e78f7f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Test Case: Verify Status Code 200 (Success)\r",
                  "pm.test(\"Status code is 200 - Categories retrieved successfully\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ Test Case: Validate Success Field\r",
                  "pm.test(\"Response success field should be true\", function () {\r",
                  "    pm.expect(jsonData.success).to.eql(true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Test Case: Validate Message Field\r",
                  "pm.test(\"Response message should confirm category retrieval\", function () {\r",
                  "    pm.expect(jsonData.message).to.eql(\"Category fetched successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Test Case: Ensure Data is an Array\r",
                  "pm.test(\"Response contains a list of categories\", function () {\r",
                  "    pm.expect(jsonData.data).to.be.an(\"array\").that.is.not.empty;\r",
                  "});\r",
                  "\r",
                  "// ✅ Store a Random Category ID as Environment Variable\r",
                  "if (jsonData.data.length > 0) {\r",
                  "    let randomIndex = Math.floor(Math.random() * jsonData.data.length);\r",
                  "    let selectedCategory = jsonData.data[randomIndex]; \r",
                  "    pm.environment.set(\"categoryId\", selectedCategory.id);\r",
                  "    console.log(\"🟢 Randomly Stored Category ID:\", selectedCategory.id);\r",
                  "} else {\r",
                  "    console.warn(\"⚠️ No categories found in response.\");\r",
                  "}\r",
                  "\r",
                  "// ✅ Response Time Test\r",
                  "pm.test(\"Response time is under 1000ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "});\r",
                  "\r",
                  "pm.environment.set(\"categoryId4p\", pm.response.json().data[0].id) // Store the first category ID as an environment variable\r",
                  "\r",
                  "pm.environment.set(\"categoryId\", pm.response.json().data[3].id)"
                ],
                "_lastExecutionId": "e75d91ba-3a5c-4776-bfd8-ba0e60ad3afc"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0ba367b9-ce74-4fc3-905a-3949b59a3cdf",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Ensure admin token exists\r",
                  "if (!pm.environment.get(\"adminAuthToken\")) {\r",
                  "    console.warn(\"⚠️ Missing 'admin_token'. Ensure authentication is set.\");\r",
                  "}\r",
                  "\r",
                  "// Clear previous category ID (optional)\r",
                  "pm.environment.unset(\"categoryId\");\r",
                  ""
                ],
                "_lastExecutionId": "8b922336-0bf6-420b-87f2-067a0f153f92"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "admin",
              "category"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e69d7db8-483f-4672-96e2-bd5f14219c9e",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "55913e02-1854-483f-98d2-5bdfb068a760",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:07 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "1114"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              32,
              102,
              101,
              116,
              99,
              104,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              101,
              52,
              56,
              50,
              102,
              51,
              57,
              45,
              49,
              50,
              56,
              54,
              45,
              52,
              52,
              57,
              53,
              45,
              57,
              101,
              101,
              50,
              45,
              51,
              100,
              97,
              98,
              51,
              56,
              52,
              56,
              56,
              99,
              99,
              51,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              114,
              97,
              103,
              114,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              69,
              108,
              101,
              118,
              97,
              116,
              101,
              32,
              121,
              111,
              117,
              114,
              32,
              115,
              99,
              101,
              110,
              116,
              32,
              119,
              105,
              116,
              104,
              32,
              108,
              117,
              120,
              117,
              114,
              105,
              111,
              117,
              115,
              32,
              112,
              101,
              114,
              102,
              117,
              109,
              101,
              115,
              44,
              32,
              98,
              111,
              100,
              121,
              32,
              109,
              105,
              115,
              116,
              115,
              44,
              32,
              97,
              110,
              100,
              32,
              101,
              115,
              115,
              101,
              110,
              116,
              105,
              97,
              108,
              32,
              111,
              105,
              108,
              115,
              46,
              32,
              70,
              105,
              110,
              100,
              32,
              116,
              104,
              101,
              32,
              112,
              101,
              114,
              102,
              101,
              99,
              116,
              32,
              102,
              114,
              97,
              103,
              114,
              97,
              110,
              99,
              101,
              32,
              116,
              111,
              32,
              101,
              120,
              112,
              114,
              101,
              115,
              115,
              32,
              121,
              111,
              117,
              114,
              32,
              115,
              116,
              121,
              108,
              101,
              32,
              97,
              110,
              100,
              32,
              108,
              101,
              97,
              118,
              101,
              32,
              97,
              32,
              108,
              97,
              115,
              116,
              105,
              110,
              103,
              32,
              105,
              109,
              112,
              114,
              101,
              115,
              115,
              105,
              111,
              110,
              46,
              34,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              52,
              84,
              48,
              57,
              58,
              50,
              49,
              58,
              48,
              55,
              46,
              54,
              48,
              49,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              52,
              84,
              48,
              57,
              58,
              50,
              49,
              58,
              48,
              55,
              46,
              54,
              48,
              49,
              90,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              54,
              49,
              101,
              56,
              98,
              102,
              100,
              48,
              45,
              49,
              51,
              100,
              99,
              45,
              52,
              49,
              97,
              101,
              45,
              97,
              51,
              56,
              54,
              45,
              50,
              99,
              49,
              50,
              99,
              97,
              99,
              57,
              49,
              55,
              49,
              100,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              85,
              110,
              105,
              115,
              101,
              120,
              32,
              67,
              108,
              111,
              116,
              104,
              105,
              110,
              103,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              121,
              32,
              111,
              117,
              116,
              102,
              105,
              116,
              115,
              32,
              102,
              111,
              114,
              32,
              101,
              118,
              101,
              114,
              121,
              32,
              115,
              101,
              97,
              115,
              111,
              110,
              44,
              32,
              111,
              99,
              99,
              97,
              115,
              105,
              111,
              110,
              44,
              32,
              97,
              110,
              100,
              32,
              108,
              105,
              102,
              101,
              115,
              116,
              121,
              108,
              101,
              46,
              34,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              49,
              52,
              58,
              53,
              51,
              58,
              53,
              54,
              46,
              54,
              55,
              51,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              49,
              52,
              58,
              53,
              51,
              58,
              53,
              54,
              46,
              54,
              55,
              51,
              90,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              56,
              99,
              55,
              100,
              50,
              98,
              51,
              45,
              57,
              99,
              97,
              50,
              45,
              52,
              97,
              102,
              53,
              45,
              97,
              50,
              102,
              48,
              45,
              49,
              56,
              101,
              56,
              99,
              98,
              102,
              52,
              53,
              55,
              97,
              100,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              104,
              111,
              101,
              32,
              87,
              101,
              97,
              114,
              115,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              116,
              101,
              112,
              32,
              117,
              112,
              32,
              121,
              111,
              117,
              114,
              32,
              102,
              97,
              115,
              104,
              105,
              111,
              110,
              32,
              119,
              105,
              116,
              104,
              32,
              115,
              116,
              121,
              108,
              105,
              115,
              104,
              32,
              97,
              110,
              100,
              32,
              99,
              111,
              109,
              102,
              111,
              114,
              116,
              97,
              98,
              108,
              101,
              32,
              102,
              111,
              111,
              116,
              119,
              101,
              97,
              114,
              46,
              34,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              52,
              84,
              48,
              57,
              58,
              52,
              50,
              58,
              51,
              54,
              46,
              54,
              54,
              53,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              52,
              84,
              48,
              57,
              58,
              52,
              50,
              58,
              51,
              54,
              46,
              54,
              54,
              53,
              90,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              56,
              55,
              49,
              48,
              54,
              102,
              99,
              55,
              45,
              54,
              98,
              50,
              49,
              45,
              52,
              54,
              97,
              57,
              45,
              98,
              48,
              48,
              55,
              45,
              97,
              98,
              48,
              51,
              54,
              51,
              49,
              50,
              54,
              51,
              52,
              56,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              116,
              121,
              108,
              105,
              115,
              116,
              32,
              67,
              108,
              111,
              116,
              104,
              105,
              110,
              103,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              121,
              32,
              111,
              117,
              116,
              102,
              105,
              116,
              115,
              32,
              102,
              111,
              114,
              32,
              101,
              118,
              101,
              114,
              121,
              32,
              115,
              101,
              97,
              115,
              111,
              110,
              44,
              32,
              111,
              99,
              99,
              97,
              115,
              105,
              111,
              110,
              44,
              32,
              97,
              110,
              100,
              32,
              108,
              105,
              102,
              101,
              115,
              116,
              121,
              108,
              101,
              46,
              34,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              49,
              50,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              48,
              55,
              46,
              55,
              50,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              49,
              50,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              48,
              55,
              46,
              55,
              50,
              54,
              90,
              34,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 86,
          "responseSize": 1114
        },
        "id": "9ab3f152-4cbc-4ced-be79-02dafa5b9ea9",
        "assertions": [
          {
            "assertion": "Status code is 200 - Categories retrieved successfully",
            "skipped": false
          },
          {
            "assertion": "Response success field should be true",
            "skipped": false
          },
          {
            "assertion": "Response message should confirm category retrieval",
            "skipped": false
          },
          {
            "assertion": "Response contains a list of categories",
            "skipped": false
          },
          {
            "assertion": "Response time is under 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e26bb594-9a8b-49ba-bbb7-77396205ddba",
          "length": 40,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "ec5eb702-880f-4594-97d5-6151d1b13315"
        },
        "item": {
          "id": "7dc595ef-498f-4846-89ad-dad3c585f665",
          "name": "Update category",
          "request": {
            "url": {
              "path": [
                "admin",
                "category",
                ":id"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "{{categoryId}}",
                  "key": "id"
                }
              ]
            },
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{{currentPayload}}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "adcc940c-39d1-4cfb-a171-99b2acc09046",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Test Case: Verify Status Code 201 (Created)\r",
                  "pm.test(\"Status code is 201 - Category Created\", function () {\r",
                  "    pm.response.to.have.status(200 || 201);\r",
                  "});\r",
                  "\r",
                  "// ✅ Test Case: Response Contains Success Message\r",
                  "pm.test(\"Response includes success message\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Category updated successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Test Case: Validate Category ID Exists\r",
                  "pm.test(\"Response contains categoryId\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    pm.expect(jsonData.data).to.have.property(\"id\").that.is.a(\"string\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Test Case: Response Time Within Limits\r",
                  "pm.test(\"Response time is under 1000ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "});\r",
                  "\r",
                  "// ✅ Test Case: Attempt to Create Duplicate Category (Should Fail)\r",
                  "pm.test(\"Duplicate category creation should fail\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    if (pm.response.code === 400) {\r",
                  "        pm.expect(jsonData).to.have.property(\"error\").that.includes(\"already exists\");\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "pm.environment.set(\"categoryId\", pm.response.json().data.id);\r",
                  ""
                ],
                "_lastExecutionId": "5e6ff969-0cb9-49b4-9de8-693be7334440"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "694b6734-2062-4e1b-af26-aec167c22989",
                "type": "text/javascript",
                "packages": {},
                "_lastExecutionId": "a64fb723-1ea3-444f-8265-5a632cf56786"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "admin",
              "category",
              "87106fc7-6b21-46a9-b007-ab0363126348"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d141ba27-a1bf-431f-9e7c-574022e5e8a4",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "101",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\"name\":\"Stylist Clothing\",\"description\":\"Trendy outfits for every season, occasion, and lifestyle.\"}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "4daec0e3-84d6-4c49-8646-a7af630678dc",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:07 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "305"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              32,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              56,
              55,
              49,
              48,
              54,
              102,
              99,
              55,
              45,
              54,
              98,
              50,
              49,
              45,
              52,
              54,
              97,
              57,
              45,
              98,
              48,
              48,
              55,
              45,
              97,
              98,
              48,
              51,
              54,
              51,
              49,
              50,
              54,
              51,
              52,
              56,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              116,
              121,
              108,
              105,
              115,
              116,
              32,
              67,
              108,
              111,
              116,
              104,
              105,
              110,
              103,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              121,
              32,
              111,
              117,
              116,
              102,
              105,
              116,
              115,
              32,
              102,
              111,
              114,
              32,
              101,
              118,
              101,
              114,
              121,
              32,
              115,
              101,
              97,
              115,
              111,
              110,
              44,
              32,
              111,
              99,
              99,
              97,
              115,
              105,
              111,
              110,
              44,
              32,
              97,
              110,
              100,
              32,
              108,
              105,
              102,
              101,
              115,
              116,
              121,
              108,
              101,
              46,
              34,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              49,
              50,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              48,
              55,
              46,
              55,
              50,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              49,
              50,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              48,
              55,
              46,
              57,
              54,
              48,
              90,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 91,
          "responseSize": 305
        },
        "id": "7dc595ef-498f-4846-89ad-dad3c585f665",
        "assertions": [
          {
            "assertion": "Status code is 201 - Category Created",
            "skipped": false
          },
          {
            "assertion": "Response includes success message",
            "skipped": false
          },
          {
            "assertion": "Response contains categoryId",
            "skipped": false
          },
          {
            "assertion": "Response time is under 1000ms",
            "skipped": false
          },
          {
            "assertion": "Duplicate category creation should fail",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8494ee1a-71ae-4f52-b216-42175d3df9fb",
          "length": 40,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ab48db45-da95-4b08-af74-8d709c8b87b5"
        },
        "item": {
          "id": "3841fa29-55de-4836-8098-c70b884d0896",
          "name": "Get Category by ID",
          "request": {
            "url": {
              "path": [
                "admin",
                "category",
                ":id"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "{{categoryId}}",
                  "key": "id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c1b3a324-dad5-4547-b080-4b42c7690435",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Test for a successful response status\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// Test for response body properties\r",
                  "pm.test(\"Response body has 'success' property\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property('success');\r",
                  "});\r",
                  "pm.test(\"Response body has 'message' property\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property('message');\r",
                  "});\r",
                  "pm.test(\"Response body has 'data' property\", function () {\r",
                  "    pm.expect(pm.response.json()).to.have.property('data');\r",
                  "});\r",
                  "\r",
                  "// Test for specific data properties\r",
                  "pm.test(\"Data property has 'id' field\", function () {\r",
                  "    pm.expect(pm.response.json().data).to.have.property('id');\r",
                  "});\r",
                  "pm.test(\"Data property has 'name' field\", function () {\r",
                  "    pm.expect(pm.response.json().data).to.have.property('name');\r",
                  "});\r",
                  "pm.test(\"Data property has 'description' field\", function () {\r",
                  "    pm.expect(pm.response.json().data).to.have.property('description');\r",
                  "});\r",
                  "pm.test(\"Data property has 'createdAt' field\", function () {\r",
                  "    pm.expect(pm.response.json().data).to.have.property('createdAt');\r",
                  "});\r",
                  "pm.test(\"Data property has 'updatedAt' field\", function () {\r",
                  "    pm.expect(pm.response.json().data).to.have.property('updatedAt');\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "edbcea57-19b5-464c-ae5e-ace0cee4b1ff"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "admin",
              "category",
              "87106fc7-6b21-46a9-b007-ab0363126348"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4c42b880-507b-43cb-b314-a64b744e5a0d",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "a259d2d1-a7e6-4b83-9a30-5dc5b8481bf9",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:08 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "305"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              32,
              102,
              101,
              116,
              99,
              104,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              56,
              55,
              49,
              48,
              54,
              102,
              99,
              55,
              45,
              54,
              98,
              50,
              49,
              45,
              52,
              54,
              97,
              57,
              45,
              98,
              48,
              48,
              55,
              45,
              97,
              98,
              48,
              51,
              54,
              51,
              49,
              50,
              54,
              51,
              52,
              56,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              116,
              121,
              108,
              105,
              115,
              116,
              32,
              67,
              108,
              111,
              116,
              104,
              105,
              110,
              103,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              121,
              32,
              111,
              117,
              116,
              102,
              105,
              116,
              115,
              32,
              102,
              111,
              114,
              32,
              101,
              118,
              101,
              114,
              121,
              32,
              115,
              101,
              97,
              115,
              111,
              110,
              44,
              32,
              111,
              99,
              99,
              97,
              115,
              105,
              111,
              110,
              44,
              32,
              97,
              110,
              100,
              32,
              108,
              105,
              102,
              101,
              115,
              116,
              121,
              108,
              101,
              46,
              34,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              49,
              50,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              48,
              55,
              46,
              55,
              50,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              49,
              50,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              48,
              55,
              46,
              57,
              54,
              48,
              90,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 85,
          "responseSize": 305
        },
        "id": "3841fa29-55de-4836-8098-c70b884d0896",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response body has 'success' property",
            "skipped": false
          },
          {
            "assertion": "Response body has 'message' property",
            "skipped": false
          },
          {
            "assertion": "Response body has 'data' property",
            "skipped": false
          },
          {
            "assertion": "Data property has 'id' field",
            "skipped": false
          },
          {
            "assertion": "Data property has 'name' field",
            "skipped": false
          },
          {
            "assertion": "Data property has 'description' field",
            "skipped": false
          },
          {
            "assertion": "Data property has 'createdAt' field",
            "skipped": false
          },
          {
            "assertion": "Data property has 'updatedAt' field",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "25d807b2-5822-40ca-b7b0-93b344a59a20",
          "length": 40,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7bf73371-474e-411c-b235-b75dac362217"
        },
        "item": {
          "id": "a6ef8d36-5fd6-4280-bf63-e841d1e953e3",
          "name": "Delete Category",
          "request": {
            "url": {
              "path": [
                "admin",
                "category",
                ":id"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "{{categoryId}}",
                  "key": "id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "cb98c323-54bd-4752-93fc-ded8f0859c7b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// Ensure admin token exists\r",
                  "if (!pm.environment.get(\"adminAuthtoken\")) {\r",
                  "    console.warn(\"⚠️ Missing 'admin_token'. Ensure authentication is set.\");\r",
                  "}\r",
                  "\r",
                  "// Retrieve the category ID from the environment\r",
                  "let categoryId = pm.environment.get(\"categoryId\");\r",
                  "\r",
                  "// Validate if category ID is set\r",
                  "if (!categoryId) {\r",
                  "    console.warn(\"⚠️ Warning: 'categoryId' is missing from environment variables.\");\r",
                  "}\r",
                  "\r",
                  "// Log the category ID for debugging\r",
                  "console.log(\"🟢 Using Category ID:\", categoryId);\r",
                  ""
                ],
                "_lastExecutionId": "58edd2f4-31b2-43c8-8950-3c0da04c76b8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ee0f2df4-5e1c-42e4-a19e-30d3b2da7aa3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Test Case: Verify Status Code 200 (Success)\r",
                  "pm.test(\"Status code is 200 - Category Retrieved\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ Test Case: Validate Response Structure\r",
                  "pm.test(\"Response contains category details\", function () {\r",
                  "    pm.expect(jsonData.data).to.have.property(\"name\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"description\").that.is.a(\"string\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Test Case: Response Time\r",
                  "pm.test(\"Response time is under 1000ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "});\r",
                  "\r",
                  "// ❌ Test Case: Missing Auth Token\r",
                  "if (!pm.environment.get(\"adminAuthToken\")) {\r",
                  "    pm.test(\"Response should be 401 Unauthorized when no token is provided\", function () {\r",
                  "        pm.response.to.have.status(401);\r",
                  "    });\r",
                  "}\r",
                  "\r",
                  "// ❌ Test Case: Invalid Category ID (404)\r",
                  "if (pm.environment.get(\"categoryId\") === \"invalid-id\") {\r",
                  "    pm.test(\"Response should be 404 Not Found for invalid category ID\", function () {\r",
                  "        pm.response.to.have.status(404);\r",
                  "    });\r",
                  "}\r",
                  "\r",
                  "// ❌ Test Case: Missing Category ID (400)\r",
                  "if (!pm.environment.get(\"categoryId\")) {\r",
                  "    pm.test(\"Response should be 400 Bad Request for missing category ID\", function () {\r",
                  "        pm.response.to.have.status(400);\r",
                  "    });\r",
                  "}\r",
                  ""
                ],
                "_lastExecutionId": "50f9704c-dd09-4de4-9d5d-c5462ec60deb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "admin",
              "category",
              "87106fc7-6b21-46a9-b007-ab0363126348"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8899d18d-4363-4843-9235-00bd3cdb348b",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "fb9a2276-3bf7-4f57-9de8-6a806d6d2995",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:08 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "305"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              67,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              56,
              55,
              49,
              48,
              54,
              102,
              99,
              55,
              45,
              54,
              98,
              50,
              49,
              45,
              52,
              54,
              97,
              57,
              45,
              98,
              48,
              48,
              55,
              45,
              97,
              98,
              48,
              51,
              54,
              51,
              49,
              50,
              54,
              51,
              52,
              56,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              116,
              121,
              108,
              105,
              115,
              116,
              32,
              67,
              108,
              111,
              116,
              104,
              105,
              110,
              103,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              84,
              114,
              101,
              110,
              100,
              121,
              32,
              111,
              117,
              116,
              102,
              105,
              116,
              115,
              32,
              102,
              111,
              114,
              32,
              101,
              118,
              101,
              114,
              121,
              32,
              115,
              101,
              97,
              115,
              111,
              110,
              44,
              32,
              111,
              99,
              99,
              97,
              115,
              105,
              111,
              110,
              44,
              32,
              97,
              110,
              100,
              32,
              108,
              105,
              102,
              101,
              115,
              116,
              121,
              108,
              101,
              46,
              34,
              44,
              34,
              105,
              109,
              97,
              103,
              101,
              85,
              114,
              108,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              49,
              50,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              48,
              55,
              46,
              55,
              50,
              54,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              49,
              50,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              48,
              55,
              46,
              57,
              54,
              48,
              90,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 89,
          "responseSize": 305
        },
        "id": "a6ef8d36-5fd6-4280-bf63-e841d1e953e3",
        "assertions": [
          {
            "assertion": "Status code is 200 - Category Retrieved",
            "skipped": false
          },
          {
            "assertion": "Response contains category details",
            "skipped": false
          },
          {
            "assertion": "Response time is under 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "24727a0b-ef2d-412b-979f-e1fdca76440c",
          "length": 40,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d14be0d4-9481-4ca5-a7ea-d536b7bc6307"
        },
        "item": {
          "id": "d8af0e9c-aa87-4e73-8e74-f42001b0f625",
          "name": "valid Sign In",
          "request": {
            "url": {
              "path": [
                "auth",
                "signin",
                ""
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{{currentPayload}}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "cab83c48-571c-4902-b4e7-02acc12dd018",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = {\r",
                  "    \"valid_login\": {\r",
                  "     \"email\": \"testog@e-record.com\",\r",
                  "    \"password\": \"Pass@12345\"\r",
                  "},\r",
                  "    \"missing_email\": { \r",
                  "        \"email\": \"\", \r",
                  "        \"password\": \"Pass$50000\" \r",
                  "    },\r",
                  "    \"missing_password\": { \r",
                  "        \"email\": \"existing@mail.com\", \r",
                  "        \"password\": \"\" \r",
                  "    },\r",
                  "    \"invalid_email_format\": { \r",
                  "        \"email\": \"invalid-email\", \r",
                  "        \"password\": \"Pass$50000\" \r",
                  "    },\r",
                  "    \"incorrect_password\": { \r",
                  "        \"email\": \"existing@mail.com\", \r",
                  "        \"password\": \"WrongPass123\" \r",
                  "    },\r",
                  "    \"unregistered_email\": { \r",
                  "        \"email\": \"unregistered@mail.com\", \r",
                  "        \"password\": \"Pass$50000\" \r",
                  "    }\r",
                  "};\r",
                  "\r",
                  "// Get the current test case (default: valid_login)\r",
                  "let testCase = pm.environment.get(\"testCase\") || \"valid_login\";\r",
                  "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                  "\r",
                  "// Set request headers for tracking\r",
                  "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                  "\r",
                  ""
                ],
                "_lastExecutionId": "a3967611-823a-4c6e-9ee2-a0f9fea65d93"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a359d213-bdc7-46a4-8889-efa1f73cc962",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "let response = pm.response.json();\r",
                  "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                  "\r",
                  "const expectedStatus = {\r",
                  "    \"valid_login\": 200,\r",
                  "    \"missing_email\": 400,\r",
                  "    \"missing_password\": 400,\r",
                  "    \"invalid_email_format\": 400,\r",
                  "    \"incorrect_password\": 401,\r",
                  "    \"unregistered_email\": 404\r",
                  "};\r",
                  "\r",
                  "// ✅ Test Case 1: Validate Status Code\r",
                  "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                  "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                  "});\r",
                  "\r",
                  "// Handle successful login response\r",
                  "if (pm.response.code === 200) {\r",
                  "    // ✅ Test Case 2: Verify Success Field Value\r",
                  "    pm.test(\"Verify that the success field is true\", function () {\r",
                  "        pm.expect(response.success).to.eql(true);\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Test Case 3: Check Message Field Value\r",
                  "    pm.test(\"Check that the message field is 'User sign in successful'\", function () {\r",
                  "        pm.expect(response.message).to.eql(\"User sign in successful\");\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Test Case 4: Validate Token Field\r",
                  "    pm.test(\"Validate that the token field is present and not empty\", function () {\r",
                  "        pm.expect(response.data.token).to.be.a('string');\r",
                  "        pm.expect(response.data.token.length).to.be.greaterThan(0);\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Test Case 5: Verify Expiration Timestamp Format\r",
                  "    pm.test(\"Verify that the expiration timestamp is in ISO 8601 format\", function () {\r",
                  "        let expiresIn = response.data.expiresIn;\r",
                  "        pm.expect(new Date(expiresIn).toISOString()).to.eql(expiresIn);\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Test Case 6: Validate User Data Fields\r",
                  "    pm.test(\"Validate that the user data fields are correct\", function () {\r",
                  "        let user = response.data.user;\r",
                  "        \r",
                  "        pm.expect(user.id).to.not.eql(null);\r",
                  "        pm.expect(user.email).to.not.eql(null);\r",
                  "        pm.expect(user.fullName).to.not.eql(null);\r",
                  "        pm.expect(user.firstName).to.not.eql(null);\r",
                  "        pm.expect(user.lastName).to.not.eql(null);\r",
                  "    });\r",
                  "\r",
                  "    pm.environment.set(\"userId\", response.data.user.id)\r",
                  "\r",
                  "    // ✅ Test Case 7: Verify KYC Status\r",
                  "    pm.test(\"Verify that the KYC status is false\", function () {\r",
                  "        pm.expect(response.data.user.kycCompleted).to.eql(false);\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Test Case 9: Check Token Format (JWT)\r",
                  "    pm.test(\"Check that the token is in a valid JWT format\", function () {\r",
                  "        let token = response.data.token;\r",
                  "        let tokenParts = token.split('.');\r",
                  "\r",
                  "        pm.expect(tokenParts).to.have.lengthOf(3);\r",
                  "        pm.expect(tokenParts[0]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                  "        pm.expect(tokenParts[1]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                  "        pm.expect(tokenParts[2]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Test Case 10: Validate Response Time\r",
                  "    pm.test(\"Validate that the response time is less than 500ms\", function () {\r",
                  "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "    });\r",
                  "\r",
                  "    // ✅ Store Auth Token for Future Requests\r",
                  "    pm.environment.set(\"authToken\", response.data.token);\r",
                  "} \r",
                  "// Handle error cases\r",
                  "else {\r",
                  "    pm.test(\"Response contains error message\", function () {\r",
                  "        pm.expect(response).to.have.property(\"error\");\r",
                  "        pm.expect(response.error).to.be.a(\"string\");\r",
                  "    });\r",
                  "}\r",
                  ""
                ],
                "_lastExecutionId": "9ac9fcb0-f51a-42f3-a3c8-2ef6c123219e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "auth",
              "signin",
              ""
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Test-Case",
              "value": "valid_login"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c81cb972-48db-45d6-a14e-9a4e9e7957c8",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "57",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\"email\":\"testog@e-record.com\",\"password\":\"Pass@12345\"}\r\n",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "62457680-9a96-45b6-93c0-3a0aba1ba035",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:08 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "549"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              32,
              115,
              105,
              103,
              110,
              32,
              105,
              110,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              101,
              121,
              74,
              104,
              98,
              71,
              99,
              105,
              79,
              105,
              74,
              73,
              85,
              122,
              73,
              49,
              78,
              105,
              73,
              115,
              73,
              110,
              82,
              53,
              99,
              67,
              73,
              54,
              73,
              107,
              112,
              88,
              86,
              67,
              74,
              57,
              46,
              101,
              121,
              74,
              112,
              90,
              67,
              73,
              54,
              73,
              109,
              82,
              109,
              77,
              87,
              74,
              107,
              79,
              68,
              74,
              109,
              76,
              84,
              108,
              105,
              77,
              50,
              81,
              116,
              78,
              68,
              81,
              48,
              78,
              67,
              49,
              105,
              79,
              71,
              70,
              104,
              76,
              84,
              107,
              121,
              78,
              109,
              70,
              104,
              89,
              122,
              82,
              109,
              79,
              87,
              70,
              106,
              90,
              83,
              73,
              115,
              73,
              109,
              108,
              104,
              100,
              67,
              73,
              54,
              77,
              84,
              99,
              48,
              78,
              122,
              65,
              50,
              77,
              122,
              65,
              52,
              79,
              67,
              119,
              105,
              90,
              88,
              104,
              119,
              73,
              106,
              111,
              120,
              78,
              122,
              81,
              51,
              77,
              106,
              77,
              49,
              79,
              68,
              103,
              52,
              102,
              81,
              46,
              108,
              84,
              71,
              66,
              115,
              74,
              105,
              82,
              114,
              69,
              85,
              117,
              103,
              45,
              54,
              52,
              57,
              81,
              82,
              48,
              99,
              116,
              73,
              106,
              52,
              82,
              99,
              67,
              84,
              66,
              77,
              72,
              109,
              104,
              122,
              89,
              114,
              53,
              102,
              110,
              122,
              121,
              69,
              34,
              44,
              34,
              101,
              120,
              112,
              105,
              114,
              101,
              115,
              73,
              110,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              49,
              51,
              84,
              49,
              53,
              58,
              49,
              56,
              58,
              48,
              56,
              46,
              51,
              49,
              53,
              90,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              102,
              49,
              98,
              100,
              56,
              50,
              102,
              45,
              57,
              98,
              51,
              100,
              45,
              52,
              52,
              52,
              52,
              45,
              98,
              56,
              97,
              97,
              45,
              57,
              50,
              54,
              97,
              97,
              99,
              52,
              102,
              57,
              97,
              99,
              101,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              111,
              103,
              64,
              101,
              45,
              114,
              101,
              99,
              111,
              114,
              100,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              79,
              106,
              97,
              121,
              34,
              44,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              106,
              97,
              121,
              34,
              44,
              34,
              107,
              121,
              99,
              67,
              111,
              109,
              112,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              115,
              116,
              111,
              114,
              97,
              103,
              101,
              46,
              103,
              111,
              111,
              103,
              108,
              101,
              97,
              112,
              105,
              115,
              46,
              99,
              111,
              109,
              47,
              100,
              97,
              110,
              100,
              121,
              115,
              45,
              55,
              100,
              101,
              56,
              49,
              46,
              97,
              112,
              112,
              115,
              112,
              111,
              116,
              46,
              99,
              111,
              109,
              47,
              97,
              118,
              97,
              116,
              97,
              114,
              37,
              50,
              70,
              105,
              109,
              97,
              103,
              101,
              115,
              46,
              106,
              112,
              103,
              34,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 100,
          "responseSize": 549
        },
        "id": "d8af0e9c-aa87-4e73-8e74-f42001b0f625",
        "assertions": [
          {
            "assertion": "[valid_login] Status should be 200",
            "skipped": false
          },
          {
            "assertion": "Verify that the success field is true",
            "skipped": false
          },
          {
            "assertion": "Check that the message field is 'User sign in successful'",
            "skipped": false
          },
          {
            "assertion": "Validate that the token field is present and not empty",
            "skipped": false
          },
          {
            "assertion": "Verify that the expiration timestamp is in ISO 8601 format",
            "skipped": false
          },
          {
            "assertion": "Validate that the user data fields are correct",
            "skipped": false
          },
          {
            "assertion": "Verify that the KYC status is false",
            "skipped": false
          },
          {
            "assertion": "Check that the token is in a valid JWT format",
            "skipped": false
          },
          {
            "assertion": "Validate that the response time is less than 500ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b7da7082-a2fd-48aa-984d-519a45109519",
          "length": 40,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b402b9bc-cdbe-4298-a385-7ffa371778b3"
        },
        "item": {
          "id": "17690a3e-fa74-49f5-849f-3d412ec83d52",
          "name": "add product",
          "request": {
            "url": {
              "path": [
                "products"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{authToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c810435d-b1e8-4cc8-a896-155e37f6b598",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure Authorization Token is Set",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");",
                  "}",
                  "",
                  "// ✅ Set Authorization Header",
                  "pm.request.headers.add({",
                  "    key: \"Authorization\",",
                  "    value: `Bearer ${pm.environment.get(\"authToken\")}`",
                  "});",
                  "",
                  "// ✅ Function to generate a random number within a range",
                  "function getRandomNumber(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "}",
                  "",
                  "// ✅ Function to generate a random date within a range",
                  "function getRandomDate(start, end) {",
                  "    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))",
                  "        .toISOString()",
                  "        .split(\"T\")[0]; // Returns in YYYY-MM-DD format",
                  "}",
                  "",
                  "// ✅ Predefined list of real product names and descriptions",
                  "const products = [",
                  "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },",
                  "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },",
                  "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },",
                  "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },",
                  "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },",
                  "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },",
                  "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },",
                  "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },",
                  "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },",
                  "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }",
                  "];",
                  "",
                  "// ✅ Predefined list of real brand names",
                  "const brands = [",
                  "    \"Nike\", \"Adidas\", \"Apple\", \"Samsung\", \"Nestlé\", \"L'Oréal\", \"LG\", \"Sony\", \"Coca-Cola\", \"Colgate\"",
                  "];",
                  "",
                  "// ✅ Select a random product and brand",
                  "const selectedProduct = products[Math.floor(Math.random() * products.length)];",
                  "const selectedBrand = brands[Math.floor(Math.random() * brands.length)];",
                  "",
                  "// ✅ Append a random number to the product title to avoid duplication",
                  "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;",
                  "",
                  "// ✅ Generate dynamic product details",
                  "const costPrice = getRandomNumber(50, 500);",
                  "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice",
                  "",
                  "const productDetails = {",
                  "    title: uniqueTitle,  // Ensuring uniqueness",
                  "    description: selectedProduct.description,",
                  "    brandName: selectedBrand,",
                  "    model: `M${getRandomNumber(1000, 9999)}`,",
                  "    expiryDate: getRandomDate(new Date(2025, 0, 1), new Date(2030, 11, 31)), // Future date",
                  "    manufactureDate: getRandomDate(new Date(2023, 0, 1), new Date(2024, 11, 31)), // Past date",
                  "    isoNumber: getRandomNumber(1000, 9999).toString(),",
                  "    nafdacNumber: getRandomNumber(1000, 9999).toString(),",
                  "    quantity: getRandomNumber(1, 100),",
                  "    costPrice: costPrice,",
                  "    sellingPrice: sellingPrice, // Ensuring selling price is not less than cost price",
                  "    eanNumber: getRandomNumber(1000, 9999).toString(),",
                  "    categoryId: pm.environment.get(\"categoryId4p\"),",
                  "    saleStart: getRandomDate(new Date(2024, 0, 1), new Date(2025, 11, 31)), // Future date",
                  "    saleEnd: getRandomDate(new Date(2025, 0, 1), new Date(2026, 11, 31)), // Future date",
                  "    imagePath: \"https://imagekit.io/tools/free-image-hosting/\" // Replace with dynamic upload if needed",
                  "};",
                  "",
                  "// ✅ Update form-data in the request body",
                  "pm.request.body.update({",
                  "    mode: \"formdata\",",
                  "    formdata: [",
                  "        { key: \"title\", value: productDetails.title, type: \"text\" },",
                  "        { key: \"description\", value: productDetails.description, type: \"text\" },",
                  "        { key: \"brandName\", value: productDetails.brandName, type: \"text\" },",
                  "        { key: \"model\", value: productDetails.model, type: \"text\" },",
                  "        { key: \"expiryDate\", value: productDetails.expiryDate, type: \"text\" },",
                  "        { key: \"manufactureDate\", value: productDetails.manufactureDate, type: \"text\" },",
                  "        { key: \"isoNumber\", value: productDetails.isoNumber, type: \"text\" },",
                  "        { key: \"nafdacNumber\", value: productDetails.nafdacNumber, type: \"text\" },",
                  "        { key: \"quantity\", value: productDetails.quantity.toString(), type: \"text\" },",
                  "        { key: \"costPrice\", value: productDetails.costPrice.toString(), type: \"text\" },",
                  "        { key: \"sellingPrice\", value: productDetails.sellingPrice.toString(), type: \"text\" },",
                  "        { key: \"eanNumber\", value: productDetails.eanNumber, type: \"text\" },",
                  "        { key: \"categoryId\", value: productDetails.categoryId, type: \"text\" },",
                  "        { key: \"saleStart\", value: productDetails.saleStart, type: \"text\" },",
                  "        { key: \"saleEnd\", value: productDetails.saleEnd, type: \"text\" },",
                  "        { key: \"images\", src: productDetails.imagePath, type: \"file\" }",
                  "    ]",
                  "});",
                  "",
                  "// ✅ Log generated data for debugging",
                  "console.log(\"🔹 Generated product details:\", productDetails);",
                  ""
                ],
                "_lastExecutionId": "00e3dc30-3389-43bf-b49f-67a7b839840d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "427614b5-9354-458b-bd1e-f7a3fc0dced7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response exists\r",
                  "pm.test(\"Response should be present\", function () {\r",
                  "    pm.response.to.have.status(200); // Corrected the expected status code\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse the response body\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "// ✅ Define required fields\r",
                  "const requiredFields = [\r",
                  "    \"id\", \"title\", \"description\", \"brandName\", \"model\",\r",
                  "    \"expiryDate\", \"manufactureDate\", \"isoNumber\", \"nafdacNumber\",\r",
                  "    \"quantity\", \"costPrice\", \"sellingPrice\", \"eanNumber\", \"categoryId\",\r",
                  "    \"saleStart\", \"saleEnd\"\r",
                  "];\r",
                  "\r",
                  "// ✅ Check that required fields exist and are not empty\r",
                  "pm.test(\"Required fields should not be empty\", function () {\r",
                  "    requiredFields.forEach(field => {\r",
                  "        pm.expect(response.data).to.have.property(field);\r",
                  "        if (response[field]) {\r",
                  "            pm.expect(response.data[field]).to.not.be.null;\r",
                  "            pm.expect(response.data[field]).to.not.be.undefined;\r",
                  "\r",
                  "            // ✅ Check if string fields are not empty\r",
                  "            if (typeof response.data[field] === \"string\") {\r",
                  "                pm.expect(response.data[field].trim()).to.not.equal(\"\");\r",
                  "            }\r",
                  "\r",
                  "            // ✅ Check if array fields are not empty\r",
                  "            if (Array.isArray(response.data[field])) {\r",
                  "                pm.expect(response.data[field].length).to.be.greaterThan(0);\r",
                  "            }\r",
                  "\r",
                  "            // ✅ Check if numeric fields are valid\r",
                  "            if ([\"quantity\", \"costPrice\", \"sellingPrice\"].includes(field)) {\r",
                  "                pm.expect(response.data[field]).to.be.a(\"number\");\r",
                  "                pm.expect(response.data[field]).to.be.greaterThan(0);\r",
                  "            }\r",
                  "        }\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate the response contains a success message\r",
                  "pm.test(\"Response should contain a success message\", function () {\r",
                  "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                  "    pm.expect(response.message.toLowerCase()).to.include(\"success\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate that selling price is not lower than cost price\r",
                  "pm.test(\"Selling price should be greater than or equal to cost price\", function () {\r",
                  "    if (response.sellingPrice && response.costPrice) {\r",
                  "        pm.expect(response.sellingPrice).to.be.at.least(response.costPrice);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate dates are in YYYY-MM-DD format\r",
                  "pm.test(\"Dates should be in valid format\", function () {\r",
                  "    [\"expiryDate\", \"manufactureDate\", \"saleStart\", \"saleEnd\"].forEach(field => {\r",
                  "        if (response[field]) {\r",
                  "            pm.expect(response[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                  "        }\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// ✅ Log response for debugging\r",
                  "console.log(\"🔹 Response Body:\", response);\r",
                  "\r",
                  "pm.environment.set(\"productId\", response?.data?.id); // Fixed the TypeError by using optional chaining\r",
                  ""
                ],
                "_lastExecutionId": "7fdcbba5-51d6-422a-9b89-b13427c00d13"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'update')",
              "checksum": "4bf828083eab87ee4be22a00051b1e31",
              "id": "4eb05fa4-d264-4886-9d6c-20ae6d9a4441",
              "timestamp": 1747063088386,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "products"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4OCwiZXhwIjoxNzQ3MjM1ODg4fQ.lTGBsJiRrEUug-649QR0ctIj4RcCTBMHmhzYr5fnzyE",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "03dc7bf1-dd22-4799-93ff-416627235d58",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "POST",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4OCwiZXhwIjoxNzQ3MjM1ODg4fQ.lTGBsJiRrEUug-649QR0ctIj4RcCTBMHmhzYr5fnzyE",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "32ee3ab0-7e24-49d0-873f-776e46ecf5f8",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:08 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "63"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              110,
              32,
              105,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              115,
              101,
              114,
              118,
              101,
              114,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 85,
          "responseSize": 63
        },
        "id": "17690a3e-fa74-49f5-849f-3d412ec83d52",
        "assertions": [
          {
            "assertion": "Response should be present",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response should be present",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "Required fields should not be empty",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Required fields should not be empty",
              "message": "Target cannot be null or undefined.",
              "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:2:28)"
            }
          },
          {
            "assertion": "Response should contain a success message",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response should contain a success message",
              "message": "expected 'an internal server error occurred' to include 'success'",
              "stack": "AssertionError: expected 'an internal server error occurred' to include 'success'\n   at Object.eval sandbox-script.js:3:28)"
            }
          },
          {
            "assertion": "Selling price should be greater than or equal to cost price",
            "skipped": false
          },
          {
            "assertion": "Dates should be in valid format",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4f86a33f-cd83-4cb1-ab7d-d65171404455",
          "length": 40,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "af715c5b-a277-4e13-a936-f4f485d3f4c8"
        },
        "item": {
          "id": "1558af38-c792-4986-9265-3a05664909f7",
          "name": "get products",
          "request": {
            "url": {
              "path": [
                "products"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{authToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5acdbd07-8bbd-4e88-9ea6-c89fee8db72e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response message\r",
                  "pm.test(\"Response contains success message\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product fetched successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate data structure\r",
                  "pm.test(\"Response contains an array of products\", function () {\r",
                  "    pm.expect(jsonData.data).to.have.property(\"result\").that.is.an(\"array\");\r",
                  "\r",
                  "    let products = jsonData.data.result;\r",
                  "    \r",
                  "    if (products.length > 0) {\r",
                  "        let product = products[0];\r",
                  "        pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                  "        pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                  "        pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\"); // Adjusted type based on response\r",
                  "        pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate authorization requirement\r",
                  "pm.test(\"Request requires authorization\", function () {\r",
                  "    pm.response.to.not.have.status(401);\r",
                  "});\r",
                  "\r",
                  "// ✅ Extract and store all unique product IDs\r",
                  "let products = jsonData.data?.result || [];\r",
                  "let existingIds = pm.environment.get(\"product_ids\");\r",
                  "existingIds = existingIds ? JSON.parse(existingIds) : [];\r",
                  "\r",
                  "let newProductIds = products.map(product => product.id);\r",
                  "\r",
                  "// ✅ Merge new IDs with existing ones and remove duplicates\r",
                  "let uniqueProductIds = [...new Set([...existingIds, ...newProductIds])];\r",
                  "\r",
                  "// ✅ Store updated product IDs in environment variable\r",
                  "pm.environment.set(\"product_ids\", JSON.stringify(uniqueProductIds));\r",
                  "\r",
                  "// ✅ Store first product ID separately for quick access\r",
                  "if (products.length > 0) {\r",
                  "    pm.environment.set(\"firstProductId\", products[0].id);\r",
                  "    console.log(\"First product ID stored:\", products[0].id);\r",
                  "}\r",
                  "\r",
                  "// ✅ Log the unique extracted product IDs for debugging\r",
                  "console.log(\"Extracted Product IDs:\", uniqueProductIds);\r",
                  "\r",
                  "// ✅ Test that product IDs are correctly stored\r",
                  "pm.test(\"Product IDs should be extracted, stored, and unique\", function () {\r",
                  "    pm.expect(uniqueProductIds).to.be.an(\"array\").that.is.not.empty;\r",
                  "    uniqueProductIds.forEach(id => pm.expect(id).to.be.a(\"string\").that.has.lengthOf(36)); // UUID validation\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "ec167e80-cfe3-4cc1-ae4c-3eb9273e706d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "products"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4OCwiZXhwIjoxNzQ3MjM1ODg4fQ.lTGBsJiRrEUug-649QR0ctIj4RcCTBMHmhzYr5fnzyE",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6c5935e5-1618-4488-b34b-f2b8f117e59d",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4OCwiZXhwIjoxNzQ3MjM1ODg4fQ.lTGBsJiRrEUug-649QR0ctIj4RcCTBMHmhzYr5fnzyE",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "936fa0dc-cd49-4e89-ab2e-ade496134d10",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:08 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "4819"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              102,
              101,
              116,
              99,
              104,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              46,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              114,
              101,
              115,
              117,
              108,
              116,
              34,
              58,
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              48,
              97,
              97,
              53,
              98,
              55,
              57,
              45,
              101,
              49,
              51,
              48,
              45,
              52,
              56,
              102,
              51,
              45,
              98,
              100,
              57,
              54,
              45,
              57,
              100,
              49,
              50,
              56,
              53,
              97,
              54,
              53,
              53,
              56,
              101,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              78,
              105,
              107,
              101,
              32,
              65,
              105,
              114,
              32,
              77,
              97,
              120,
              32,
              50,
              55,
              48,
              32,
              50,
              50,
              53,
              50,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              76,
              105,
              103,
              104,
              116,
              119,
              101,
              105,
              103,
              104,
              116,
              32,
              115,
              110,
              101,
              97,
              107,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              115,
              117,
              112,
              101,
              114,
              105,
              111,
              114,
              32,
              99,
              117,
              115,
              104,
              105,
              111,
              110,
              105,
              110,
              103,
              32,
              97,
              110,
              100,
              32,
              115,
              116,
              121,
              108,
              101,
              46,
              34,
              44,
              34,
              98,
              114,
              97,
              110,
              100,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              111,
              108,
              103,
              97,
              116,
              101,
              34,
              44,
              34,
              109,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              77,
              53,
              55,
              54,
              55,
              34,
              44,
              34,
              118,
              101,
              110,
              100,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              120,
              112,
              105,
              114,
              121,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              55,
              45,
              49,
              50,
              45,
              50,
              57,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              109,
              97,
              110,
              117,
              102,
              97,
              99,
              116,
              117,
              114,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              49,
              48,
              45,
              50,
              49,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              105,
              115,
              111,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              55,
              54,
              48,
              57,
              34,
              44,
              34,
              110,
              97,
              102,
              100,
              97,
              99,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              49,
              56,
              54,
              56,
              34,
              44,
              34,
              104,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              113,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              53,
              56,
              44,
              34,
              115,
              101,
              108,
              108,
              105,
              110,
              103,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              53,
              49,
              52,
              34,
              44,
              34,
              99,
              111,
              115,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              52,
              55,
              51,
              34,
              44,
              34,
              115,
              107,
              117,
              34,
              58,
              34,
              80,
              85,
              56,
              90,
              51,
              48,
              56,
              68,
              34,
              44,
              34,
              101,
              97,
              110,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              51,
              56,
              57,
              57,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              56,
              58,
              51,
              52,
              58,
              50,
              50,
              46,
              48,
              54,
              52,
              90,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              101,
              52,
              56,
              50,
              102,
              51,
              57,
              45,
              49,
              50,
              56,
              54,
              45,
              52,
              52,
              57,
              53,
              45,
              57,
              101,
              101,
              50,
              45,
              51,
              100,
              97,
              98,
              51,
              56,
              52,
              56,
              56,
              99,
              99,
              51,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              114,
              97,
              103,
              114,
              97,
              110,
              99,
              101,
              34,
              125,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              109,
              97,
              103,
              101,
              34,
              58,
              91,
              93,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              52,
              55,
              51,
              55,
              48,
              97,
              48,
              56,
              45,
              97,
              99,
              48,
              53,
              45,
              52,
              55,
              97,
              48,
              45,
              56,
              54,
              57,
              102,
              45,
              51,
              50,
              102,
              101,
              98,
              50,
              53,
              102,
              57,
              97,
              99,
              98,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              67,
              111,
              99,
              97,
              45,
              67,
              111,
              108,
              97,
              32,
              90,
              101,
              114,
              111,
              32,
              83,
              117,
              103,
              97,
              114,
              32,
              52,
              49,
              56,
              54,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              82,
              101,
              102,
              114,
              101,
              115,
              104,
              105,
              110,
              103,
              32,
              115,
              111,
              102,
              116,
              32,
              100,
              114,
              105,
              110,
              107,
              32,
              119,
              105,
              116,
              104,
              32,
              122,
              101,
              114,
              111,
              32,
              115,
              117,
              103,
              97,
              114,
              32,
              97,
              110,
              100,
              32,
              103,
              114,
              101,
              97,
              116,
              32,
              116,
              97,
              115,
              116,
              101,
              46,
              34,
              44,
              34,
              98,
              114,
              97,
              110,
              100,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              111,
              110,
              121,
              34,
              44,
              34,
              109,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              77,
              54,
              57,
              50,
              48,
              34,
              44,
              34,
              118,
              101,
              110,
              100,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              120,
              112,
              105,
              114,
              121,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              55,
              45,
              49,
              49,
              45,
              48,
              56,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              109,
              97,
              110,
              117,
              102,
              97,
              99,
              116,
              117,
              114,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              49,
              45,
              48,
              55,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              105,
              115,
              111,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              50,
              52,
              50,
              53,
              34,
              44,
              34,
              110,
              97,
              102,
              100,
              97,
              99,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              57,
              49,
              56,
              56,
              34,
              44,
              34,
              104,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              113,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              57,
              51,
              44,
              34,
              115,
              101,
              108,
              108,
              105,
              110,
              103,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              54,
              53,
              56,
              34,
              44,
              34,
              99,
              111,
              115,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              50,
              57,
              57,
              34,
              44,
              34,
              115,
              107,
              117,
              34,
              58,
              34,
              71,
              55,
              86,
              69,
              76,
              56,
              70,
              82,
              34,
              44,
              34,
              101,
              97,
              110,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              50,
              54,
              55,
              51,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              49,
              49,
              58,
              48,
              56,
              58,
              50,
              50,
              46,
              57,
              50,
              50,
              90,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              101,
              52,
              56,
              50,
              102,
              51,
              57,
              45,
              49,
              50,
              56,
              54,
              45,
              52,
              52,
              57,
              53,
              45,
              57,
              101,
              101,
              50,
              45,
              51,
              100,
              97,
              98,
              51,
              56,
              52,
              56,
              56,
              99,
              99,
              51,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              114,
              97,
              103,
              114,
              97,
              110,
              99,
              101,
              34,
              125,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              109,
              97,
              103,
              101,
              34,
              58,
              91,
              93,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              51,
              54,
              97,
              55,
              97,
              50,
              50,
              98,
              45,
              52,
              101,
              53,
              51,
              45,
              52,
              50,
              48,
              52,
              45,
              97,
              102,
              102,
              48,
              45,
              99,
              98,
              57,
              55,
              53,
              50,
              50,
              48,
              97,
              49,
              98,
              102,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              83,
              97,
              109,
              115,
              117,
              110,
              103,
              32,
              71,
              97,
              108,
              97,
              120,
              121,
              32,
              83,
              50,
              51,
              32,
              55,
              57,
              50,
              48,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              70,
              108,
              97,
              103,
              115,
              104,
              105,
              112,
              32,
              115,
              109,
              97,
              114,
              116,
              112,
              104,
              111,
              110,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              104,
              105,
              103,
              104,
              45,
              101,
              110,
              100,
              32,
              99,
              97,
              109,
              101,
              114,
              97,
              32,
              97,
              110,
              100,
              32,
              112,
              101,
              114,
              102,
              111,
              114,
              109,
              97,
              110,
              99,
              101,
              46,
              34,
              44,
              34,
              98,
              114,
              97,
              110,
              100,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              115,
              116,
              108,
              195,
              169,
              34,
              44,
              34,
              109,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              77,
              51,
              48,
              56,
              50,
              34,
              44,
              34,
              118,
              101,
              110,
              100,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              120,
              112,
              105,
              114,
              121,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              57,
              45,
              48,
              53,
              45,
              50,
              57,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              109,
              97,
              110,
              117,
              102,
              97,
              99,
              116,
              117,
              114,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              57,
              45,
              50,
              51,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              105,
              115,
              111,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              52,
              51,
              50,
              53,
              34,
              44,
              34,
              110,
              97,
              102,
              100,
              97,
              99,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              53,
              55,
              48,
              48,
              34,
              44,
              34,
              104,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              113,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              50,
              53,
              44,
              34,
              115,
              101,
              108,
              108,
              105,
              110,
              103,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              52,
              54,
              50,
              34,
              44,
              34,
              99,
              111,
              115,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              52,
              50,
              56,
              34,
              44,
              34,
              115,
              107,
              117,
              34,
              58,
              34,
              72,
              80,
              85,
              70,
              53,
              81,
              73,
              75,
              34,
              44,
              34,
              101,
              97,
              110,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              54,
              50,
              55,
              51,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              53,
              58,
              49,
              57,
              58,
              49,
              55,
              46,
              55,
              48,
              48,
              90,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              101,
              52,
              56,
              50,
              102,
              51,
              57,
              45,
              49,
              50,
              56,
              54,
              45,
              52,
              52,
              57,
              53,
              45,
              57,
              101,
              101,
              50,
              45,
              51,
              100,
              97,
              98,
              51,
              56,
              52,
              56,
              56,
              99,
              99,
              51,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              114,
              97,
              103,
              114,
              97,
              110,
              99,
              101,
              34,
              125,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              109,
              97,
              103,
              101,
              34,
              58,
              91,
              93,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              51,
              54,
              50,
              99,
              53,
              52,
              50,
              50,
              45,
              55,
              50,
              98,
              55,
              45,
              52,
              50,
              100,
              55,
              45,
              57,
              53,
              57,
              99,
              45,
              55,
              57,
              97,
              57,
              48,
              100,
              101,
              50,
              54,
              55,
              51,
              52,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              83,
              97,
              109,
              115,
              117,
              110,
              103,
              32,
              71,
              97,
              108,
              97,
              120,
              121,
              32,
              83,
              50,
              51,
              32,
              51,
              56,
              51,
              54,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              70,
              108,
              97,
              103,
              115,
              104,
              105,
              112,
              32,
              115,
              109,
              97,
              114,
              116,
              112,
              104,
              111,
              110,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              104,
              105,
              103,
              104,
              45,
              101,
              110,
              100,
              32,
              99,
              97,
              109,
              101,
              114,
              97,
              32,
              97,
              110,
              100,
              32,
              112,
              101,
              114,
              102,
              111,
              114,
              109,
              97,
              110,
              99,
              101,
              46,
              34,
              44,
              34,
              98,
              114,
              97,
              110,
              100,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              115,
              116,
              108,
              195,
              169,
              34,
              44,
              34,
              109,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              77,
              53,
              53,
              53,
              57,
              34,
              44,
              34,
              118,
              101,
              110,
              100,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              120,
              112,
              105,
              114,
              121,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              51,
              48,
              45,
              49,
              49,
              45,
              49,
              53,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              109,
              97,
              110,
              117,
              102,
              97,
              99,
              116,
              117,
              114,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              56,
              45,
              50,
              52,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              105,
              115,
              111,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              53,
              53,
              49,
              48,
              34,
              44,
              34,
              110,
              97,
              102,
              100,
              97,
              99,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              51,
              48,
              48,
              57,
              34,
              44,
              34,
              104,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              113,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              51,
              44,
              34,
              115,
              101,
              108,
              108,
              105,
              110,
              103,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              53,
              52,
              53,
              34,
              44,
              34,
              99,
              111,
              115,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              51,
              53,
              52,
              34,
              44,
              34,
              115,
              107,
              117,
              34,
              58,
              34,
              78,
              77,
              80,
              48,
              80,
              84,
              50,
              66,
              34,
              44,
              34,
              101,
              97,
              110,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              56,
              52,
              55,
              53,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              54,
              58,
              53,
              57,
              58,
              49,
              48,
              46,
              54,
              49,
              49,
              90,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              101,
              52,
              56,
              50,
              102,
              51,
              57,
              45,
              49,
              50,
              56,
              54,
              45,
              52,
              52,
              57,
              53,
              45,
              57,
              101,
              101,
              50,
              45,
              51,
              100,
              97,
              98,
              51,
              56,
              52,
              56,
              56,
              99,
              99,
              51,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              114,
              97,
              103,
              114,
              97,
              110,
              99,
              101,
              34,
              125,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              109,
              97,
              103,
              101,
              34,
              58,
              91,
              93,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              51,
              49,
              55,
              102,
              102,
              50,
              101,
              99,
              45,
              48,
              51,
              55,
              57,
              45,
              52,
              55,
              57,
              102,
              45,
              98,
              49,
              56,
              55,
              45,
              52,
              101,
              50,
              97,
              54,
              56,
              99,
              98,
              102,
              48,
              98,
              102,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              76,
              71,
              32,
              83,
              105,
              100,
              101,
              45,
              98,
              121,
              45,
              83,
              105,
              100,
              101,
              32,
              82,
              101,
              102,
              114,
              105,
              103,
              101,
              114,
              97,
              116,
              111,
              114,
              32,
              57,
              48,
              57,
              50,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              83,
              112,
              97,
              99,
              105,
              111,
              117,
              115,
              32,
              102,
              114,
              105,
              100,
              103,
              101,
              32,
              119,
              105,
              116,
              104,
              32,
              105,
              110,
              118,
              101,
              114,
              116,
              101,
              114,
              32,
              116,
              101,
              99,
              104,
              110,
              111,
              108,
              111,
              103,
              121,
              32,
              102,
              111,
              114,
              32,
              101,
              110,
              101,
              114,
              103,
              121,
              32,
              115,
              97,
              118,
              105,
              110,
              103,
              46,
              34,
              44,
              34,
              98,
              114,
              97,
              110,
              100,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              115,
              116,
              108,
              195,
              169,
              34,
              44,
              34,
              109,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              77,
              54,
              51,
              55,
              48,
              34,
              44,
              34,
              118,
              101,
              110,
              100,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              120,
              112,
              105,
              114,
              121,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              49,
              49,
              45,
              49,
              54,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              109,
              97,
              110,
              117,
              102,
              97,
              99,
              116,
              117,
              114,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              49,
              45,
              50,
              52,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              105,
              115,
              111,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              53,
              48,
              56,
              50,
              34,
              44,
              34,
              110,
              97,
              102,
              100,
              97,
              99,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              51,
              48,
              52,
              48,
              34,
              44,
              34,
              104,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              113,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              53,
              57,
              44,
              34,
              115,
              101,
              108,
              108,
              105,
              110,
              103,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              50,
              48,
              57,
              34,
              44,
              34,
              99,
              111,
              115,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              49,
              53,
              53,
              34,
              44,
              34,
              115,
              107,
              117,
              34,
              58,
              34,
              54,
              66,
              69,
              76,
              72,
              71,
              84,
              86,
              34,
              44,
              34,
              101,
              97,
              110,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              51,
              51,
              56,
              56,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              56,
              58,
              49,
              53,
              58,
              50,
              54,
              46,
              48,
              50,
              56,
              90,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              101,
              52,
              56,
              50,
              102,
              51,
              57,
              45,
              49,
              50,
              56,
              54,
              45,
              52,
              52,
              57,
              53,
              45,
              57,
              101,
              101,
              50,
              45,
              51,
              100,
              97,
              98,
              51,
              56,
              52,
              56,
              56,
              99,
              99,
              51,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              114,
              97,
              103,
              114,
              97,
              110,
              99,
              101,
              34,
              125,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              109,
              97,
              103,
              101,
              34,
              58,
              91,
              93,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              50,
              49,
              57,
              99,
              50,
              102,
              52,
              99,
              45,
              49,
              101,
              53,
              50,
              45,
              52,
              52,
              54,
              55,
              45,
              57,
              48,
              49,
              98,
              45,
              49,
              57,
              55,
              54,
              102,
              99,
              56,
              101,
              55,
              102,
              99,
              102,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              78,
              101,
              115,
              116,
              108,
              195,
              169,
              32,
              80,
              117,
              114,
              101,
              32,
              76,
              105,
              102,
              101,
              32,
              87,
              97,
              116,
              101,
              114,
              32,
              52,
              53,
              48,
              50,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              80,
              114,
              101,
              109,
              105,
              117,
              109,
              32,
              112,
              117,
              114,
              105,
              102,
              105,
              101,
              100,
              32,
              98,
              111,
              116,
              116,
              108,
              101,
              100,
              32,
              119,
              97,
              116,
              101,
              114,
              32,
              102,
              111,
              114,
              32,
              100,
              97,
              105,
              108,
              121,
              32,
              104,
              121,
              100,
              114,
              97,
              116,
              105,
              111,
              110,
              46,
              34,
              44,
              34,
              98,
              114,
              97,
              110,
              100,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              39,
              79,
              114,
              195,
              169,
              97,
              108,
              34,
              44,
              34,
              109,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              77,
              51,
              50,
              52,
              53,
              34,
              44,
              34,
              118,
              101,
              110,
              100,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              120,
              112,
              105,
              114,
              121,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              55,
              45,
              48,
              55,
              45,
              49,
              53,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              109,
              97,
              110,
              117,
              102,
              97,
              99,
              116,
              117,
              114,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              49,
              49,
              45,
              50,
              50,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              105,
              115,
              111,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              51,
              50,
              53,
              54,
              34,
              44,
              34,
              110,
              97,
              102,
              100,
              97,
              99,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              49,
              54,
              49,
              55,
              34,
              44,
              34,
              104,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              113,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              52,
              48,
              44,
              34,
              115,
              101,
              108,
              108,
              105,
              110,
              103,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              53,
              55,
              49,
              34,
              44,
              34,
              99,
              111,
              115,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              49,
              57,
              48,
              34,
              44,
              34,
              115,
              107,
              117,
              34,
              58,
              34,
              56,
              68,
              69,
              84,
              54,
              79,
              82,
              86,
              34,
              44,
              34,
              101,
              97,
              110,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              55,
              57,
              53,
              53,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              55,
              58,
              50,
              56,
              58,
              52,
              50,
              46,
              51,
              55,
              55,
              90,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              101,
              52,
              56,
              50,
              102,
              51,
              57,
              45,
              49,
              50,
              56,
              54,
              45,
              52,
              52,
              57,
              53,
              45,
              57,
              101,
              101,
              50,
              45,
              51,
              100,
              97,
              98,
              51,
              56,
              52,
              56,
              56,
              99,
              99,
              51,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              114,
              97,
              103,
              114,
              97,
              110,
              99,
              101,
              34,
              125,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              109,
              97,
              103,
              101,
              34,
              58,
              91,
              93,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              54,
              54,
              97,
              98,
              50,
              53,
              53,
              45,
              52,
              51,
              53,
              97,
              45,
              52,
              52,
              98,
              57,
              45,
              98,
              54,
              101,
              50,
              45,
              55,
              97,
              50,
              100,
              53,
              49,
              102,
              48,
              50,
              48,
              53,
              56,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              65,
              112,
              112,
              108,
              101,
              32,
              77,
              97,
              99,
              66,
              111,
              111,
              107,
              32,
              80,
              114,
              111,
              32,
              49,
              52,
              45,
              105,
              110,
              99,
              104,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              80,
              111,
              119,
              101,
              114,
              102,
              117,
              108,
              32,
              108,
              97,
              112,
              116,
              111,
              112,
              32,
              102,
              111,
              114,
              32,
              112,
              114,
              111,
              102,
              101,
              115,
              115,
              105,
              111,
              110,
              97,
              108,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              77,
              50,
              32,
              99,
              104,
              105,
              112,
              46,
              34,
              44,
              34,
              98,
              114,
              97,
              110,
              100,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              111,
              99,
              97,
              45,
              67,
              111,
              108,
              97,
              34,
              44,
              34,
              109,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              77,
              50,
              51,
              53,
              49,
              34,
              44,
              34,
              118,
              101,
              110,
              100,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              120,
              112,
              105,
              114,
              121,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              57,
              45,
              49,
              50,
              45,
              50,
              52,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              109,
              97,
              110,
              117,
              102,
              97,
              99,
              116,
              117,
              114,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              48,
              55,
              45,
              49,
              54,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              105,
              115,
              111,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              55,
              48,
              49,
              57,
              34,
              44,
              34,
              110,
              97,
              102,
              100,
              97,
              99,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              50,
              53,
              51,
              51,
              34,
              44,
              34,
              104,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              113,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              50,
              57,
              44,
              34,
              115,
              101,
              108,
              108,
              105,
              110,
              103,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              50,
              56,
              50,
              34,
              44,
              34,
              99,
              111,
              115,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              49,
              49,
              53,
              34,
              44,
              34,
              115,
              107,
              117,
              34,
              58,
              34,
              57,
              65,
              57,
              75,
              55,
              77,
              69,
              57,
              34,
              44,
              34,
              101,
              97,
              110,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              53,
              55,
              55,
              53,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              53,
              58,
              49,
              53,
              58,
              52,
              53,
              46,
              49,
              56,
              56,
              90,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              101,
              52,
              56,
              50,
              102,
              51,
              57,
              45,
              49,
              50,
              56,
              54,
              45,
              52,
              52,
              57,
              53,
              45,
              57,
              101,
              101,
              50,
              45,
              51,
              100,
              97,
              98,
              51,
              56,
              52,
              56,
              56,
              99,
              99,
              51,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              114,
              97,
              103,
              114,
              97,
              110,
              99,
              101,
              34,
              125,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              109,
              97,
              103,
              101,
              34,
              58,
              91,
              93,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              49,
              52,
              54,
              99,
              48,
              101,
              102,
              97,
              45,
              98,
              100,
              48,
              53,
              45,
              52,
              99,
              48,
              99,
              45,
              57,
              49,
              53,
              99,
              45,
              102,
              53,
              54,
              53,
              99,
              57,
              48,
              99,
              51,
              49,
              56,
              101,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              78,
              105,
              107,
              101,
              32,
              65,
              105,
              114,
              32,
              77,
              97,
              120,
              32,
              50,
              55,
              48,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              76,
              105,
              103,
              104,
              116,
              119,
              101,
              105,
              103,
              104,
              116,
              32,
              115,
              110,
              101,
              97,
              107,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              115,
              117,
              112,
              101,
              114,
              105,
              111,
              114,
              32,
              99,
              117,
              115,
              104,
              105,
              111,
              110,
              105,
              110,
              103,
              32,
              97,
              110,
              100,
              32,
              115,
              116,
              121,
              108,
              101,
              46,
              34,
              44,
              34,
              98,
              114,
              97,
              110,
              100,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              105,
              100,
              97,
              115,
              34,
              44,
              34,
              109,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              77,
              49,
              56,
              57,
              52,
              34,
              44,
              34,
              118,
              101,
              110,
              100,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              120,
              112,
              105,
              114,
              121,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              55,
              45,
              48,
              52,
              45,
              48,
              52,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              109,
              97,
              110,
              117,
              102,
              97,
              99,
              116,
              117,
              114,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              52,
              45,
              48,
              54,
              45,
              48,
              51,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              105,
              115,
              111,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              53,
              48,
              48,
              57,
              34,
              44,
              34,
              110,
              97,
              102,
              100,
              97,
              99,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              52,
              52,
              52,
              56,
              34,
              44,
              34,
              104,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              113,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              51,
              53,
              44,
              34,
              115,
              101,
              108,
              108,
              105,
              110,
              103,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              55,
              51,
              49,
              34,
              44,
              34,
              99,
              111,
              115,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              52,
              53,
              55,
              34,
              44,
              34,
              115,
              107,
              117,
              34,
              58,
              34,
              54,
              53,
              70,
              57,
              51,
              70,
              57,
              89,
              34,
              44,
              34,
              101,
              97,
              110,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              53,
              56,
              52,
              52,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              53,
              58,
              49,
              53,
              58,
              48,
              48,
              46,
              50,
              51,
              52,
              90,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              101,
              52,
              56,
              50,
              102,
              51,
              57,
              45,
              49,
              50,
              56,
              54,
              45,
              52,
              52,
              57,
              53,
              45,
              57,
              101,
              101,
              50,
              45,
              51,
              100,
              97,
              98,
              51,
              56,
              52,
              56,
              56,
              99,
              99,
              51,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              114,
              97,
              103,
              114,
              97,
              110,
              99,
              101,
              34,
              125,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              109,
              97,
              103,
              101,
              34,
              58,
              91,
              93,
              125,
              93,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              80,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              112,
              97,
              103,
              101,
              83,
              105,
              122,
              101,
              34,
              58,
              50,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              97,
              103,
              101,
              115,
              34,
              58,
              49,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              56,
              44,
              34,
              104,
              97,
              115,
              80,
              114,
              101,
              118,
              105,
              111,
              117,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              104,
              97,
              115,
              78,
              101,
              120,
              116,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 94,
          "responseSize": 4819
        },
        "id": "1558af38-c792-4986-9265-3a05664909f7",
        "assertions": [
          {
            "assertion": "Response is in JSON format",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response contains success flag",
            "skipped": false
          },
          {
            "assertion": "Response contains success message",
            "skipped": false
          },
          {
            "assertion": "Response contains an array of products",
            "skipped": false
          },
          {
            "assertion": "Request requires authorization",
            "skipped": false
          },
          {
            "assertion": "Product IDs should be extracted, stored, and unique",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9e9708c5-aad3-4f51-a2d2-0d6efeab4cfe",
          "length": 40,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a9dd0417-27b8-42ed-ab4a-438605594605"
        },
        "item": {
          "id": "e87e3c10-3383-4997-996a-4557c70e7107",
          "name": "get product by ID",
          "request": {
            "url": {
              "path": [
                "products",
                ":id"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "{{firstProductId}}",
                  "key": "id"
                }
              ]
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e3928b7d-bb79-44ad-8b81-032f3d61c9b9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ TC_001 - Validate 200 OK response for a valid product ID\r",
                  "pm.test(\"TC_001 - Status code is 200 for a valid product ID\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "if (jsonData.success && jsonData.data) {\r",
                  "    let product = jsonData.data;\r",
                  "\r",
                  "    // ✅ Store key product details as environment variables\r",
                  "    pm.environment.set(\"productId\", product.id);\r",
                  "    pm.environment.set(\"productTitle\", product.title);\r",
                  "    pm.environment.set(\"productDescription\", product.description);\r",
                  "    pm.environment.set(\"brandName\", product.brandName);\r",
                  "    pm.environment.set(\"model\", product.model);\r",
                  "    pm.environment.set(\"expiryDate\", product.expiryDate);\r",
                  "    pm.environment.set(\"manufactureDate\", product.manufactureDate);\r",
                  "    pm.environment.set(\"quantity\", product.quantity);\r",
                  "    pm.environment.set(\"sellingPrice\", product.sellingPrice);\r",
                  "    pm.environment.set(\"costPrice\", product.costPrice);\r",
                  "    pm.environment.set(\"sku\", product.sku);\r",
                  "    pm.environment.set(\"eanNumber\", product.eanNumber);\r",
                  "    pm.environment.set(\"categoryId\", product.category.id);\r",
                  "    pm.environment.set(\"categoryName\", product.category.name);\r",
                  "    pm.environment.set(\"sellerEmail\", product.seller.email);\r",
                  "    pm.environment.set(\"sellerFullName\", product.seller.fullName);\r",
                  "    \r",
                  "    console.log(\"✅ Stored product details as environment variables.\");\r",
                  "}\r",
                  "\r",
                  "// ✅ TC_002 - Validate response structure\r",
                  "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                  "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                  "\r",
                  "    let product = jsonData.data;\r",
                  "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"model\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"expiryDate\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"manufactureDate\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"quantity\").that.is.a(\"number\");\r",
                  "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"costPrice\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"sku\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"eanNumber\").that.is.a(\"string\");\r",
                  "\r",
                  "    pm.expect(product).to.have.property(\"category\").that.is.an(\"object\");\r",
                  "    pm.expect(product.category).to.have.property(\"id\").that.is.a(\"string\");\r",
                  "    pm.expect(product.category).to.have.property(\"name\").that.is.a(\"string\");\r",
                  "\r",
                  "    pm.expect(product).to.have.property(\"seller\").that.is.an(\"object\");\r",
                  "    pm.expect(product.seller).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                  "    pm.expect(product.seller).to.have.property(\"email\").that.is.a(\"string\");\r",
                  "\r",
                  "    pm.expect(product).to.have.property(\"reviews\").that.is.an(\"object\");\r",
                  "    pm.expect(product.reviews).to.have.property(\"data\").that.is.an(\"array\");\r",
                  "});\r",
                  "\r",
                  "// ✅ TC_003 - Validate numerical values (quantity, price)\r",
                  "pm.test(\"TC_003 - Ensure numerical values are correct\", function () {\r",
                  "    let product = pm.response.json().data;\r",
                  "    pm.expect(product.quantity).to.be.a(\"number\");\r",
                  "    pm.expect(parseFloat(product.sellingPrice)).to.be.a(\"number\");\r",
                  "    pm.expect(parseFloat(product.costPrice)).to.be.a(\"number\");\r",
                  "});\r",
                  "\r",
                  "// ✅ TC_004 - Validate seller email format\r",
                  "pm.test(\"TC_004 - Validate seller email format\", function () {\r",
                  "    let product = pm.response.json().data;\r",
                  "    pm.expect(product.seller.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                  "});\r",
                  "\r",
                  "// ✅ TC_005 - API response time should be within 1000ms\r",
                  "pm.test(\"TC_005 - API response time should be within 1000ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "337313f0-1a4e-48a3-81fa-bec5badf73dc"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c3857aad-3a03-42df-a3e2-96403f7309b0",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "288a0e0e-2153-4c7d-bf64-14ea8b598e58"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "products",
              "50aa5b79-e130-48f3-bd96-9d1285a6558e"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "29be0669-6f66-4d06-8ecf-871dfd9848c8",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "4465c3d9-27f8-4651-94da-7aff891d56b1",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:08 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "977"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              102,
              101,
              116,
              99,
              104,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              46,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              48,
              97,
              97,
              53,
              98,
              55,
              57,
              45,
              101,
              49,
              51,
              48,
              45,
              52,
              56,
              102,
              51,
              45,
              98,
              100,
              57,
              54,
              45,
              57,
              100,
              49,
              50,
              56,
              53,
              97,
              54,
              53,
              53,
              56,
              101,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              78,
              105,
              107,
              101,
              32,
              65,
              105,
              114,
              32,
              77,
              97,
              120,
              32,
              50,
              55,
              48,
              32,
              50,
              50,
              53,
              50,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              76,
              105,
              103,
              104,
              116,
              119,
              101,
              105,
              103,
              104,
              116,
              32,
              115,
              110,
              101,
              97,
              107,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              115,
              117,
              112,
              101,
              114,
              105,
              111,
              114,
              32,
              99,
              117,
              115,
              104,
              105,
              111,
              110,
              105,
              110,
              103,
              32,
              97,
              110,
              100,
              32,
              115,
              116,
              121,
              108,
              101,
              46,
              34,
              44,
              34,
              98,
              114,
              97,
              110,
              100,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              111,
              108,
              103,
              97,
              116,
              101,
              34,
              44,
              34,
              109,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              77,
              53,
              55,
              54,
              55,
              34,
              44,
              34,
              118,
              101,
              110,
              100,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              120,
              112,
              105,
              114,
              121,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              55,
              45,
              49,
              50,
              45,
              50,
              57,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              109,
              97,
              110,
              117,
              102,
              97,
              99,
              116,
              117,
              114,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              49,
              48,
              45,
              50,
              49,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              105,
              115,
              111,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              55,
              54,
              48,
              57,
              34,
              44,
              34,
              110,
              97,
              102,
              100,
              97,
              99,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              49,
              56,
              54,
              56,
              34,
              44,
              34,
              104,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              113,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              53,
              56,
              44,
              34,
              115,
              101,
              108,
              108,
              105,
              110,
              103,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              53,
              49,
              52,
              34,
              44,
              34,
              99,
              111,
              115,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              52,
              55,
              51,
              34,
              44,
              34,
              115,
              107,
              117,
              34,
              58,
              34,
              80,
              85,
              56,
              90,
              51,
              48,
              56,
              68,
              34,
              44,
              34,
              101,
              97,
              110,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              51,
              56,
              57,
              57,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              56,
              58,
              51,
              52,
              58,
              50,
              50,
              46,
              48,
              54,
              52,
              90,
              34,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              101,
              52,
              56,
              50,
              102,
              51,
              57,
              45,
              49,
              50,
              56,
              54,
              45,
              52,
              52,
              57,
              53,
              45,
              57,
              101,
              101,
              50,
              45,
              51,
              100,
              97,
              98,
              51,
              56,
              52,
              56,
              56,
              99,
              99,
              51,
              34,
              44,
              34,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              70,
              114,
              97,
              103,
              114,
              97,
              110,
              99,
              101,
              34,
              125,
              44,
              34,
              112,
              114,
              111,
              100,
              117,
              99,
              116,
              73,
              109,
              97,
              103,
              101,
              34,
              58,
              91,
              93,
              44,
              34,
              115,
              101,
              108,
              108,
              101,
              114,
              34,
              58,
              123,
              34,
              102,
              105,
              114,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              34,
              44,
              34,
              108,
              97,
              115,
              116,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              79,
              106,
              97,
              121,
              34,
              44,
              34,
              102,
              117,
              108,
              108,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              84,
              101,
              115,
              116,
              32,
              79,
              106,
              97,
              121,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              111,
              103,
              64,
              101,
              45,
              114,
              101,
              99,
              111,
              114,
              100,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              112,
              104,
              111,
              110,
              101,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              97,
              118,
              97,
              116,
              97,
              114,
              34,
              58,
              34,
              104,
              116,
              116,
              112,
              115,
              58,
              47,
              47,
              115,
              116,
              111,
              114,
              97,
              103,
              101,
              46,
              103,
              111,
              111,
              103,
              108,
              101,
              97,
              112,
              105,
              115,
              46,
              99,
              111,
              109,
              47,
              100,
              97,
              110,
              100,
              121,
              115,
              45,
              55,
              100,
              101,
              56,
              49,
              46,
              97,
              112,
              112,
              115,
              112,
              111,
              116,
              46,
              99,
              111,
              109,
              47,
              97,
              118,
              97,
              116,
              97,
              114,
              37,
              50,
              70,
              105,
              109,
              97,
              103,
              101,
              115,
              46,
              106,
              112,
              103,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              48,
              84,
              49,
              54,
              58,
              52,
              52,
              58,
              49,
              57,
              46,
              50,
              57,
              52,
              90,
              34,
              125,
              44,
              34,
              114,
              101,
              118,
              105,
              101,
              119,
              115,
              34,
              58,
              123,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              93,
              44,
              34,
              110,
              111,
              79,
              102,
              82,
              101,
              118,
              105,
              101,
              119,
              115,
              34,
              58,
              48,
              125,
              44,
              34,
              117,
              115,
              101,
              114,
              67,
              97,
              110,
              82,
              101,
              118,
              105,
              101,
              119,
              34,
              58,
              123,
              34,
              99,
              97,
              110,
              82,
              101,
              118,
              105,
              101,
              119,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              111,
              114,
              100,
              101,
              114,
              73,
              116,
              101,
              109,
              73,
              100,
              34,
              58,
              110,
              117,
              108,
              108,
              125,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 99,
          "responseSize": 977
        },
        "id": "e87e3c10-3383-4997-996a-4557c70e7107",
        "assertions": [
          {
            "assertion": "TC_001 - Status code is 200 for a valid product ID",
            "skipped": false
          },
          {
            "assertion": "TC_002 - Response contains all expected fields",
            "skipped": false
          },
          {
            "assertion": "TC_003 - Ensure numerical values are correct",
            "skipped": false
          },
          {
            "assertion": "TC_004 - Validate seller email format",
            "skipped": false
          },
          {
            "assertion": "TC_005 - API response time should be within 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "dd217f2b-f9e3-4a97-ba87-ccb856e7a792",
          "length": 40,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "38afc1d0-4cd8-43d4-bad9-a4525a281dd6"
        },
        "item": {
          "id": "c8b7578a-c912-43b2-a8df-f584d1599230",
          "name": "update product",
          "request": {
            "url": {
              "path": [
                "products",
                ":id"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "{{firstProductId}}",
                  "key": "id"
                }
              ]
            },
            "method": "PUT",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{authToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset:utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response message\r",
                  "pm.test(\"Response contains success message\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product updated successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate updated product structure\r",
                  "pm.test(\"Response contains updated product details\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"data\");\r",
                  "    let product = jsonData.data;\r",
                  "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"price\").that.is.a(\"number\");\r",
                  "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\").and.includes(\"http\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate authorization requirement\r",
                  "pm.test(\"Request requires authorization\", function () {\r",
                  "    pm.response.to.not.have.status(401);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d046e760-dc6a-44b9-a725-667194ab3e82",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure Authorization Token is Set\r",
                  "if (!pm.environment.get(\"authToken\")) {\r",
                  "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");\r",
                  "}\r",
                  "\r",
                  "// ✅ Set Authorization Header\r",
                  "pm.request.headers.add({\r",
                  "    key: \"Authorization\",\r",
                  "    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
                  "});\r",
                  "\r",
                  "// ✅ Function to generate a random number within a range\r",
                  "function getRandomNumber(min, max) {\r",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                  "}\r",
                  "\r",
                  "// ✅ Predefined list of real product names and descriptions\r",
                  "const products = [\r",
                  "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },\r",
                  "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },\r",
                  "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },\r",
                  "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },\r",
                  "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },\r",
                  "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },\r",
                  "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },\r",
                  "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },\r",
                  "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },\r",
                  "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }\r",
                  "];\r",
                  "\r",
                  "// ✅ Select a random product\r",
                  "const selectedProduct = products[Math.floor(Math.random() * products.length)];\r",
                  "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;\r",
                  "\r",
                  "// ✅ Generate dynamic cost and selling prices\r",
                  "const costPrice = getRandomNumber(50, 500);\r",
                  "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice\r",
                  "\r",
                  "// ✅ Fetch existing product details from environment variables\r",
                  "const productDetails = {\r",
                  "    title: uniqueTitle,  // Updating title\r",
                  "    description: selectedProduct.description, // Updating description\r",
                  "    brandName: pm.environment.get(\"brandName\") || \"DefaultBrand\",\r",
                  "    model: pm.environment.get(\"model\") || `M${getRandomNumber(1000, 9999)}`,\r",
                  "    expiryDate: pm.environment.get(\"expiryDate\") || \"2026-12-31T00:00:00.000Z\",\r",
                  "    manufactureDate: pm.environment.get(\"manufactureDate\") || \"2024-01-01T00:00:00.000Z\",\r",
                  "    isoNumber: pm.environment.get(\"isoNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                  "    nafdacNumber: pm.environment.get(\"nafdacNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                  "    quantity: pm.environment.get(\"quantity\") || getRandomNumber(1, 100),\r",
                  "    costPrice: costPrice.toString(), // Updating cost price\r",
                  "    sellingPrice: sellingPrice.toString(), // Updating selling price\r",
                  "    eanNumber: pm.environment.get(\"eanNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                  "    categoryId: pm.environment.get(\"categoryId4p\"),\r",
                  "    saleStart: pm.environment.get(\"saleStart\") || \"2025-01-01T00:00:00.000Z\",\r",
                  "    saleEnd: pm.environment.get(\"saleEnd\") || \"2026-12-31T00:00:00.000Z\"\r",
                  "};\r",
                  "\r",
                  "// ✅ Update form-data in the request body (excluding images)\r",
                  "pm.request.body.update({\r",
                  "    mode: \"formdata\",\r",
                  "    formdata: Object.entries(productDetails).map(([key, value]) => ({\r",
                  "        key: key,\r",
                  "        value: value,\r",
                  "        type: \"text\"\r",
                  "    }))\r",
                  "});\r",
                  "\r",
                  "// ✅ Log generated data for debugging\r",
                  "console.log(\"🔹 Updated Product Details:\", productDetails);\r",
                  ""
                ],
                "_lastExecutionId": "4b89423d-5840-4106-a7ed-22222b02f904"
              }
            }
          ]
        },
        "prerequestScript": [
          {
            "error": {
              "type": "Error",
              "name": "TypeError",
              "message": "Cannot read properties of undefined (reading 'update')",
              "checksum": "4bf828083eab87ee4be22a00051b1e31",
              "id": "8d91dd09-9010-424e-aaf2-7495bb1b33c4",
              "timestamp": 1747063088768,
              "stacktrace": []
            }
          }
        ],
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "products",
              "50aa5b79-e130-48f3-bd96-9d1285a6558e"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4OCwiZXhwIjoxNzQ3MjM1ODg4fQ.lTGBsJiRrEUug-649QR0ctIj4RcCTBMHmhzYr5fnzyE",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d8b810db-7007-4353-bb00-a28ef144754e",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "0",
              "system": true
            }
          ],
          "method": "PUT",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4OCwiZXhwIjoxNzQ3MjM1ODg4fQ.lTGBsJiRrEUug-649QR0ctIj4RcCTBMHmhzYr5fnzyE",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "e7ebc75e-f4fd-4e7f-a9bd-30c953331948",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:08 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "63"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              110,
              32,
              105,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              115,
              101,
              114,
              118,
              101,
              114,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 85,
          "responseSize": 63
        },
        "id": "c8b7578a-c912-43b2-a8df-f584d1599230",
        "assertions": [
          {
            "assertion": "Response is in JSON format",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Response is in JSON format",
              "message": "expected 'Content-Type' response header to be 'application/json; charset:utf-8' but got 'application/json; charset=utf-8'",
              "stack": "AssertionError: expected 'Content-Type' response header to be 'application/json; charset:utf-8' but got 'application/json; charset=utf-8'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:2:31)"
            }
          },
          {
            "assertion": "Response contains success flag",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response contains success flag",
              "message": "expected { success: false, …(1) } to have property 'success' of true, but got false",
              "stack": "AssertionError: expected { success: false, …(1) } to have property 'success' of true, but got false\n   at Object.eval sandbox-script.js:3:31)"
            }
          },
          {
            "assertion": "Response contains success message",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Response contains success message",
              "message": "expected 'An internal server error occurred' to include 'Product updated successfully'",
              "stack": "AssertionError: expected 'An internal server error occurred' to include 'Product updated successfully'\n   at Object.eval sandbox-script.js:4:31)"
            }
          },
          {
            "assertion": "Response contains updated product details",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "Response contains updated product details",
              "message": "expected { success: false, …(1) } to have property 'data'",
              "stack": "AssertionError: expected { success: false, …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:5:31)"
            }
          },
          {
            "assertion": "Request requires authorization",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e5210c3b-e34d-464c-8464-fd7265017270",
          "length": 40,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "b627a37f-dc25-422a-ad8c-b5612eb3221e"
        },
        "item": {
          "id": "83efae9e-6fdb-489c-a62b-ec39aa817070",
          "name": "delete product",
          "request": {
            "url": {
              "path": [
                "products",
                ":id"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "{{firstProductId}}",
                  "key": "id"
                }
              ]
            },
            "method": "DELETE",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{authToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b2e3e38f-f2f4-45ca-9a31-67a7b8df002d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate product data structure\r",
                  "pm.test(\"Response contains valid product details\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"data\");\r",
                  "    let product = jsonData.data;\r",
                  "    \r",
                  "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate authorization requirement\r",
                  "pm.test(\"Request requires authorization\", function () {\r",
                  "    pm.response.to.not.have.status(401);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "e4cbd781-c87b-4533-b4b1-cb5d3b8b43ee"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5bd1202c-89cc-4b06-b701-f4ef429f75e9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Retrieve stored product IDs from the environment\r",
                  "let storedProductIds = pm.environment.get(\"product_ids\");\r",
                  "storedProductIds = storedProductIds ? JSON.parse(storedProductIds) : [];\r",
                  "\r",
                  "// ✅ Select a random product ID and store it before the request runs\r",
                  "if (storedProductIds.length > 0) {\r",
                  "    let randomIndex = Math.floor(Math.random() * storedProductIds.length);\r",
                  "    let randomProductId = storedProductIds[randomIndex];\r",
                  "\r",
                  "    // ✅ Store the selected product ID for use in the request\r",
                  "    pm.environment.set(\"randomProductId\", randomProductId);\r",
                  "    console.log(\"Randomly selected Product ID:\", randomProductId);\r",
                  "} else {\r",
                  "    console.warn(\"No stored product IDs available! Ensure the previous request fetched product IDs correctly.\");\r",
                  "}\r",
                  ""
                ],
                "_lastExecutionId": "23bd7d97-e382-4214-b968-09ce1c0c2dfe"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "products",
              "50aa5b79-e130-48f3-bd96-9d1285a6558e"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4OCwiZXhwIjoxNzQ3MjM1ODg4fQ.lTGBsJiRrEUug-649QR0ctIj4RcCTBMHmhzYr5fnzyE",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6f2d76ad-abcc-4607-875f-dfdf93f69896",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4OCwiZXhwIjoxNzQ3MjM1ODg4fQ.lTGBsJiRrEUug-649QR0ctIj4RcCTBMHmhzYr5fnzyE",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "5afe9488-04fd-4071-a60c-c391735c098d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:08 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "820"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              46,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              53,
              48,
              97,
              97,
              53,
              98,
              55,
              57,
              45,
              101,
              49,
              51,
              48,
              45,
              52,
              56,
              102,
              51,
              45,
              98,
              100,
              57,
              54,
              45,
              57,
              100,
              49,
              50,
              56,
              53,
              97,
              54,
              53,
              53,
              56,
              101,
              34,
              44,
              34,
              116,
              105,
              116,
              108,
              101,
              34,
              58,
              34,
              78,
              105,
              107,
              101,
              32,
              65,
              105,
              114,
              32,
              77,
              97,
              120,
              32,
              50,
              55,
              48,
              32,
              50,
              50,
              53,
              50,
              34,
              44,
              34,
              100,
              101,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
              34,
              58,
              34,
              76,
              105,
              103,
              104,
              116,
              119,
              101,
              105,
              103,
              104,
              116,
              32,
              115,
              110,
              101,
              97,
              107,
              101,
              114,
              115,
              32,
              119,
              105,
              116,
              104,
              32,
              115,
              117,
              112,
              101,
              114,
              105,
              111,
              114,
              32,
              99,
              117,
              115,
              104,
              105,
              111,
              110,
              105,
              110,
              103,
              32,
              97,
              110,
              100,
              32,
              115,
              116,
              121,
              108,
              101,
              46,
              34,
              44,
              34,
              98,
              114,
              97,
              110,
              100,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              111,
              108,
              103,
              97,
              116,
              101,
              34,
              44,
              34,
              109,
              111,
              100,
              101,
              108,
              34,
              58,
              34,
              77,
              53,
              55,
              54,
              55,
              34,
              44,
              34,
              118,
              101,
              110,
              100,
              111,
              114,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              101,
              120,
              112,
              105,
              114,
              121,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              55,
              45,
              49,
              50,
              45,
              50,
              57,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              109,
              97,
              110,
              117,
              102,
              97,
              99,
              116,
              117,
              114,
              101,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              50,
              51,
              45,
              49,
              48,
              45,
              50,
              49,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              105,
              115,
              111,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              55,
              54,
              48,
              57,
              34,
              44,
              34,
              110,
              97,
              102,
              100,
              97,
              99,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              49,
              56,
              54,
              56,
              34,
              44,
              34,
              104,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              119,
              101,
              105,
              103,
              104,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              113,
              117,
              97,
              110,
              116,
              105,
              116,
              121,
              34,
              58,
              53,
              56,
              44,
              34,
              115,
              116,
              111,
              99,
              107,
              76,
              105,
              109,
              105,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              111,
              115,
              116,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              52,
              55,
              51,
              34,
              44,
              34,
              115,
              101,
              108,
              108,
              105,
              110,
              103,
              80,
              114,
              105,
              99,
              101,
              34,
              58,
              34,
              53,
              49,
              52,
              34,
              44,
              34,
              115,
              97,
              108,
              101,
              83,
              116,
              97,
              114,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              55,
              45,
              48,
              51,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              115,
              97,
              108,
              101,
              69,
              110,
              100,
              34,
              58,
              34,
              50,
              48,
              50,
              54,
              45,
              48,
              55,
              45,
              49,
              49,
              84,
              48,
              48,
              58,
              48,
              48,
              58,
              48,
              48,
              46,
              48,
              48,
              48,
              90,
              34,
              44,
              34,
              115,
              107,
              117,
              34,
              58,
              34,
              80,
              85,
              56,
              90,
              51,
              48,
              56,
              68,
              34,
              44,
              34,
              101,
              97,
              110,
              78,
              117,
              109,
              98,
              101,
              114,
              34,
              58,
              34,
              51,
              56,
              57,
              57,
              34,
              44,
              34,
              99,
              114,
              101,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              56,
              58,
              51,
              52,
              58,
              50,
              50,
              46,
              48,
              54,
              52,
              90,
              34,
              44,
              34,
              117,
              112,
              100,
              97,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              51,
              45,
              50,
              56,
              84,
              48,
              56,
              58,
              51,
              52,
              58,
              50,
              50,
              46,
              48,
              54,
              52,
              90,
              34,
              44,
              34,
              105,
              115,
              68,
              101,
              108,
              101,
              116,
              101,
              100,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              100,
              101,
              108,
              101,
              116,
              101,
              100,
              65,
              116,
              34,
              58,
              110,
              117,
              108,
              108,
              44,
              34,
              99,
              97,
              116,
              101,
              103,
              111,
              114,
              121,
              73,
              100,
              34,
              58,
              34,
              53,
              101,
              52,
              56,
              50,
              102,
              51,
              57,
              45,
              49,
              50,
              56,
              54,
              45,
              52,
              52,
              57,
              53,
              45,
              57,
              101,
              101,
              50,
              45,
              51,
              100,
              97,
              98,
              51,
              56,
              52,
              56,
              56,
              99,
              99,
              51,
              34,
              44,
              34,
              115,
              101,
              108,
              108,
              101,
              114,
              73,
              100,
              34,
              58,
              34,
              100,
              102,
              49,
              98,
              100,
              56,
              50,
              102,
              45,
              57,
              98,
              51,
              100,
              45,
              52,
              52,
              52,
              52,
              45,
              98,
              56,
              97,
              97,
              45,
              57,
              50,
              54,
              97,
              97,
              99,
              52,
              102,
              57,
              97,
              99,
              101,
              34,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 94,
          "responseSize": 820
        },
        "id": "83efae9e-6fdb-489c-a62b-ec39aa817070",
        "assertions": [
          {
            "assertion": "Response is in JSON format",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response contains success flag",
            "skipped": false
          },
          {
            "assertion": "Response contains valid product details",
            "skipped": false
          },
          {
            "assertion": "Request requires authorization",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2485dd18-d921-4c4a-b402-fe06caf05267",
          "length": 40,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "fbda0774-f64c-4a16-86a0-c64a87b802b3"
        },
        "item": {
          "id": "e7c6f7cf-f1fb-425f-9c69-f9ea93232803",
          "name": "Top brands",
          "request": {
            "url": {
              "path": [
                "products",
                "brands"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "83c0d520-e58c-413f-ab9a-6a86fce39f05",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response message\r",
                  "pm.test(\"Response contains success message\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product top brand fetched successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate data structure (Array of Brands)\r",
                  "pm.test(\"Response contains an array of top brands\", function () {\r",
                  "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                  "\r",
                  "    if (jsonData.data.length > 0) {\r",
                  "        let brand = jsonData.data[0];\r",
                  "\r",
                  "        pm.expect(brand).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                  "        pm.expect(brand).to.have.property(\"count\").that.is.a(\"number\");\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate authorization requirement\r",
                  "pm.test(\"Request requires authorization\", function () {\r",
                  "    pm.response.to.not.have.status(401);\r",
                  "});\r",
                  "\r",
                  "// ✅ Store brand names for future use\r",
                  "if (jsonData.data.length > 0) {\r",
                  "    let brandNames = jsonData.data.map(brand => brand.brandName);\r",
                  "    pm.environment.set(\"brand_names\", JSON.stringify(brandNames));\r",
                  "    console.log(\"Stored brand names:\", brandNames);\r",
                  "}\r",
                  ""
                ],
                "_lastExecutionId": "4158cfe7-cb1b-4531-9629-d21d38d52ec4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "products",
              "brands"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7af6792a-c20d-4078-a2c7-b869cce89377",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b51ca5f7-8ae1-41e8-8283-ca4c9de60753",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:09 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "246"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              116,
              111,
              112,
              32,
              98,
              114,
              97,
              110,
              100,
              32,
              102,
              101,
              116,
              99,
              104,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              46,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              91,
              123,
              34,
              98,
              114,
              97,
              110,
              100,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              100,
              105,
              100,
              97,
              115,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              98,
              114,
              97,
              110,
              100,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              111,
              99,
              97,
              45,
              99,
              111,
              108,
              97,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              98,
              114,
              97,
              110,
              100,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              78,
              101,
              115,
              116,
              108,
              195,
              169,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              51,
              125,
              44,
              123,
              34,
              98,
              114,
              97,
              110,
              100,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              76,
              39,
              111,
              114,
              195,
              169,
              97,
              108,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              49,
              125,
              44,
              123,
              34,
              98,
              114,
              97,
              110,
              100,
              78,
              97,
              109,
              101,
              34,
              58,
              34,
              83,
              111,
              110,
              121,
              34,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              34,
              58,
              49,
              125,
              93,
              125
            ]
          },
          "cookie": [],
          "responseTime": 83,
          "responseSize": 246
        },
        "id": "e7c6f7cf-f1fb-425f-9c69-f9ea93232803",
        "assertions": [
          {
            "assertion": "Response is in JSON format",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response contains success flag",
            "skipped": false
          },
          {
            "assertion": "Response contains success message",
            "skipped": false
          },
          {
            "assertion": "Response contains an array of top brands",
            "skipped": false
          },
          {
            "assertion": "Request requires authorization",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "952bc681-fe45-49e5-bb64-9160f2020745",
          "length": 40,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d2865f5d-1f1f-48dd-8633-af1da76fcdb2"
        },
        "item": {
          "id": "f1be75de-bb8e-4f8c-990d-f9230ed0fc7d",
          "name": "search products",
          "request": {
            "url": {
              "path": [
                "products",
                "search"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"q\": \"LG\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70e98749-492d-42fd-b924-96dcad8f7dd5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ TC_001 - Validate 200 OK response for a valid search query\r",
                  "pm.test(\"TC_001 - Status code is 200 for a valid search\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ TC_002 - Validate response structure\r",
                  "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                  "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                  "});\r",
                  "\r",
                  "// ✅ TC_003 - Validate search query response does not return 404 or empty result set\r",
                  "pm.test(\"TC_003 - Valid search should not return 404 or empty result set\", function () {\r",
                  "    let data = pm.response.json().data;\r",
                  "    \r",
                  "    pm.expect(pm.response.code).not.to.eql(404);\r",
                  "    pm.expect(data.result.length).to.be.above(0, \"Search query should return at least one result\");\r",
                  "});\r",
                  "\r",
                  "// ✅ TC_004 - Validate response time (Performance)\r",
                  "pm.test(\"TC_004 - API response time should be within 1000ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a2806663-5e06-423a-9899-7ec1f8034045"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "products",
              "search"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "96103c0d-44a5-429f-8466-5e19650046d1",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "17",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"q\": \"LG\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "a417b2a5-e30b-439d-abc7-07ca2cb9ed59",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:09 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "175"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              102,
              101,
              116,
              99,
              104,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              46,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              114,
              101,
              115,
              117,
              108,
              116,
              34,
              58,
              91,
              93,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              80,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              112,
              97,
              103,
              101,
              83,
              105,
              122,
              101,
              34,
              58,
              50,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              97,
              103,
              101,
              115,
              34,
              58,
              49,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              49,
              44,
              34,
              104,
              97,
              115,
              80,
              114,
              101,
              118,
              105,
              111,
              117,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              104,
              97,
              115,
              78,
              101,
              120,
              116,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 100,
          "responseSize": 175
        },
        "id": "f1be75de-bb8e-4f8c-990d-f9230ed0fc7d",
        "assertions": [
          {
            "assertion": "TC_001 - Status code is 200 for a valid search",
            "skipped": false
          },
          {
            "assertion": "TC_002 - Response contains all expected fields",
            "skipped": false
          },
          {
            "assertion": "TC_003 - Valid search should not return 404 or empty result set",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "TC_003 - Valid search should not return 404 or empty result set",
              "message": "Search query should return at least one result: expected +0 to be above +0",
              "stack": "AssertionError: Search query should return at least one result: expected +0 to be above +0\n   at Object.eval sandbox-script.js:3:34)"
            }
          },
          {
            "assertion": "TC_004 - API response time should be within 1000ms",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "185f16ea-c567-4a7e-a2ba-7045e1af4a88",
          "length": 40,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "44bd28b1-a908-42da-9ffa-0aa0ecdda280"
        },
        "item": {
          "id": "e07737be-bc80-4064-964b-d7b5fc400e57",
          "name": "create seller",
          "request": {
            "url": {
              "path": [
                "seller"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "managerFullName",
                  "value": "{{managerFullName}}",
                  "type": "text"
                },
                {
                  "key": "shopName",
                  "value": "{{shopName}}",
                  "type": "text"
                },
                {
                  "key": "cacNumber",
                  "value": "{{cacNumber}}",
                  "type": "text"
                },
                {
                  "key": "documentType",
                  "value": "NIN",
                  "type": "text"
                },
                {
                  "key": "documentNumber",
                  "value": "77280892822",
                  "type": "text"
                },
                {
                  "key": "phoneNumber",
                  "value": "08109642088",
                  "type": "text"
                },
                {
                  "disabled": true,
                  "key": "idNumber",
                  "value": "56254709617",
                  "type": "text"
                },
                {
                  "key": "firstName",
                  "value": "Fidelis",
                  "type": "text"
                },
                {
                  "key": "lastName",
                  "value": "Ogbeni",
                  "type": "text"
                },
                {
                  "key": "accountType",
                  "value": "INDIVIDUAL",
                  "type": "text"
                },
                {
                  "key": "bankCode",
                  "value": "50211",
                  "type": "text"
                },
                {
                  "key": "bankName",
                  "value": "FirstBank",
                  "type": "text"
                },
                {
                  "key": "accountNumber",
                  "value": "3066415171",
                  "type": "text"
                },
                {
                  "key": "documentImage",
                  "type": "file",
                  "src": "postman-cloud:///1f00bb20-a0aa-4780-95e0-d485a8c42125"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ebb38ccc-2e64-4b9e-bd2b-55d1c0ed269c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// // Function to generate a random Nigerian phone number\r",
                  "// function generatePhoneNumber() {\r",
                  "//     return \"081\" + Math.floor(10000000 + Math.random() * 90000000); // Generates 081xxxxxxx\r",
                  "// }\r",
                  "\r",
                  "// // Function to generate a random 11-digit NIN number\r",
                  "// function generateNIN() {\r",
                  "//     return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
                  "// }\r",
                  "\r",
                  "// // Function to generate a random shop name\r",
                  "// function generateShopName() {\r",
                  "//     const shopPrefixes = [\"Super\", \"Mega\", \"Classic\", \"Elite\", \"Premium\", \"Budget\"];\r",
                  "//     const shopSuffixes = [\"Mart\", \"Shop\", \"Store\", \"Bazaar\", \"Hub\", \"Outlet\"];\r",
                  "//     return (\r",
                  "//         shopPrefixes[Math.floor(Math.random() * shopPrefixes.length)] +\r",
                  "//         \" \" +\r",
                  "//         shopSuffixes[Math.floor(Math.random() * shopSuffixes.length)]\r",
                  "//     );\r",
                  "// }\r",
                  "\r",
                  "// // Function to generate a random Nigerian bank code\r",
                  "// function getRandomBank() {\r",
                  "//     const banks = [\r",
                  "//         { name: \"FirstBank\", code: \"50211\" },\r",
                  "//         { name: \"Access Bank\", code: \"044\" },\r",
                  "//         { name: \"Zenith Bank\", code: \"057\" },\r",
                  "//         { name: \"GTBank\", code: \"058\" },\r",
                  "//         { name: \"UBA\", code: \"033\" }\r",
                  "//     ];\r",
                  "//     return banks[Math.floor(Math.random() * banks.length)];\r",
                  "// }\r",
                  "\r",
                  "// // Generate random seller details\r",
                  "// let firstName = [\"John\", \"James\", \"Sarah\", \"Jane\", \"Michael\", \"Fidelis\"][Math.floor(Math.random() * 6)];\r",
                  "// let lastName = [\"Doe\", \"Smith\", \"Johnson\", \"Brown\", \"Ogbeni\", \"Adams\"][Math.floor(Math.random() * 6)];\r",
                  "// let managerFullName = firstName + \" \" + lastName;\r",
                  "// let shopName = generateShopName();\r",
                  "// let cacNumber = Math.floor(1000 + Math.random() * 9000).toString(); // 4-digit CAC Number\r",
                  "// let documentType = \"NIN\";\r",
                  "// let documentNumber = generateNIN();\r",
                  "// let phoneNumber = generatePhoneNumber();\r",
                  "// let accountType = \"INDIVIDUAL\";\r",
                  "// let bankDetails = getRandomBank();\r",
                  "// let accountNumber = Math.floor(1000000000 + Math.random() * 9000000000).toString();\r",
                  "// let documentImage = \"https://i.imgur.com/10V6mFc.jpeg\"; // Simulated file name\r",
                  "\r",
                  "// // Store variables in Postman environment\r",
                  "// pm.environment.set(\"managerFullName\", managerFullName);\r",
                  "// pm.environment.set(\"firstName\", firstName);\r",
                  "// pm.environment.set(\"lastName\", lastName);\r",
                  "// pm.environment.set(\"shopName\", shopName);\r",
                  "// pm.environment.set(\"cacNumber\", cacNumber);\r",
                  "// pm.environment.set(\"documentType\", documentType);\r",
                  "// pm.environment.set(\"documentNumber\", documentNumber);\r",
                  "// pm.environment.set(\"phoneNumber\", phoneNumber);\r",
                  "// pm.environment.set(\"accountType\", accountType);\r",
                  "// pm.environment.set(\"bankCode\", bankDetails.code);\r",
                  "// pm.environment.set(\"bankName\", bankDetails.name);\r",
                  "// pm.environment.set(\"accountNumber\", accountNumber);\r",
                  "// pm.environment.set(\"documentImage\", documentImage);\r",
                  "\r",
                  "// // Log generated values for debugging\r",
                  "// console.log(\"✅ Auto-Generated Seller Details:\");\r",
                  "// console.log({\r",
                  "//     managerFullName,\r",
                  "//     firstName,\r",
                  "//     lastName,\r",
                  "//     shopName,\r",
                  "//     cacNumber,\r",
                  "//     documentType,\r",
                  "//     documentNumber,\r",
                  "//     phoneNumber,\r",
                  "//     accountType,\r",
                  "//     bankCode: bankDetails.code,\r",
                  "//     bankName: bankDetails.name,\r",
                  "//     accountNumber,\r",
                  "//     documentImage\r",
                  "// });\r",
                  ""
                ],
                "_lastExecutionId": "b53e8786-454b-43da-954d-a48b0dc523cb"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate response status code\r",
                  "pm.test(\"Status code is 201 (Created)\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success message\r",
                  "pm.test(\"Response message is correct\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\", \"Seller created successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response data structure\r",
                  "pm.test(\"Response contains seller details\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"sellerId\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"managerFullName\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"shopName\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"phoneNumber\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"bankName\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"accountNumber\").that.is.a(\"string\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Store seller ID for future requests\r",
                  "// pm.environment.set(\"sellerId\", jsonData.data.sellerId);\r",
                  "// console.log(\"Seller ID stored:\", jsonData.data.sellerId);\r",
                  "\r",
                  "// ✅ Validate error response for invalid input\r",
                  "pm.test(\"Error response for invalid input\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Invalid input\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate error response for missing required fields\r",
                  "pm.test(\"Error response for missing fields\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Required fields are missing\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "seller"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cbad438b-5033-49c7-ab62-4fdda830a641",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "1442",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "formdata",
            "formdata": [
              {
                "key": "managerFullName",
                "value": "",
                "type": "text"
              },
              {
                "key": "shopName",
                "value": "",
                "type": "text"
              },
              {
                "key": "cacNumber",
                "value": "",
                "type": "text"
              },
              {
                "key": "documentType",
                "value": "NIN",
                "type": "text"
              },
              {
                "key": "documentNumber",
                "value": "77280892822",
                "type": "text"
              },
              {
                "key": "phoneNumber",
                "value": "08109642088",
                "type": "text"
              },
              {
                "disabled": true,
                "key": "idNumber",
                "value": "56254709617",
                "type": "text"
              },
              {
                "key": "firstName",
                "value": "Fidelis",
                "type": "text"
              },
              {
                "key": "lastName",
                "value": "Ogbeni",
                "type": "text"
              },
              {
                "key": "accountType",
                "value": "INDIVIDUAL",
                "type": "text"
              },
              {
                "key": "bankCode",
                "value": "50211",
                "type": "text"
              },
              {
                "key": "bankName",
                "value": "FirstBank",
                "type": "text"
              },
              {
                "key": "accountNumber",
                "value": "3066415171",
                "type": "text"
              },
              {
                "key": "documentImage",
                "type": "file",
                "src": "postman-cloud:///1f00bb20-a0aa-4780-95e0-d485a8c42125",
                "disabled": true
              }
            ]
          },
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "bb85e99a-f110-4895-b999-9880517afc18",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:09 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "58"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              115,
              101,
              108,
              108,
              101,
              114,
              32,
              100,
              111,
              99,
              117,
              109,
              101,
              110,
              116,
              73,
              109,
              97,
              103,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 88,
          "responseSize": 58
        },
        "id": "e07737be-bc80-4064-964b-d7b5fc400e57",
        "assertions": [
          {
            "assertion": "Response is in JSON format",
            "skipped": false
          },
          {
            "assertion": "Status code is 201 (Created)",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status code is 201 (Created)",
              "message": "expected response to have status code 201 but got 401",
              "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:2:35)"
            }
          },
          {
            "assertion": "Response contains success flag",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Response contains success flag",
              "message": "expected { success: false, …(1) } to have property 'success' of true, but got false",
              "stack": "AssertionError: expected { success: false, …(1) } to have property 'success' of true, but got false\n   at Object.eval sandbox-script.js:3:35)"
            }
          },
          {
            "assertion": "Response message is correct",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 3,
              "test": "Response message is correct",
              "message": "expected { success: false, …(1) } to have property 'message' of 'Seller created successfully', but got 'Invalid seller documentImage'",
              "stack": "AssertionError: expected { success: false, …(1) } to have property 'message' of 'Seller created successfully', but got 'Invalid seller documentImage'\n   at Object.eval sandbox-script.js:4:35)"
            }
          },
          {
            "assertion": "Response contains seller details",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "Response contains seller details",
              "message": "expected { success: false, …(1) } to have property 'data'",
              "stack": "AssertionError: expected { success: false, …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:5:35)"
            }
          },
          {
            "assertion": "Error response for invalid input",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 5,
              "test": "Error response for invalid input",
              "message": "expected 'Invalid seller documentImage' to include 'Invalid input'",
              "stack": "AssertionError: expected 'Invalid seller documentImage' to include 'Invalid input'\n   at Object.eval sandbox-script.js:6:35)"
            }
          },
          {
            "assertion": "Error response for missing fields",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 6,
              "test": "Error response for missing fields",
              "message": "expected 'Invalid seller documentImage' to include 'Required fields are missing'",
              "stack": "AssertionError: expected 'Invalid seller documentImage' to include 'Required fields are missing'\n   at Object.eval sandbox-script.js:7:35)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "66962f86-89e8-4766-ae70-eebcc477b33a",
          "length": 40,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a26590fc-2fed-4016-bb3f-70c6d43bede1"
        },
        "item": {
          "id": "952e40e0-1f18-4aea-89a2-c66913ffb6a9",
          "name": "get seller",
          "request": {
            "url": {
              "path": [
                "seller"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{authToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3eb7f817-0a29-4b44-9136-eef0297a8bac",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response message\r",
                  "pm.test(\"Response contains success message\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate data structure\r",
                  "pm.test(\"Response contains valid seller details or No Seller added\", function () {\r",
                  "    pm.expect(jsonData.data).to.have.property(\"data\").that.is.an(\"object\");\r",
                  "\r",
                  "    let seller = jsonData.data;\r",
                  "    \r",
                  "    if(jsonData.data == null){\r",
                  "        pm.expect(jsonData.message).to.include(\"No Seller added\");\r",
                  "\r",
                  "    } else{\r",
                  "    pm.expect(seller).to.have.property(\"id\").that.is.a(\"string\");\r",
                  "    pm.expect(seller).to.have.property(\"name\").that.is.a(\"string\");\r",
                  "    pm.expect(seller).to.have.property(\"email\").that.is.a(\"string\").and.includes(\"@\");\r",
                  "    pm.expect(seller).to.have.property(\"phone\").that.is.a(\"string\");\r",
                  "    pm.expect(seller).to.have.property(\"storeName\").that.is.a(\"string\");\r",
                  "    pm.expect(seller).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate authorization requirement\r",
                  "pm.test(\"Request requires authorization\", function () {\r",
                  "    pm.response.to.not.have.status(401);\r",
                  "});\r",
                  "\r",
                  "// ✅ Store Seller ID for future use\r",
                  "if (jsonData.data && jsonData.data.id) {\r",
                  "    pm.environment.set(\"seller_id\", jsonData.data.id);\r",
                  "    console.log(\"Stored Seller ID:\", jsonData.data.id);\r",
                  "}\r",
                  ""
                ],
                "_lastExecutionId": "c6da4cec-21d4-44a6-8722-930ee4252133"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "seller"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4OCwiZXhwIjoxNzQ3MjM1ODg4fQ.lTGBsJiRrEUug-649QR0ctIj4RcCTBMHmhzYr5fnzyE",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fffae3b9-56c8-43a9-af2e-1c48aa6fc88b",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4OCwiZXhwIjoxNzQ3MjM1ODg4fQ.lTGBsJiRrEUug-649QR0ctIj4RcCTBMHmhzYr5fnzyE",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "8019fbce-f5d8-4774-9751-1bdb3cdb6d56",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:09 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "78"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              83,
              101,
              108,
              108,
              101,
              114,
              32,
              100,
              97,
              115,
              104,
              98,
              111,
              97,
              114,
              100,
              32,
              102,
              101,
              116,
              99,
              104,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              110,
              117,
              108,
              108,
              125
            ]
          },
          "cookie": [],
          "responseTime": 87,
          "responseSize": 78
        },
        "id": "952e40e0-1f18-4aea-89a2-c66913ffb6a9",
        "assertions": [
          {
            "assertion": "Response is in JSON format",
            "skipped": false
          },
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response contains success flag",
            "skipped": false
          },
          {
            "assertion": "Response contains success message",
            "skipped": false
          },
          {
            "assertion": "Response contains valid seller details or No Seller added",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 4,
              "test": "Response contains valid seller details or No Seller added",
              "message": "Target cannot be null or undefined.",
              "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:5:36)"
            }
          },
          {
            "assertion": "Request requires authorization",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ad5c4bbd-b30c-49f9-9b77-2f09c0573be5",
          "length": 40,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f7f98542-f475-42e0-9331-8875d37f43c7"
        },
        "item": {
          "id": "6985ff3d-9862-4e99-83a1-16449fed7da1",
          "name": "delete seller",
          "request": {
            "url": {
              "path": [
                "seller"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "seller"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "563f1fdb-980f-4f99-9c52-5e87167f18d5",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "e763c364-546e-46aa-bc6f-4af0c7578b8b",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:09 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "75"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              32,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              119,
              97,
              115,
              32,
              102,
              111,
              117,
              110,
              100,
              32,
              105,
              110,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 85,
          "responseSize": 75
        },
        "id": "6985ff3d-9862-4e99-83a1-16449fed7da1"
      },
      {
        "cursor": {
          "ref": "691666a5-5615-453d-8cda-792efa86fd98",
          "length": 40,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "ad6966c2-d885-4182-a601-73e4e66264bc"
        },
        "item": {
          "id": "612899eb-aa78-41fa-b606-768894bf91a5",
          "name": "get seller preference",
          "request": {
            "url": {
              "path": [
                "seller",
                "preferences"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{token}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "seller",
              "preferences"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e9b0e926-f15c-40ce-8af1-51fe6c361ade",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "d66374b7-0fbb-48e8-9595-e298be1f2b30",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:09 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "75"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              78,
              111,
              32,
              65,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              97,
              116,
              105,
              111,
              110,
              32,
              119,
              97,
              115,
              32,
              102,
              111,
              117,
              110,
              100,
              32,
              105,
              110,
              32,
              114,
              101,
              113,
              117,
              101,
              115,
              116,
              46,
              104,
              101,
              97,
              100,
              101,
              114,
              115,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 82,
          "responseSize": 75
        },
        "id": "612899eb-aa78-41fa-b606-768894bf91a5"
      },
      {
        "cursor": {
          "ref": "760d2117-7964-4d4e-ba7e-4a66ed1bae81",
          "length": 40,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "05d1138d-cdbc-43de-961f-f393fd80e9fd"
        },
        "item": {
          "id": "249f0bc1-7156-4aa8-a9bc-40fef11f7a5f",
          "name": "seller products",
          "request": {
            "url": {
              "path": [
                "products",
                "seller-products"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [
                {
                  "key": "categoryId",
                  "value": "{{categoryId}}"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{authToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": []
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "products",
              "seller-products"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [
              {
                "key": "categoryId",
                "value": "5e482f39-1286-4495-9ee2-3dab38488cc3"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4OCwiZXhwIjoxNzQ3MjM1ODg4fQ.lTGBsJiRrEUug-649QR0ctIj4RcCTBMHmhzYr5fnzyE",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "37cbefd5-84f2-48f0-badb-55c3022a8577",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4OCwiZXhwIjoxNzQ3MjM1ODg4fQ.lTGBsJiRrEUug-649QR0ctIj4RcCTBMHmhzYr5fnzyE",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "b37bed02-ebd8-480e-bf42-cae10c87918c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:09 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "175"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              116,
              114,
              117,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              80,
              114,
              111,
              100,
              117,
              99,
              116,
              32,
              102,
              101,
              116,
              99,
              104,
              101,
              100,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              108,
              121,
              46,
              34,
              44,
              34,
              100,
              97,
              116,
              97,
              34,
              58,
              123,
              34,
              114,
              101,
              115,
              117,
              108,
              116,
              34,
              58,
              91,
              93,
              44,
              34,
              99,
              117,
              114,
              114,
              101,
              110,
              116,
              80,
              97,
              103,
              101,
              34,
              58,
              49,
              44,
              34,
              112,
              97,
              103,
              101,
              83,
              105,
              122,
              101,
              34,
              58,
              50,
              48,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              80,
              97,
              103,
              101,
              115,
              34,
              58,
              49,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              67,
              111,
              117,
              110,
              116,
              34,
              58,
              55,
              44,
              34,
              104,
              97,
              115,
              80,
              114,
              101,
              118,
              105,
              111,
              117,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              104,
              97,
              115,
              78,
              101,
              120,
              116,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 92,
          "responseSize": 175
        },
        "id": "249f0bc1-7156-4aa8-a9bc-40fef11f7a5f"
      },
      {
        "cursor": {
          "ref": "3b6300f0-e886-4d0f-8d6e-118b620d4e74",
          "length": 40,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b088164d-046a-41df-8a10-f00521e266fe"
        },
        "item": {
          "id": "6c8fd3eb-820c-4857-9dfc-e45bcf672641",
          "name": "delete seller preference",
          "request": {
            "url": {
              "path": [
                "seller",
                "preferences"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c004475c-25b2-42df-82b4-d58ecd921eef",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate response status code (200 for success, 404 if no preferences exist)\r",
                  "pm.test(\"Status code is 200 or 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
                  "});\r",
                  "\r",
                  "// ✅ Check if seller preferences were deleted\r",
                  "pm.test(\"Validate seller preferences deletion response\", function () {\r",
                  "    if (jsonData.success === false) {\r",
                  "        pm.expect(jsonData).to.have.property(\"message\", \"No seller preferences found to delete.\");\r",
                  "        console.log(\"❌ No seller preferences found.\");\r",
                  "    } else {\r",
                  "        pm.expect(jsonData).to.have.property(\"message\", \"Seller preferences deleted successfully.\");\r",
                  "        console.log(\"✅ Seller preferences deleted successfully.\");\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate authorization requirement\r",
                  "pm.test(\"Request requires authorization\", function () {\r",
                  "    pm.response.to.not.have.status(401);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "3c7953e4-2c9b-40a3-b740-a7f3553162b2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "https",
            "path": [
              "seller",
              "preferences"
            ],
            "host": [
              "be-dev",
              "dandysapp",
              "com"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "168ad926-44b5-4ff2-9bbf-d9468049b630",
              "system": true
            },
            {
              "key": "Host",
              "value": "be-dev.dandysapp.com",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE",
          "auth": {
            "type": "bearer",
            "bearer": [
              {
                "type": "string",
                "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6ImRmMWJkODJmLTliM2QtNDQ0NC1iOGFhLTkyNmFhYzRmOWFjZSIsImlhdCI6MTc0NzA2MzA4NiwiZXhwIjoxNzQ3MjM1ODg2fQ.HK7BH-P1zrU0UVAnggZAXY-8-u4I9OJqki-scIOjFKo",
                "key": "token"
              }
            ]
          }
        },
        "response": {
          "id": "13be3330-b1a6-41e1-8a65-9f9fef85dcad",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "Server",
              "value": "nginx/1.24.0 (Ubuntu)"
            },
            {
              "key": "Date",
              "value": "Mon, 12 May 2025 15:18:09 GMT"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "63"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "vary",
              "value": "Origin"
            },
            {
              "key": "access-control-allow-origin",
              "value": "*"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              58,
              102,
              97,
              108,
              115,
              101,
              44,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              65,
              110,
              32,
              105,
              110,
              116,
              101,
              114,
              110,
              97,
              108,
              32,
              115,
              101,
              114,
              118,
              101,
              114,
              32,
              101,
              114,
              114,
              111,
              114,
              32,
              111,
              99,
              99,
              117,
              114,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 89,
          "responseSize": 63
        },
        "id": "6c8fd3eb-820c-4857-9dfc-e45bcf672641",
        "assertions": [
          {
            "assertion": "Response is in JSON format",
            "skipped": false
          },
          {
            "assertion": "Status code is 200 or 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Status code is 200 or 404",
              "message": "expected 500 to be one of [ 200, 404 ]",
              "stack": "AssertionError: expected 500 to be one of [ 200, 404 ]\n   at Object.eval sandbox-script.js:2:40)"
            }
          },
          {
            "assertion": "Validate seller preferences deletion response",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "Validate seller preferences deletion response",
              "message": "expected { success: false, …(1) } to have property 'message' of 'No seller preferences found to delete.', but got 'An internal server error occurred'",
              "stack": "AssertionError: expected { success: false, …(1) } to have property 'message' of 'No seller preferences found to delete.', but got 'An internal server error occurred'\n   at Object.eval sandbox-script.js:3:40)"
            }
          },
          {
            "assertion": "Request requires authorization",
            "skipped": false
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 57797
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 500",
          "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:2:21)",
          "checksum": "778acf15185d3b56e589e8cd58b72f90",
          "id": "08f801cb-bfcd-4bf0-b302-e13e3199cde3",
          "timestamp": 1747063087666,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f74798e9-c6e1-4c6d-b067-71b9717d5449",
          "name": "avatar",
          "request": {
            "url": {
              "path": [
                "user",
                "avatar"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "avatar",
                  "type": "file",
                  "src": "postman-cloud:///1f00a020-2861-4780-8431-d61fc2551cd6"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "210309b7-c4d4-4e8d-b850-8292c615b050",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response message\r",
                  "pm.test(\"Response contains success message\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Profile picture set successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate avatar URL is returned\r",
                  "pm.test(\"Response contains an avatar URL\", function () {\r",
                  "    pm.expect(jsonData.data).to.have.property(\"profilePicture\").that.is.a(\"string\").and.includes(\"http\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate authorization requirement\r",
                  "pm.test(\"Request requires authorization\", function () {\r",
                  "    pm.response.to.not.have.status(401);\r",
                  "});\r",
                  "\r",
                  "// ✅ Store avatar URL in environment variable for future use\r",
                  "if (jsonData.data.avatar) {\r",
                  "    pm.environment.set(\"uploadedAvatarUrl\", jsonData.data.avatar);\r",
                  "    console.log(\"Avatar uploaded:\", jsonData.data.avatar);\r",
                  "}\r",
                  ""
                ],
                "_lastExecutionId": "4e90ff61-5d8f-4d78-8fad-366e3cc03331"
              }
            }
          ]
        },
        "parent": {
          "id": "e2ba0dcc-3c17-4034-be5b-f7734556a863",
          "name": "Users",
          "item": [
            {
              "id": "17208e8d-3925-4553-ae83-4474e61062c2",
              "name": "Get user by ID",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "users",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "ec73234f-5419-4953-855b-2c4c21307b67"
                    }
                  ],
                  "variable": [
                    {
                      "type": "any",
                      "value": "ec73234f-5419-4953-855b-2c4c21307b67",
                      "key": "id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "faebfb9a-1af7-4029-8b99-ebfeff1685f8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "d36cb7a5-24a4-4bec-ab2e-21052fcb2891"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3bb3822a-33cd-4495-acc8-58de0884abcb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Ensure response status code is 200\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Ensure response is JSON\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// Validate success field\r",
                      "pm.test(\"Response success flag is true\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// Validate message field\r",
                      "pm.test(\"Response message is correct\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\", \"Users fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// Validate user data structure\r",
                      "pm.test(\"Response contains expected user fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let userData = jsonData.data;\r",
                      "\r",
                      "    pm.expect(userData).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"firstName\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"lastName\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"email\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"avatar\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"username\"); // Can be null\r",
                      "    pm.expect(userData).to.have.property(\"isActive\").that.is.a(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "// Validate adminAuthToken is present in request headers\r",
                      "pm.test(\"Auth token is provided\", function () {\r",
                      "    pm.expect(pm.request.headers.has(\"Authorization\")).to.be.true;\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"UserId\", jsonData.data.id)"
                    ],
                    "_lastExecutionId": "a9b8a19f-a53b-44dd-85f2-6d299661e542"
                  }
                }
              ]
            },
            {
              "id": "fc57dd6c-58af-4fc2-a42f-e2caeb33e33a",
              "name": "Get All users",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "users"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13760dcf-a574-4246-8ae3-522f3e02b810",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Validate response format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// Validate required response fields\r",
                      "pm.test(\"Response contains expected fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "// Validate user data structure (assuming data is an array of users)\r",
                      "pm.test(\"User data structure is correct\", function () {\r",
                      "    pm.expect(jsonData.data.result).to.be.an(\"array\");\r",
                      "\r",
                      "    if (jsonData.data.result.length > 0) {\r",
                      "        let user = jsonData.data.result[0]; // Check the first user\r",
                      "\r",
                      "        pm.expect(user).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"firstName\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"lastName\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"email\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"avatar\");\r",
                      "        pm.expect(user).to.have.property(\"username\");\r",
                      "        pm.expect(user).to.have.property(\"isActive\").that.is.a(\"boolean\");\r",
                      "    };\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b7fa67fc-9842-47b3-b988-0fbfb4a7be53"
                  }
                }
              ]
            },
            {
              "id": "9fccf26f-f573-4edf-aa09-71ad96a76aa7",
              "name": "make user admin",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "make-user-admin"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-access-token",
                    "value": "{{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"testog@e-record.com\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "943fb355-4353-4065-ad25-322ed5680b0c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 800ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(800);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body has 'success' field set to true\", function () {\r",
                      "    pm.expect(pm.response.json().success).to.be.true;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body has 'message' field with value 'User profile updated successfully.'\", function () {\r",
                      "    pm.expect(pm.response.json().message).to.equal(\"User profile updated successfully.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "657f71c1-47be-4d91-ade1-17a47f731e7f"
                  }
                }
              ]
            },
            {
              "id": "e3bb1f2b-68da-48d0-b620-1e275bc92302",
              "name": "make admin user",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "make-admin-user"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\": \"testog@e-record.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0ee7c7fb-96c2-4d21-8d21-a1db21a6c9fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Validate response format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// Validate required response fields\r",
                      "pm.test(\"Response contains expected fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\");\r",
                      "});\r",
                      "\r",
                      "// Validate message in the response\r",
                      "pm.test(\"Message in the response is 'User profile updated successfully.'\", function () {\r",
                      "    pm.expect(jsonData.message).to.equal(\"User profile updated successfully.\");\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "10234f14-314d-41d6-a03c-e77166823722"
                  }
                }
              ]
            },
            {
              "id": "922b9511-fcd0-43ec-98b4-fb8305ee7faa",
              "name": "suspend user",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "user",
                    "suspend"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "a004f54a-5d5b-4655-975c-2c5ae89e642a",
              "name": "unsuspend user",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "user",
                    "unsuspend",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "ec73234f-5419-4953-855b-2c4c21307b67",
                      "key": "id"
                    }
                  ]
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "// {\r\n//     \"email\": \"testog@e-record.com\"\r\n// }",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "fc411c8b-215f-4bf6-a27e-ee7c6e948f39",
              "name": "config",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "config"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b0db7cf7-5a56-4aa5-a504-90d715c68420",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Test for the status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Test for response time\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "// Test for response body properties\r",
                      "pm.test(\"Response body has required properties\", function () {\r",
                      "    pm.response.to.have.jsonBody('success');\r",
                      "    pm.response.to.have.jsonBody('message');\r",
                      "    pm.response.to.have.jsonBody('data');\r",
                      "});\r",
                      "\r",
                      "// Test for specific values in the response body\r",
                      "pm.test(\"Success is true and message is 'Config fetched successfully.'\", function () {\r",
                      "    pm.expect(pm.response.json().success).to.be.true;\r",
                      "    pm.expect(pm.response.json().message).to.equal(\"Config fetched successfully.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "cbd52a5a-6393-4617-a64b-f9de3834f583"
                  }
                }
              ]
            },
            {
              "id": "0b0bbaca-55b1-4d35-a423-263c74b08dd5",
              "name": "config",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "config"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "f74798e9-c6e1-4c6d-b067-71b9717d5449",
              "name": "avatar",
              "request": {
                "url": {
                  "path": [
                    "user",
                    "avatar"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "avatar",
                      "type": "file",
                      "src": "postman-cloud:///1f00a020-2861-4780-8431-d61fc2551cd6"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "210309b7-c4d4-4e8d-b850-8292c615b050",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Profile picture set successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate avatar URL is returned\r",
                      "pm.test(\"Response contains an avatar URL\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"profilePicture\").that.is.a(\"string\").and.includes(\"http\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store avatar URL in environment variable for future use\r",
                      "if (jsonData.data.avatar) {\r",
                      "    pm.environment.set(\"uploadedAvatarUrl\", jsonData.data.avatar);\r",
                      "    console.log(\"Avatar uploaded:\", jsonData.data.avatar);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "4e90ff61-5d8f-4d78-8fad-366e3cc03331"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "53cc2a54-0d6f-4b5a-a09f-398c1ed1caf1",
          "length": 40,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "828e1b46-02fe-4d86-b59b-9d81325bb160",
          "scriptId": "210309b7-c4d4-4e8d-b850-8292c615b050",
          "execution": "4e90ff61-5d8f-4d78-8fad-366e3cc03331"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response contains success flag",
          "message": "expected { success: false, …(1) } to have property 'success' of true, but got false",
          "stack": "AssertionError: expected { success: false, …(1) } to have property 'success' of true, but got false\n   at Object.eval sandbox-script.js:3:21)",
          "checksum": "dc6111af4c91dcfe253b2c8457ec8570",
          "id": "64d68835-f30a-4f59-aad7-8ee0afb28266",
          "timestamp": 1747063087668,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "f74798e9-c6e1-4c6d-b067-71b9717d5449",
          "name": "avatar",
          "request": {
            "url": {
              "path": [
                "user",
                "avatar"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "avatar",
                  "type": "file",
                  "src": "postman-cloud:///1f00a020-2861-4780-8431-d61fc2551cd6"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "210309b7-c4d4-4e8d-b850-8292c615b050",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response message\r",
                  "pm.test(\"Response contains success message\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Profile picture set successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate avatar URL is returned\r",
                  "pm.test(\"Response contains an avatar URL\", function () {\r",
                  "    pm.expect(jsonData.data).to.have.property(\"profilePicture\").that.is.a(\"string\").and.includes(\"http\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate authorization requirement\r",
                  "pm.test(\"Request requires authorization\", function () {\r",
                  "    pm.response.to.not.have.status(401);\r",
                  "});\r",
                  "\r",
                  "// ✅ Store avatar URL in environment variable for future use\r",
                  "if (jsonData.data.avatar) {\r",
                  "    pm.environment.set(\"uploadedAvatarUrl\", jsonData.data.avatar);\r",
                  "    console.log(\"Avatar uploaded:\", jsonData.data.avatar);\r",
                  "}\r",
                  ""
                ],
                "_lastExecutionId": "4e90ff61-5d8f-4d78-8fad-366e3cc03331"
              }
            }
          ]
        },
        "parent": {
          "id": "e2ba0dcc-3c17-4034-be5b-f7734556a863",
          "name": "Users",
          "item": [
            {
              "id": "17208e8d-3925-4553-ae83-4474e61062c2",
              "name": "Get user by ID",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "users",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "ec73234f-5419-4953-855b-2c4c21307b67"
                    }
                  ],
                  "variable": [
                    {
                      "type": "any",
                      "value": "ec73234f-5419-4953-855b-2c4c21307b67",
                      "key": "id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "faebfb9a-1af7-4029-8b99-ebfeff1685f8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "d36cb7a5-24a4-4bec-ab2e-21052fcb2891"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3bb3822a-33cd-4495-acc8-58de0884abcb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Ensure response status code is 200\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Ensure response is JSON\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// Validate success field\r",
                      "pm.test(\"Response success flag is true\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// Validate message field\r",
                      "pm.test(\"Response message is correct\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\", \"Users fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// Validate user data structure\r",
                      "pm.test(\"Response contains expected user fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let userData = jsonData.data;\r",
                      "\r",
                      "    pm.expect(userData).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"firstName\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"lastName\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"email\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"avatar\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"username\"); // Can be null\r",
                      "    pm.expect(userData).to.have.property(\"isActive\").that.is.a(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "// Validate adminAuthToken is present in request headers\r",
                      "pm.test(\"Auth token is provided\", function () {\r",
                      "    pm.expect(pm.request.headers.has(\"Authorization\")).to.be.true;\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"UserId\", jsonData.data.id)"
                    ],
                    "_lastExecutionId": "a9b8a19f-a53b-44dd-85f2-6d299661e542"
                  }
                }
              ]
            },
            {
              "id": "fc57dd6c-58af-4fc2-a42f-e2caeb33e33a",
              "name": "Get All users",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "users"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13760dcf-a574-4246-8ae3-522f3e02b810",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Validate response format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// Validate required response fields\r",
                      "pm.test(\"Response contains expected fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "// Validate user data structure (assuming data is an array of users)\r",
                      "pm.test(\"User data structure is correct\", function () {\r",
                      "    pm.expect(jsonData.data.result).to.be.an(\"array\");\r",
                      "\r",
                      "    if (jsonData.data.result.length > 0) {\r",
                      "        let user = jsonData.data.result[0]; // Check the first user\r",
                      "\r",
                      "        pm.expect(user).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"firstName\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"lastName\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"email\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"avatar\");\r",
                      "        pm.expect(user).to.have.property(\"username\");\r",
                      "        pm.expect(user).to.have.property(\"isActive\").that.is.a(\"boolean\");\r",
                      "    };\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b7fa67fc-9842-47b3-b988-0fbfb4a7be53"
                  }
                }
              ]
            },
            {
              "id": "9fccf26f-f573-4edf-aa09-71ad96a76aa7",
              "name": "make user admin",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "make-user-admin"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-access-token",
                    "value": "{{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"testog@e-record.com\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "943fb355-4353-4065-ad25-322ed5680b0c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 800ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(800);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body has 'success' field set to true\", function () {\r",
                      "    pm.expect(pm.response.json().success).to.be.true;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body has 'message' field with value 'User profile updated successfully.'\", function () {\r",
                      "    pm.expect(pm.response.json().message).to.equal(\"User profile updated successfully.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "657f71c1-47be-4d91-ade1-17a47f731e7f"
                  }
                }
              ]
            },
            {
              "id": "e3bb1f2b-68da-48d0-b620-1e275bc92302",
              "name": "make admin user",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "make-admin-user"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\": \"testog@e-record.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0ee7c7fb-96c2-4d21-8d21-a1db21a6c9fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Validate response format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// Validate required response fields\r",
                      "pm.test(\"Response contains expected fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\");\r",
                      "});\r",
                      "\r",
                      "// Validate message in the response\r",
                      "pm.test(\"Message in the response is 'User profile updated successfully.'\", function () {\r",
                      "    pm.expect(jsonData.message).to.equal(\"User profile updated successfully.\");\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "10234f14-314d-41d6-a03c-e77166823722"
                  }
                }
              ]
            },
            {
              "id": "922b9511-fcd0-43ec-98b4-fb8305ee7faa",
              "name": "suspend user",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "user",
                    "suspend"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "a004f54a-5d5b-4655-975c-2c5ae89e642a",
              "name": "unsuspend user",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "user",
                    "unsuspend",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "ec73234f-5419-4953-855b-2c4c21307b67",
                      "key": "id"
                    }
                  ]
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "// {\r\n//     \"email\": \"testog@e-record.com\"\r\n// }",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "fc411c8b-215f-4bf6-a27e-ee7c6e948f39",
              "name": "config",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "config"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b0db7cf7-5a56-4aa5-a504-90d715c68420",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Test for the status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Test for response time\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "// Test for response body properties\r",
                      "pm.test(\"Response body has required properties\", function () {\r",
                      "    pm.response.to.have.jsonBody('success');\r",
                      "    pm.response.to.have.jsonBody('message');\r",
                      "    pm.response.to.have.jsonBody('data');\r",
                      "});\r",
                      "\r",
                      "// Test for specific values in the response body\r",
                      "pm.test(\"Success is true and message is 'Config fetched successfully.'\", function () {\r",
                      "    pm.expect(pm.response.json().success).to.be.true;\r",
                      "    pm.expect(pm.response.json().message).to.equal(\"Config fetched successfully.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "cbd52a5a-6393-4617-a64b-f9de3834f583"
                  }
                }
              ]
            },
            {
              "id": "0b0bbaca-55b1-4d35-a423-263c74b08dd5",
              "name": "config",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "config"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "f74798e9-c6e1-4c6d-b067-71b9717d5449",
              "name": "avatar",
              "request": {
                "url": {
                  "path": [
                    "user",
                    "avatar"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "avatar",
                      "type": "file",
                      "src": "postman-cloud:///1f00a020-2861-4780-8431-d61fc2551cd6"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "210309b7-c4d4-4e8d-b850-8292c615b050",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Profile picture set successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate avatar URL is returned\r",
                      "pm.test(\"Response contains an avatar URL\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"profilePicture\").that.is.a(\"string\").and.includes(\"http\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store avatar URL in environment variable for future use\r",
                      "if (jsonData.data.avatar) {\r",
                      "    pm.environment.set(\"uploadedAvatarUrl\", jsonData.data.avatar);\r",
                      "    console.log(\"Avatar uploaded:\", jsonData.data.avatar);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "4e90ff61-5d8f-4d78-8fad-366e3cc03331"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "53cc2a54-0d6f-4b5a-a09f-398c1ed1caf1",
          "length": 40,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "828e1b46-02fe-4d86-b59b-9d81325bb160",
          "scriptId": "210309b7-c4d4-4e8d-b850-8292c615b050",
          "execution": "4e90ff61-5d8f-4d78-8fad-366e3cc03331"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Response contains success message",
          "message": "expected 'An internal server error occurred' to include 'Profile picture set successfully'",
          "stack": "AssertionError: expected 'An internal server error occurred' to include 'Profile picture set successfully'\n   at Object.eval sandbox-script.js:4:21)",
          "checksum": "4297299ac802ced1235d3935c1f11ef4",
          "id": "70a9a8f1-b5a8-4924-816a-0cb95a477e4a",
          "timestamp": 1747063087669,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "f74798e9-c6e1-4c6d-b067-71b9717d5449",
          "name": "avatar",
          "request": {
            "url": {
              "path": [
                "user",
                "avatar"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "avatar",
                  "type": "file",
                  "src": "postman-cloud:///1f00a020-2861-4780-8431-d61fc2551cd6"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "210309b7-c4d4-4e8d-b850-8292c615b050",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response message\r",
                  "pm.test(\"Response contains success message\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Profile picture set successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate avatar URL is returned\r",
                  "pm.test(\"Response contains an avatar URL\", function () {\r",
                  "    pm.expect(jsonData.data).to.have.property(\"profilePicture\").that.is.a(\"string\").and.includes(\"http\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate authorization requirement\r",
                  "pm.test(\"Request requires authorization\", function () {\r",
                  "    pm.response.to.not.have.status(401);\r",
                  "});\r",
                  "\r",
                  "// ✅ Store avatar URL in environment variable for future use\r",
                  "if (jsonData.data.avatar) {\r",
                  "    pm.environment.set(\"uploadedAvatarUrl\", jsonData.data.avatar);\r",
                  "    console.log(\"Avatar uploaded:\", jsonData.data.avatar);\r",
                  "}\r",
                  ""
                ],
                "_lastExecutionId": "4e90ff61-5d8f-4d78-8fad-366e3cc03331"
              }
            }
          ]
        },
        "parent": {
          "id": "e2ba0dcc-3c17-4034-be5b-f7734556a863",
          "name": "Users",
          "item": [
            {
              "id": "17208e8d-3925-4553-ae83-4474e61062c2",
              "name": "Get user by ID",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "users",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "ec73234f-5419-4953-855b-2c4c21307b67"
                    }
                  ],
                  "variable": [
                    {
                      "type": "any",
                      "value": "ec73234f-5419-4953-855b-2c4c21307b67",
                      "key": "id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "faebfb9a-1af7-4029-8b99-ebfeff1685f8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "d36cb7a5-24a4-4bec-ab2e-21052fcb2891"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3bb3822a-33cd-4495-acc8-58de0884abcb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Ensure response status code is 200\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Ensure response is JSON\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// Validate success field\r",
                      "pm.test(\"Response success flag is true\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// Validate message field\r",
                      "pm.test(\"Response message is correct\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\", \"Users fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// Validate user data structure\r",
                      "pm.test(\"Response contains expected user fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let userData = jsonData.data;\r",
                      "\r",
                      "    pm.expect(userData).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"firstName\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"lastName\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"email\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"avatar\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"username\"); // Can be null\r",
                      "    pm.expect(userData).to.have.property(\"isActive\").that.is.a(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "// Validate adminAuthToken is present in request headers\r",
                      "pm.test(\"Auth token is provided\", function () {\r",
                      "    pm.expect(pm.request.headers.has(\"Authorization\")).to.be.true;\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"UserId\", jsonData.data.id)"
                    ],
                    "_lastExecutionId": "a9b8a19f-a53b-44dd-85f2-6d299661e542"
                  }
                }
              ]
            },
            {
              "id": "fc57dd6c-58af-4fc2-a42f-e2caeb33e33a",
              "name": "Get All users",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "users"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13760dcf-a574-4246-8ae3-522f3e02b810",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Validate response format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// Validate required response fields\r",
                      "pm.test(\"Response contains expected fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "// Validate user data structure (assuming data is an array of users)\r",
                      "pm.test(\"User data structure is correct\", function () {\r",
                      "    pm.expect(jsonData.data.result).to.be.an(\"array\");\r",
                      "\r",
                      "    if (jsonData.data.result.length > 0) {\r",
                      "        let user = jsonData.data.result[0]; // Check the first user\r",
                      "\r",
                      "        pm.expect(user).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"firstName\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"lastName\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"email\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"avatar\");\r",
                      "        pm.expect(user).to.have.property(\"username\");\r",
                      "        pm.expect(user).to.have.property(\"isActive\").that.is.a(\"boolean\");\r",
                      "    };\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b7fa67fc-9842-47b3-b988-0fbfb4a7be53"
                  }
                }
              ]
            },
            {
              "id": "9fccf26f-f573-4edf-aa09-71ad96a76aa7",
              "name": "make user admin",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "make-user-admin"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-access-token",
                    "value": "{{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"testog@e-record.com\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "943fb355-4353-4065-ad25-322ed5680b0c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 800ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(800);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body has 'success' field set to true\", function () {\r",
                      "    pm.expect(pm.response.json().success).to.be.true;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body has 'message' field with value 'User profile updated successfully.'\", function () {\r",
                      "    pm.expect(pm.response.json().message).to.equal(\"User profile updated successfully.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "657f71c1-47be-4d91-ade1-17a47f731e7f"
                  }
                }
              ]
            },
            {
              "id": "e3bb1f2b-68da-48d0-b620-1e275bc92302",
              "name": "make admin user",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "make-admin-user"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\": \"testog@e-record.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0ee7c7fb-96c2-4d21-8d21-a1db21a6c9fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Validate response format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// Validate required response fields\r",
                      "pm.test(\"Response contains expected fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\");\r",
                      "});\r",
                      "\r",
                      "// Validate message in the response\r",
                      "pm.test(\"Message in the response is 'User profile updated successfully.'\", function () {\r",
                      "    pm.expect(jsonData.message).to.equal(\"User profile updated successfully.\");\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "10234f14-314d-41d6-a03c-e77166823722"
                  }
                }
              ]
            },
            {
              "id": "922b9511-fcd0-43ec-98b4-fb8305ee7faa",
              "name": "suspend user",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "user",
                    "suspend"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "a004f54a-5d5b-4655-975c-2c5ae89e642a",
              "name": "unsuspend user",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "user",
                    "unsuspend",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "ec73234f-5419-4953-855b-2c4c21307b67",
                      "key": "id"
                    }
                  ]
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "// {\r\n//     \"email\": \"testog@e-record.com\"\r\n// }",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "fc411c8b-215f-4bf6-a27e-ee7c6e948f39",
              "name": "config",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "config"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b0db7cf7-5a56-4aa5-a504-90d715c68420",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Test for the status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Test for response time\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "// Test for response body properties\r",
                      "pm.test(\"Response body has required properties\", function () {\r",
                      "    pm.response.to.have.jsonBody('success');\r",
                      "    pm.response.to.have.jsonBody('message');\r",
                      "    pm.response.to.have.jsonBody('data');\r",
                      "});\r",
                      "\r",
                      "// Test for specific values in the response body\r",
                      "pm.test(\"Success is true and message is 'Config fetched successfully.'\", function () {\r",
                      "    pm.expect(pm.response.json().success).to.be.true;\r",
                      "    pm.expect(pm.response.json().message).to.equal(\"Config fetched successfully.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "cbd52a5a-6393-4617-a64b-f9de3834f583"
                  }
                }
              ]
            },
            {
              "id": "0b0bbaca-55b1-4d35-a423-263c74b08dd5",
              "name": "config",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "config"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "f74798e9-c6e1-4c6d-b067-71b9717d5449",
              "name": "avatar",
              "request": {
                "url": {
                  "path": [
                    "user",
                    "avatar"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "avatar",
                      "type": "file",
                      "src": "postman-cloud:///1f00a020-2861-4780-8431-d61fc2551cd6"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "210309b7-c4d4-4e8d-b850-8292c615b050",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Profile picture set successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate avatar URL is returned\r",
                      "pm.test(\"Response contains an avatar URL\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"profilePicture\").that.is.a(\"string\").and.includes(\"http\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store avatar URL in environment variable for future use\r",
                      "if (jsonData.data.avatar) {\r",
                      "    pm.environment.set(\"uploadedAvatarUrl\", jsonData.data.avatar);\r",
                      "    console.log(\"Avatar uploaded:\", jsonData.data.avatar);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "4e90ff61-5d8f-4d78-8fad-366e3cc03331"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "53cc2a54-0d6f-4b5a-a09f-398c1ed1caf1",
          "length": 40,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "828e1b46-02fe-4d86-b59b-9d81325bb160",
          "scriptId": "210309b7-c4d4-4e8d-b850-8292c615b050",
          "execution": "4e90ff61-5d8f-4d78-8fad-366e3cc03331"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 4,
          "test": "Response contains an avatar URL",
          "message": "Target cannot be null or undefined.",
          "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:5:21)",
          "checksum": "110adbce36cb4bfb4b702ba43f00c28f",
          "id": "8758a875-a454-485f-9572-9f41ca147723",
          "timestamp": 1747063087670,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "f74798e9-c6e1-4c6d-b067-71b9717d5449",
          "name": "avatar",
          "request": {
            "url": {
              "path": [
                "user",
                "avatar"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "avatar",
                  "type": "file",
                  "src": "postman-cloud:///1f00a020-2861-4780-8431-d61fc2551cd6"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "210309b7-c4d4-4e8d-b850-8292c615b050",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response message\r",
                  "pm.test(\"Response contains success message\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Profile picture set successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate avatar URL is returned\r",
                  "pm.test(\"Response contains an avatar URL\", function () {\r",
                  "    pm.expect(jsonData.data).to.have.property(\"profilePicture\").that.is.a(\"string\").and.includes(\"http\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate authorization requirement\r",
                  "pm.test(\"Request requires authorization\", function () {\r",
                  "    pm.response.to.not.have.status(401);\r",
                  "});\r",
                  "\r",
                  "// ✅ Store avatar URL in environment variable for future use\r",
                  "if (jsonData.data.avatar) {\r",
                  "    pm.environment.set(\"uploadedAvatarUrl\", jsonData.data.avatar);\r",
                  "    console.log(\"Avatar uploaded:\", jsonData.data.avatar);\r",
                  "}\r",
                  ""
                ],
                "_lastExecutionId": "4e90ff61-5d8f-4d78-8fad-366e3cc03331"
              }
            }
          ]
        },
        "parent": {
          "id": "e2ba0dcc-3c17-4034-be5b-f7734556a863",
          "name": "Users",
          "item": [
            {
              "id": "17208e8d-3925-4553-ae83-4474e61062c2",
              "name": "Get user by ID",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "users",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "ec73234f-5419-4953-855b-2c4c21307b67"
                    }
                  ],
                  "variable": [
                    {
                      "type": "any",
                      "value": "ec73234f-5419-4953-855b-2c4c21307b67",
                      "key": "id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "faebfb9a-1af7-4029-8b99-ebfeff1685f8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "d36cb7a5-24a4-4bec-ab2e-21052fcb2891"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3bb3822a-33cd-4495-acc8-58de0884abcb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Ensure response status code is 200\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Ensure response is JSON\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// Validate success field\r",
                      "pm.test(\"Response success flag is true\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// Validate message field\r",
                      "pm.test(\"Response message is correct\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\", \"Users fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// Validate user data structure\r",
                      "pm.test(\"Response contains expected user fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let userData = jsonData.data;\r",
                      "\r",
                      "    pm.expect(userData).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"firstName\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"lastName\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"email\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"avatar\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"username\"); // Can be null\r",
                      "    pm.expect(userData).to.have.property(\"isActive\").that.is.a(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "// Validate adminAuthToken is present in request headers\r",
                      "pm.test(\"Auth token is provided\", function () {\r",
                      "    pm.expect(pm.request.headers.has(\"Authorization\")).to.be.true;\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"UserId\", jsonData.data.id)"
                    ],
                    "_lastExecutionId": "a9b8a19f-a53b-44dd-85f2-6d299661e542"
                  }
                }
              ]
            },
            {
              "id": "fc57dd6c-58af-4fc2-a42f-e2caeb33e33a",
              "name": "Get All users",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "users"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13760dcf-a574-4246-8ae3-522f3e02b810",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Validate response format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// Validate required response fields\r",
                      "pm.test(\"Response contains expected fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "// Validate user data structure (assuming data is an array of users)\r",
                      "pm.test(\"User data structure is correct\", function () {\r",
                      "    pm.expect(jsonData.data.result).to.be.an(\"array\");\r",
                      "\r",
                      "    if (jsonData.data.result.length > 0) {\r",
                      "        let user = jsonData.data.result[0]; // Check the first user\r",
                      "\r",
                      "        pm.expect(user).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"firstName\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"lastName\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"email\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"avatar\");\r",
                      "        pm.expect(user).to.have.property(\"username\");\r",
                      "        pm.expect(user).to.have.property(\"isActive\").that.is.a(\"boolean\");\r",
                      "    };\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b7fa67fc-9842-47b3-b988-0fbfb4a7be53"
                  }
                }
              ]
            },
            {
              "id": "9fccf26f-f573-4edf-aa09-71ad96a76aa7",
              "name": "make user admin",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "make-user-admin"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-access-token",
                    "value": "{{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"testog@e-record.com\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "943fb355-4353-4065-ad25-322ed5680b0c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 800ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(800);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body has 'success' field set to true\", function () {\r",
                      "    pm.expect(pm.response.json().success).to.be.true;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body has 'message' field with value 'User profile updated successfully.'\", function () {\r",
                      "    pm.expect(pm.response.json().message).to.equal(\"User profile updated successfully.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "657f71c1-47be-4d91-ade1-17a47f731e7f"
                  }
                }
              ]
            },
            {
              "id": "e3bb1f2b-68da-48d0-b620-1e275bc92302",
              "name": "make admin user",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "make-admin-user"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\": \"testog@e-record.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0ee7c7fb-96c2-4d21-8d21-a1db21a6c9fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Validate response format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// Validate required response fields\r",
                      "pm.test(\"Response contains expected fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\");\r",
                      "});\r",
                      "\r",
                      "// Validate message in the response\r",
                      "pm.test(\"Message in the response is 'User profile updated successfully.'\", function () {\r",
                      "    pm.expect(jsonData.message).to.equal(\"User profile updated successfully.\");\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "10234f14-314d-41d6-a03c-e77166823722"
                  }
                }
              ]
            },
            {
              "id": "922b9511-fcd0-43ec-98b4-fb8305ee7faa",
              "name": "suspend user",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "user",
                    "suspend"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "a004f54a-5d5b-4655-975c-2c5ae89e642a",
              "name": "unsuspend user",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "user",
                    "unsuspend",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "ec73234f-5419-4953-855b-2c4c21307b67",
                      "key": "id"
                    }
                  ]
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "// {\r\n//     \"email\": \"testog@e-record.com\"\r\n// }",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "fc411c8b-215f-4bf6-a27e-ee7c6e948f39",
              "name": "config",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "config"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b0db7cf7-5a56-4aa5-a504-90d715c68420",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Test for the status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Test for response time\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "// Test for response body properties\r",
                      "pm.test(\"Response body has required properties\", function () {\r",
                      "    pm.response.to.have.jsonBody('success');\r",
                      "    pm.response.to.have.jsonBody('message');\r",
                      "    pm.response.to.have.jsonBody('data');\r",
                      "});\r",
                      "\r",
                      "// Test for specific values in the response body\r",
                      "pm.test(\"Success is true and message is 'Config fetched successfully.'\", function () {\r",
                      "    pm.expect(pm.response.json().success).to.be.true;\r",
                      "    pm.expect(pm.response.json().message).to.equal(\"Config fetched successfully.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "cbd52a5a-6393-4617-a64b-f9de3834f583"
                  }
                }
              ]
            },
            {
              "id": "0b0bbaca-55b1-4d35-a423-263c74b08dd5",
              "name": "config",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "config"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "f74798e9-c6e1-4c6d-b067-71b9717d5449",
              "name": "avatar",
              "request": {
                "url": {
                  "path": [
                    "user",
                    "avatar"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "avatar",
                      "type": "file",
                      "src": "postman-cloud:///1f00a020-2861-4780-8431-d61fc2551cd6"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "210309b7-c4d4-4e8d-b850-8292c615b050",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Profile picture set successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate avatar URL is returned\r",
                      "pm.test(\"Response contains an avatar URL\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"profilePicture\").that.is.a(\"string\").and.includes(\"http\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store avatar URL in environment variable for future use\r",
                      "if (jsonData.data.avatar) {\r",
                      "    pm.environment.set(\"uploadedAvatarUrl\", jsonData.data.avatar);\r",
                      "    console.log(\"Avatar uploaded:\", jsonData.data.avatar);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "4e90ff61-5d8f-4d78-8fad-366e3cc03331"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "53cc2a54-0d6f-4b5a-a09f-398c1ed1caf1",
          "length": 40,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "828e1b46-02fe-4d86-b59b-9d81325bb160",
          "scriptId": "210309b7-c4d4-4e8d-b850-8292c615b050",
          "execution": "4e90ff61-5d8f-4d78-8fad-366e3cc03331"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'avatar')",
          "checksum": "d02a1f2d357a46a1d204d8a91167737c",
          "id": "7ba33d2d-e24f-49c3-9685-23e4b4eb49ee",
          "timestamp": 1747063087672,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "f74798e9-c6e1-4c6d-b067-71b9717d5449",
          "name": "avatar",
          "request": {
            "url": {
              "path": [
                "user",
                "avatar"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "avatar",
                  "type": "file",
                  "src": "postman-cloud:///1f00a020-2861-4780-8431-d61fc2551cd6"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "210309b7-c4d4-4e8d-b850-8292c615b050",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response message\r",
                  "pm.test(\"Response contains success message\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Profile picture set successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate avatar URL is returned\r",
                  "pm.test(\"Response contains an avatar URL\", function () {\r",
                  "    pm.expect(jsonData.data).to.have.property(\"profilePicture\").that.is.a(\"string\").and.includes(\"http\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate authorization requirement\r",
                  "pm.test(\"Request requires authorization\", function () {\r",
                  "    pm.response.to.not.have.status(401);\r",
                  "});\r",
                  "\r",
                  "// ✅ Store avatar URL in environment variable for future use\r",
                  "if (jsonData.data.avatar) {\r",
                  "    pm.environment.set(\"uploadedAvatarUrl\", jsonData.data.avatar);\r",
                  "    console.log(\"Avatar uploaded:\", jsonData.data.avatar);\r",
                  "}\r",
                  ""
                ],
                "_lastExecutionId": "4e90ff61-5d8f-4d78-8fad-366e3cc03331"
              }
            }
          ]
        },
        "parent": {
          "id": "e2ba0dcc-3c17-4034-be5b-f7734556a863",
          "name": "Users",
          "item": [
            {
              "id": "17208e8d-3925-4553-ae83-4474e61062c2",
              "name": "Get user by ID",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "users",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "disabled": true,
                      "key": "id",
                      "value": "ec73234f-5419-4953-855b-2c4c21307b67"
                    }
                  ],
                  "variable": [
                    {
                      "type": "any",
                      "value": "ec73234f-5419-4953-855b-2c4c21307b67",
                      "key": "id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "faebfb9a-1af7-4029-8b99-ebfeff1685f8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "d36cb7a5-24a4-4bec-ab2e-21052fcb2891"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3bb3822a-33cd-4495-acc8-58de0884abcb",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Ensure response status code is 200\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Ensure response is JSON\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// Validate success field\r",
                      "pm.test(\"Response success flag is true\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// Validate message field\r",
                      "pm.test(\"Response message is correct\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\", \"Users fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// Validate user data structure\r",
                      "pm.test(\"Response contains expected user fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let userData = jsonData.data;\r",
                      "\r",
                      "    pm.expect(userData).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"firstName\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"lastName\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"email\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"avatar\").that.is.a(\"string\");\r",
                      "    pm.expect(userData).to.have.property(\"username\"); // Can be null\r",
                      "    pm.expect(userData).to.have.property(\"isActive\").that.is.a(\"boolean\");\r",
                      "});\r",
                      "\r",
                      "// Validate adminAuthToken is present in request headers\r",
                      "pm.test(\"Auth token is provided\", function () {\r",
                      "    pm.expect(pm.request.headers.has(\"Authorization\")).to.be.true;\r",
                      "});\r",
                      "\r",
                      "pm.environment.set(\"UserId\", jsonData.data.id)"
                    ],
                    "_lastExecutionId": "a9b8a19f-a53b-44dd-85f2-6d299661e542"
                  }
                }
              ]
            },
            {
              "id": "fc57dd6c-58af-4fc2-a42f-e2caeb33e33a",
              "name": "Get All users",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "users"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "13760dcf-a574-4246-8ae3-522f3e02b810",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Validate response format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// Validate required response fields\r",
                      "pm.test(\"Response contains expected fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "});\r",
                      "\r",
                      "// Validate user data structure (assuming data is an array of users)\r",
                      "pm.test(\"User data structure is correct\", function () {\r",
                      "    pm.expect(jsonData.data.result).to.be.an(\"array\");\r",
                      "\r",
                      "    if (jsonData.data.result.length > 0) {\r",
                      "        let user = jsonData.data.result[0]; // Check the first user\r",
                      "\r",
                      "        pm.expect(user).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"firstName\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"lastName\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"email\").that.is.a(\"string\");\r",
                      "        pm.expect(user).to.have.property(\"avatar\");\r",
                      "        pm.expect(user).to.have.property(\"username\");\r",
                      "        pm.expect(user).to.have.property(\"isActive\").that.is.a(\"boolean\");\r",
                      "    };\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "b7fa67fc-9842-47b3-b988-0fbfb4a7be53"
                  }
                }
              ]
            },
            {
              "id": "9fccf26f-f573-4edf-aa09-71ad96a76aa7",
              "name": "make user admin",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "make-user-admin"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "x-access-token",
                    "value": "{{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"email\": \"testog@e-record.com\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "943fb355-4353-4065-ad25-322ed5680b0c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Response status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 800ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(800);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body has 'success' field set to true\", function () {\r",
                      "    pm.expect(pm.response.json().success).to.be.true;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response body has 'message' field with value 'User profile updated successfully.'\", function () {\r",
                      "    pm.expect(pm.response.json().message).to.equal(\"User profile updated successfully.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "657f71c1-47be-4d91-ade1-17a47f731e7f"
                  }
                }
              ]
            },
            {
              "id": "e3bb1f2b-68da-48d0-b620-1e275bc92302",
              "name": "make admin user",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "make-admin-user"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"email\": \"testog@e-record.com\"\r\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0ee7c7fb-96c2-4d21-8d21-a1db21a6c9fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Validate response format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// Validate required response fields\r",
                      "pm.test(\"Response contains expected fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\");\r",
                      "});\r",
                      "\r",
                      "// Validate message in the response\r",
                      "pm.test(\"Message in the response is 'User profile updated successfully.'\", function () {\r",
                      "    pm.expect(jsonData.message).to.equal(\"User profile updated successfully.\");\r",
                      "});\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "10234f14-314d-41d6-a03c-e77166823722"
                  }
                }
              ]
            },
            {
              "id": "922b9511-fcd0-43ec-98b4-fb8305ee7faa",
              "name": "suspend user",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "user",
                    "suspend"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "a004f54a-5d5b-4655-975c-2c5ae89e642a",
              "name": "unsuspend user",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "user",
                    "unsuspend",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "ec73234f-5419-4953-855b-2c4c21307b67",
                      "key": "id"
                    }
                  ]
                },
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "// {\r\n//     \"email\": \"testog@e-record.com\"\r\n// }",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "fc411c8b-215f-4bf6-a27e-ee7c6e948f39",
              "name": "config",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "config"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b0db7cf7-5a56-4aa5-a504-90d715c68420",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// Test for the status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// Test for response time\r",
                      "pm.test(\"Response time is less than 500ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(500);\r",
                      "});\r",
                      "\r",
                      "// Test for response body properties\r",
                      "pm.test(\"Response body has required properties\", function () {\r",
                      "    pm.response.to.have.jsonBody('success');\r",
                      "    pm.response.to.have.jsonBody('message');\r",
                      "    pm.response.to.have.jsonBody('data');\r",
                      "});\r",
                      "\r",
                      "// Test for specific values in the response body\r",
                      "pm.test(\"Success is true and message is 'Config fetched successfully.'\", function () {\r",
                      "    pm.expect(pm.response.json().success).to.be.true;\r",
                      "    pm.expect(pm.response.json().message).to.equal(\"Config fetched successfully.\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "cbd52a5a-6393-4617-a64b-f9de3834f583"
                  }
                }
              ]
            },
            {
              "id": "0b0bbaca-55b1-4d35-a423-263c74b08dd5",
              "name": "config",
              "request": {
                "url": {
                  "path": [
                    "admin",
                    "config"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "f74798e9-c6e1-4c6d-b067-71b9717d5449",
              "name": "avatar",
              "request": {
                "url": {
                  "path": [
                    "user",
                    "avatar"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "PUT",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "avatar",
                      "type": "file",
                      "src": "postman-cloud:///1f00a020-2861-4780-8431-d61fc2551cd6"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "210309b7-c4d4-4e8d-b850-8292c615b050",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Profile picture set successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate avatar URL is returned\r",
                      "pm.test(\"Response contains an avatar URL\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"profilePicture\").that.is.a(\"string\").and.includes(\"http\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store avatar URL in environment variable for future use\r",
                      "if (jsonData.data.avatar) {\r",
                      "    pm.environment.set(\"uploadedAvatarUrl\", jsonData.data.avatar);\r",
                      "    console.log(\"Avatar uploaded:\", jsonData.data.avatar);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "4e90ff61-5d8f-4d78-8fad-366e3cc03331"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "53cc2a54-0d6f-4b5a-a09f-398c1ed1caf1",
          "length": 40,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "828e1b46-02fe-4d86-b59b-9d81325bb160",
          "scriptId": "210309b7-c4d4-4e8d-b850-8292c615b050"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'update')",
          "checksum": "4bf828083eab87ee4be22a00051b1e31",
          "id": "4eb05fa4-d264-4886-9d6c-20ae6d9a4441",
          "timestamp": 1747063088386,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "17690a3e-fa74-49f5-849f-3d412ec83d52",
          "name": "add product",
          "request": {
            "url": {
              "path": [
                "products"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{authToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c810435d-b1e8-4cc8-a896-155e37f6b598",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure Authorization Token is Set",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");",
                  "}",
                  "",
                  "// ✅ Set Authorization Header",
                  "pm.request.headers.add({",
                  "    key: \"Authorization\",",
                  "    value: `Bearer ${pm.environment.get(\"authToken\")}`",
                  "});",
                  "",
                  "// ✅ Function to generate a random number within a range",
                  "function getRandomNumber(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "}",
                  "",
                  "// ✅ Function to generate a random date within a range",
                  "function getRandomDate(start, end) {",
                  "    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))",
                  "        .toISOString()",
                  "        .split(\"T\")[0]; // Returns in YYYY-MM-DD format",
                  "}",
                  "",
                  "// ✅ Predefined list of real product names and descriptions",
                  "const products = [",
                  "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },",
                  "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },",
                  "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },",
                  "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },",
                  "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },",
                  "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },",
                  "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },",
                  "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },",
                  "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },",
                  "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }",
                  "];",
                  "",
                  "// ✅ Predefined list of real brand names",
                  "const brands = [",
                  "    \"Nike\", \"Adidas\", \"Apple\", \"Samsung\", \"Nestlé\", \"L'Oréal\", \"LG\", \"Sony\", \"Coca-Cola\", \"Colgate\"",
                  "];",
                  "",
                  "// ✅ Select a random product and brand",
                  "const selectedProduct = products[Math.floor(Math.random() * products.length)];",
                  "const selectedBrand = brands[Math.floor(Math.random() * brands.length)];",
                  "",
                  "// ✅ Append a random number to the product title to avoid duplication",
                  "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;",
                  "",
                  "// ✅ Generate dynamic product details",
                  "const costPrice = getRandomNumber(50, 500);",
                  "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice",
                  "",
                  "const productDetails = {",
                  "    title: uniqueTitle,  // Ensuring uniqueness",
                  "    description: selectedProduct.description,",
                  "    brandName: selectedBrand,",
                  "    model: `M${getRandomNumber(1000, 9999)}`,",
                  "    expiryDate: getRandomDate(new Date(2025, 0, 1), new Date(2030, 11, 31)), // Future date",
                  "    manufactureDate: getRandomDate(new Date(2023, 0, 1), new Date(2024, 11, 31)), // Past date",
                  "    isoNumber: getRandomNumber(1000, 9999).toString(),",
                  "    nafdacNumber: getRandomNumber(1000, 9999).toString(),",
                  "    quantity: getRandomNumber(1, 100),",
                  "    costPrice: costPrice,",
                  "    sellingPrice: sellingPrice, // Ensuring selling price is not less than cost price",
                  "    eanNumber: getRandomNumber(1000, 9999).toString(),",
                  "    categoryId: pm.environment.get(\"categoryId4p\"),",
                  "    saleStart: getRandomDate(new Date(2024, 0, 1), new Date(2025, 11, 31)), // Future date",
                  "    saleEnd: getRandomDate(new Date(2025, 0, 1), new Date(2026, 11, 31)), // Future date",
                  "    imagePath: \"https://imagekit.io/tools/free-image-hosting/\" // Replace with dynamic upload if needed",
                  "};",
                  "",
                  "// ✅ Update form-data in the request body",
                  "pm.request.body.update({",
                  "    mode: \"formdata\",",
                  "    formdata: [",
                  "        { key: \"title\", value: productDetails.title, type: \"text\" },",
                  "        { key: \"description\", value: productDetails.description, type: \"text\" },",
                  "        { key: \"brandName\", value: productDetails.brandName, type: \"text\" },",
                  "        { key: \"model\", value: productDetails.model, type: \"text\" },",
                  "        { key: \"expiryDate\", value: productDetails.expiryDate, type: \"text\" },",
                  "        { key: \"manufactureDate\", value: productDetails.manufactureDate, type: \"text\" },",
                  "        { key: \"isoNumber\", value: productDetails.isoNumber, type: \"text\" },",
                  "        { key: \"nafdacNumber\", value: productDetails.nafdacNumber, type: \"text\" },",
                  "        { key: \"quantity\", value: productDetails.quantity.toString(), type: \"text\" },",
                  "        { key: \"costPrice\", value: productDetails.costPrice.toString(), type: \"text\" },",
                  "        { key: \"sellingPrice\", value: productDetails.sellingPrice.toString(), type: \"text\" },",
                  "        { key: \"eanNumber\", value: productDetails.eanNumber, type: \"text\" },",
                  "        { key: \"categoryId\", value: productDetails.categoryId, type: \"text\" },",
                  "        { key: \"saleStart\", value: productDetails.saleStart, type: \"text\" },",
                  "        { key: \"saleEnd\", value: productDetails.saleEnd, type: \"text\" },",
                  "        { key: \"images\", src: productDetails.imagePath, type: \"file\" }",
                  "    ]",
                  "});",
                  "",
                  "// ✅ Log generated data for debugging",
                  "console.log(\"🔹 Generated product details:\", productDetails);",
                  ""
                ],
                "_lastExecutionId": "00e3dc30-3389-43bf-b49f-67a7b839840d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "427614b5-9354-458b-bd1e-f7a3fc0dced7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response exists\r",
                  "pm.test(\"Response should be present\", function () {\r",
                  "    pm.response.to.have.status(200); // Corrected the expected status code\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse the response body\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "// ✅ Define required fields\r",
                  "const requiredFields = [\r",
                  "    \"id\", \"title\", \"description\", \"brandName\", \"model\",\r",
                  "    \"expiryDate\", \"manufactureDate\", \"isoNumber\", \"nafdacNumber\",\r",
                  "    \"quantity\", \"costPrice\", \"sellingPrice\", \"eanNumber\", \"categoryId\",\r",
                  "    \"saleStart\", \"saleEnd\"\r",
                  "];\r",
                  "\r",
                  "// ✅ Check that required fields exist and are not empty\r",
                  "pm.test(\"Required fields should not be empty\", function () {\r",
                  "    requiredFields.forEach(field => {\r",
                  "        pm.expect(response.data).to.have.property(field);\r",
                  "        if (response[field]) {\r",
                  "            pm.expect(response.data[field]).to.not.be.null;\r",
                  "            pm.expect(response.data[field]).to.not.be.undefined;\r",
                  "\r",
                  "            // ✅ Check if string fields are not empty\r",
                  "            if (typeof response.data[field] === \"string\") {\r",
                  "                pm.expect(response.data[field].trim()).to.not.equal(\"\");\r",
                  "            }\r",
                  "\r",
                  "            // ✅ Check if array fields are not empty\r",
                  "            if (Array.isArray(response.data[field])) {\r",
                  "                pm.expect(response.data[field].length).to.be.greaterThan(0);\r",
                  "            }\r",
                  "\r",
                  "            // ✅ Check if numeric fields are valid\r",
                  "            if ([\"quantity\", \"costPrice\", \"sellingPrice\"].includes(field)) {\r",
                  "                pm.expect(response.data[field]).to.be.a(\"number\");\r",
                  "                pm.expect(response.data[field]).to.be.greaterThan(0);\r",
                  "            }\r",
                  "        }\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate the response contains a success message\r",
                  "pm.test(\"Response should contain a success message\", function () {\r",
                  "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                  "    pm.expect(response.message.toLowerCase()).to.include(\"success\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate that selling price is not lower than cost price\r",
                  "pm.test(\"Selling price should be greater than or equal to cost price\", function () {\r",
                  "    if (response.sellingPrice && response.costPrice) {\r",
                  "        pm.expect(response.sellingPrice).to.be.at.least(response.costPrice);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate dates are in YYYY-MM-DD format\r",
                  "pm.test(\"Dates should be in valid format\", function () {\r",
                  "    [\"expiryDate\", \"manufactureDate\", \"saleStart\", \"saleEnd\"].forEach(field => {\r",
                  "        if (response[field]) {\r",
                  "            pm.expect(response[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                  "        }\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// ✅ Log response for debugging\r",
                  "console.log(\"🔹 Response Body:\", response);\r",
                  "\r",
                  "pm.environment.set(\"productId\", response?.data?.id); // Fixed the TypeError by using optional chaining\r",
                  ""
                ],
                "_lastExecutionId": "7fdcbba5-51d6-422a-9b89-b13427c00d13"
              }
            }
          ]
        },
        "parent": {
          "id": "8b64db53-a9fa-473b-8cc6-96423e861533",
          "name": "product",
          "item": [
            {
              "id": "d8af0e9c-aa87-4e73-8e74-f42001b0f625",
              "name": "valid Sign In",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "signin",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{currentPayload}}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cab83c48-571c-4902-b4e7-02acc12dd018",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = {\r",
                      "    \"valid_login\": {\r",
                      "     \"email\": \"testog@e-record.com\",\r",
                      "    \"password\": \"Pass@12345\"\r",
                      "},\r",
                      "    \"missing_email\": { \r",
                      "        \"email\": \"\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"missing_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"\" \r",
                      "    },\r",
                      "    \"invalid_email_format\": { \r",
                      "        \"email\": \"invalid-email\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"incorrect_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"WrongPass123\" \r",
                      "    },\r",
                      "    \"unregistered_email\": { \r",
                      "        \"email\": \"unregistered@mail.com\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "// Get the current test case (default: valid_login)\r",
                      "let testCase = pm.environment.get(\"testCase\") || \"valid_login\";\r",
                      "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                      "\r",
                      "// Set request headers for tracking\r",
                      "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3967611-823a-4c6e-9ee2-a0f9fea65d93"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a359d213-bdc7-46a4-8889-efa1f73cc962",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                      "\r",
                      "const expectedStatus = {\r",
                      "    \"valid_login\": 200,\r",
                      "    \"missing_email\": 400,\r",
                      "    \"missing_password\": 400,\r",
                      "    \"invalid_email_format\": 400,\r",
                      "    \"incorrect_password\": 401,\r",
                      "    \"unregistered_email\": 404\r",
                      "};\r",
                      "\r",
                      "// ✅ Test Case 1: Validate Status Code\r",
                      "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                      "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                      "});\r",
                      "\r",
                      "// Handle successful login response\r",
                      "if (pm.response.code === 200) {\r",
                      "    // ✅ Test Case 2: Verify Success Field Value\r",
                      "    pm.test(\"Verify that the success field is true\", function () {\r",
                      "        pm.expect(response.success).to.eql(true);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 3: Check Message Field Value\r",
                      "    pm.test(\"Check that the message field is 'User sign in successful'\", function () {\r",
                      "        pm.expect(response.message).to.eql(\"User sign in successful\");\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 4: Validate Token Field\r",
                      "    pm.test(\"Validate that the token field is present and not empty\", function () {\r",
                      "        pm.expect(response.data.token).to.be.a('string');\r",
                      "        pm.expect(response.data.token.length).to.be.greaterThan(0);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 5: Verify Expiration Timestamp Format\r",
                      "    pm.test(\"Verify that the expiration timestamp is in ISO 8601 format\", function () {\r",
                      "        let expiresIn = response.data.expiresIn;\r",
                      "        pm.expect(new Date(expiresIn).toISOString()).to.eql(expiresIn);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 6: Validate User Data Fields\r",
                      "    pm.test(\"Validate that the user data fields are correct\", function () {\r",
                      "        let user = response.data.user;\r",
                      "        \r",
                      "        pm.expect(user.id).to.not.eql(null);\r",
                      "        pm.expect(user.email).to.not.eql(null);\r",
                      "        pm.expect(user.fullName).to.not.eql(null);\r",
                      "        pm.expect(user.firstName).to.not.eql(null);\r",
                      "        pm.expect(user.lastName).to.not.eql(null);\r",
                      "    });\r",
                      "\r",
                      "    pm.environment.set(\"userId\", response.data.user.id)\r",
                      "\r",
                      "    // ✅ Test Case 7: Verify KYC Status\r",
                      "    pm.test(\"Verify that the KYC status is false\", function () {\r",
                      "        pm.expect(response.data.user.kycCompleted).to.eql(false);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 9: Check Token Format (JWT)\r",
                      "    pm.test(\"Check that the token is in a valid JWT format\", function () {\r",
                      "        let token = response.data.token;\r",
                      "        let tokenParts = token.split('.');\r",
                      "\r",
                      "        pm.expect(tokenParts).to.have.lengthOf(3);\r",
                      "        pm.expect(tokenParts[0]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[1]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[2]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 10: Validate Response Time\r",
                      "    pm.test(\"Validate that the response time is less than 500ms\", function () {\r",
                      "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Store Auth Token for Future Requests\r",
                      "    pm.environment.set(\"authToken\", response.data.token);\r",
                      "} \r",
                      "// Handle error cases\r",
                      "else {\r",
                      "    pm.test(\"Response contains error message\", function () {\r",
                      "        pm.expect(response).to.have.property(\"error\");\r",
                      "        pm.expect(response.error).to.be.a(\"string\");\r",
                      "    });\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "9ac9fcb0-f51a-42f3-a3c8-2ef6c123219e"
                  }
                }
              ]
            },
            {
              "id": "17690a3e-fa74-49f5-849f-3d412ec83d52",
              "name": "add product",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c810435d-b1e8-4cc8-a896-155e37f6b598",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set",
                      "if (!pm.environment.get(\"authToken\")) {",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");",
                      "}",
                      "",
                      "// ✅ Set Authorization Header",
                      "pm.request.headers.add({",
                      "    key: \"Authorization\",",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`",
                      "});",
                      "",
                      "// ✅ Function to generate a random number within a range",
                      "function getRandomNumber(min, max) {",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                      "}",
                      "",
                      "// ✅ Function to generate a random date within a range",
                      "function getRandomDate(start, end) {",
                      "    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))",
                      "        .toISOString()",
                      "        .split(\"T\")[0]; // Returns in YYYY-MM-DD format",
                      "}",
                      "",
                      "// ✅ Predefined list of real product names and descriptions",
                      "const products = [",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }",
                      "];",
                      "",
                      "// ✅ Predefined list of real brand names",
                      "const brands = [",
                      "    \"Nike\", \"Adidas\", \"Apple\", \"Samsung\", \"Nestlé\", \"L'Oréal\", \"LG\", \"Sony\", \"Coca-Cola\", \"Colgate\"",
                      "];",
                      "",
                      "// ✅ Select a random product and brand",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];",
                      "const selectedBrand = brands[Math.floor(Math.random() * brands.length)];",
                      "",
                      "// ✅ Append a random number to the product title to avoid duplication",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;",
                      "",
                      "// ✅ Generate dynamic product details",
                      "const costPrice = getRandomNumber(50, 500);",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice",
                      "",
                      "const productDetails = {",
                      "    title: uniqueTitle,  // Ensuring uniqueness",
                      "    description: selectedProduct.description,",
                      "    brandName: selectedBrand,",
                      "    model: `M${getRandomNumber(1000, 9999)}`,",
                      "    expiryDate: getRandomDate(new Date(2025, 0, 1), new Date(2030, 11, 31)), // Future date",
                      "    manufactureDate: getRandomDate(new Date(2023, 0, 1), new Date(2024, 11, 31)), // Past date",
                      "    isoNumber: getRandomNumber(1000, 9999).toString(),",
                      "    nafdacNumber: getRandomNumber(1000, 9999).toString(),",
                      "    quantity: getRandomNumber(1, 100),",
                      "    costPrice: costPrice,",
                      "    sellingPrice: sellingPrice, // Ensuring selling price is not less than cost price",
                      "    eanNumber: getRandomNumber(1000, 9999).toString(),",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),",
                      "    saleStart: getRandomDate(new Date(2024, 0, 1), new Date(2025, 11, 31)), // Future date",
                      "    saleEnd: getRandomDate(new Date(2025, 0, 1), new Date(2026, 11, 31)), // Future date",
                      "    imagePath: \"https://imagekit.io/tools/free-image-hosting/\" // Replace with dynamic upload if needed",
                      "};",
                      "",
                      "// ✅ Update form-data in the request body",
                      "pm.request.body.update({",
                      "    mode: \"formdata\",",
                      "    formdata: [",
                      "        { key: \"title\", value: productDetails.title, type: \"text\" },",
                      "        { key: \"description\", value: productDetails.description, type: \"text\" },",
                      "        { key: \"brandName\", value: productDetails.brandName, type: \"text\" },",
                      "        { key: \"model\", value: productDetails.model, type: \"text\" },",
                      "        { key: \"expiryDate\", value: productDetails.expiryDate, type: \"text\" },",
                      "        { key: \"manufactureDate\", value: productDetails.manufactureDate, type: \"text\" },",
                      "        { key: \"isoNumber\", value: productDetails.isoNumber, type: \"text\" },",
                      "        { key: \"nafdacNumber\", value: productDetails.nafdacNumber, type: \"text\" },",
                      "        { key: \"quantity\", value: productDetails.quantity.toString(), type: \"text\" },",
                      "        { key: \"costPrice\", value: productDetails.costPrice.toString(), type: \"text\" },",
                      "        { key: \"sellingPrice\", value: productDetails.sellingPrice.toString(), type: \"text\" },",
                      "        { key: \"eanNumber\", value: productDetails.eanNumber, type: \"text\" },",
                      "        { key: \"categoryId\", value: productDetails.categoryId, type: \"text\" },",
                      "        { key: \"saleStart\", value: productDetails.saleStart, type: \"text\" },",
                      "        { key: \"saleEnd\", value: productDetails.saleEnd, type: \"text\" },",
                      "        { key: \"images\", src: productDetails.imagePath, type: \"file\" }",
                      "    ]",
                      "});",
                      "",
                      "// ✅ Log generated data for debugging",
                      "console.log(\"🔹 Generated product details:\", productDetails);",
                      ""
                    ],
                    "_lastExecutionId": "00e3dc30-3389-43bf-b49f-67a7b839840d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "427614b5-9354-458b-bd1e-f7a3fc0dced7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response exists\r",
                      "pm.test(\"Response should be present\", function () {\r",
                      "    pm.response.to.have.status(200); // Corrected the expected status code\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse the response body\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// ✅ Define required fields\r",
                      "const requiredFields = [\r",
                      "    \"id\", \"title\", \"description\", \"brandName\", \"model\",\r",
                      "    \"expiryDate\", \"manufactureDate\", \"isoNumber\", \"nafdacNumber\",\r",
                      "    \"quantity\", \"costPrice\", \"sellingPrice\", \"eanNumber\", \"categoryId\",\r",
                      "    \"saleStart\", \"saleEnd\"\r",
                      "];\r",
                      "\r",
                      "// ✅ Check that required fields exist and are not empty\r",
                      "pm.test(\"Required fields should not be empty\", function () {\r",
                      "    requiredFields.forEach(field => {\r",
                      "        pm.expect(response.data).to.have.property(field);\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response.data[field]).to.not.be.null;\r",
                      "            pm.expect(response.data[field]).to.not.be.undefined;\r",
                      "\r",
                      "            // ✅ Check if string fields are not empty\r",
                      "            if (typeof response.data[field] === \"string\") {\r",
                      "                pm.expect(response.data[field].trim()).to.not.equal(\"\");\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if array fields are not empty\r",
                      "            if (Array.isArray(response.data[field])) {\r",
                      "                pm.expect(response.data[field].length).to.be.greaterThan(0);\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if numeric fields are valid\r",
                      "            if ([\"quantity\", \"costPrice\", \"sellingPrice\"].includes(field)) {\r",
                      "                pm.expect(response.data[field]).to.be.a(\"number\");\r",
                      "                pm.expect(response.data[field]).to.be.greaterThan(0);\r",
                      "            }\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate the response contains a success message\r",
                      "pm.test(\"Response should contain a success message\", function () {\r",
                      "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(response.message.toLowerCase()).to.include(\"success\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate that selling price is not lower than cost price\r",
                      "pm.test(\"Selling price should be greater than or equal to cost price\", function () {\r",
                      "    if (response.sellingPrice && response.costPrice) {\r",
                      "        pm.expect(response.sellingPrice).to.be.at.least(response.costPrice);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate dates are in YYYY-MM-DD format\r",
                      "pm.test(\"Dates should be in valid format\", function () {\r",
                      "    [\"expiryDate\", \"manufactureDate\", \"saleStart\", \"saleEnd\"].forEach(field => {\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Log response for debugging\r",
                      "console.log(\"🔹 Response Body:\", response);\r",
                      "\r",
                      "pm.environment.set(\"productId\", response?.data?.id); // Fixed the TypeError by using optional chaining\r",
                      ""
                    ],
                    "_lastExecutionId": "7fdcbba5-51d6-422a-9b89-b13427c00d13"
                  }
                }
              ]
            },
            {
              "id": "1558af38-c792-4986-9265-3a05664909f7",
              "name": "get products",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5acdbd07-8bbd-4e88-9ea6-c89fee8db72e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure\r",
                      "pm.test(\"Response contains an array of products\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"result\").that.is.an(\"array\");\r",
                      "\r",
                      "    let products = jsonData.data.result;\r",
                      "    \r",
                      "    if (products.length > 0) {\r",
                      "        let product = products[0];\r",
                      "        pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\"); // Adjusted type based on response\r",
                      "        pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Extract and store all unique product IDs\r",
                      "let products = jsonData.data?.result || [];\r",
                      "let existingIds = pm.environment.get(\"product_ids\");\r",
                      "existingIds = existingIds ? JSON.parse(existingIds) : [];\r",
                      "\r",
                      "let newProductIds = products.map(product => product.id);\r",
                      "\r",
                      "// ✅ Merge new IDs with existing ones and remove duplicates\r",
                      "let uniqueProductIds = [...new Set([...existingIds, ...newProductIds])];\r",
                      "\r",
                      "// ✅ Store updated product IDs in environment variable\r",
                      "pm.environment.set(\"product_ids\", JSON.stringify(uniqueProductIds));\r",
                      "\r",
                      "// ✅ Store first product ID separately for quick access\r",
                      "if (products.length > 0) {\r",
                      "    pm.environment.set(\"firstProductId\", products[0].id);\r",
                      "    console.log(\"First product ID stored:\", products[0].id);\r",
                      "}\r",
                      "\r",
                      "// ✅ Log the unique extracted product IDs for debugging\r",
                      "console.log(\"Extracted Product IDs:\", uniqueProductIds);\r",
                      "\r",
                      "// ✅ Test that product IDs are correctly stored\r",
                      "pm.test(\"Product IDs should be extracted, stored, and unique\", function () {\r",
                      "    pm.expect(uniqueProductIds).to.be.an(\"array\").that.is.not.empty;\r",
                      "    uniqueProductIds.forEach(id => pm.expect(id).to.be.a(\"string\").that.has.lengthOf(36)); // UUID validation\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ec167e80-cfe3-4cc1-ae4c-3eb9273e706d"
                  }
                }
              ]
            },
            {
              "id": "e87e3c10-3383-4997-996a-4557c70e7107",
              "name": "get product by ID",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3928b7d-bb79-44ad-8b81-032f3d61c9b9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid product ID\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid product ID\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "if (jsonData.success && jsonData.data) {\r",
                      "    let product = jsonData.data;\r",
                      "\r",
                      "    // ✅ Store key product details as environment variables\r",
                      "    pm.environment.set(\"productId\", product.id);\r",
                      "    pm.environment.set(\"productTitle\", product.title);\r",
                      "    pm.environment.set(\"productDescription\", product.description);\r",
                      "    pm.environment.set(\"brandName\", product.brandName);\r",
                      "    pm.environment.set(\"model\", product.model);\r",
                      "    pm.environment.set(\"expiryDate\", product.expiryDate);\r",
                      "    pm.environment.set(\"manufactureDate\", product.manufactureDate);\r",
                      "    pm.environment.set(\"quantity\", product.quantity);\r",
                      "    pm.environment.set(\"sellingPrice\", product.sellingPrice);\r",
                      "    pm.environment.set(\"costPrice\", product.costPrice);\r",
                      "    pm.environment.set(\"sku\", product.sku);\r",
                      "    pm.environment.set(\"eanNumber\", product.eanNumber);\r",
                      "    pm.environment.set(\"categoryId\", product.category.id);\r",
                      "    pm.environment.set(\"categoryName\", product.category.name);\r",
                      "    pm.environment.set(\"sellerEmail\", product.seller.email);\r",
                      "    pm.environment.set(\"sellerFullName\", product.seller.fullName);\r",
                      "    \r",
                      "    console.log(\"✅ Stored product details as environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"model\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"expiryDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"manufactureDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"quantity\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"costPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sku\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"eanNumber\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"category\").that.is.an(\"object\");\r",
                      "    pm.expect(product.category).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product.category).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"seller\").that.is.an(\"object\");\r",
                      "    pm.expect(product.seller).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                      "    pm.expect(product.seller).to.have.property(\"email\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"reviews\").that.is.an(\"object\");\r",
                      "    pm.expect(product.reviews).to.have.property(\"data\").that.is.an(\"array\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate numerical values (quantity, price)\r",
                      "pm.test(\"TC_003 - Ensure numerical values are correct\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.quantity).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.sellingPrice)).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.costPrice)).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate seller email format\r",
                      "pm.test(\"TC_004 - Validate seller email format\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.seller.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_005 - API response time should be within 1000ms\r",
                      "pm.test(\"TC_005 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "337313f0-1a4e-48a3-81fa-bec5badf73dc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c3857aad-3a03-42df-a3e2-96403f7309b0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "288a0e0e-2153-4c7d-bf64-14ea8b598e58"
                  }
                }
              ]
            },
            {
              "id": "c8b7578a-c912-43b2-a8df-f584d1599230",
              "name": "update product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "PUT",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset:utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product updated successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate updated product structure\r",
                      "pm.test(\"Response contains updated product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"price\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\").and.includes(\"http\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d046e760-dc6a-44b9-a725-667194ab3e82",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set\r",
                      "if (!pm.environment.get(\"authToken\")) {\r",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ Set Authorization Header\r",
                      "pm.request.headers.add({\r",
                      "    key: \"Authorization\",\r",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
                      "});\r",
                      "\r",
                      "// ✅ Function to generate a random number within a range\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// ✅ Predefined list of real product names and descriptions\r",
                      "const products = [\r",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },\r",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },\r",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },\r",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },\r",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },\r",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },\r",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },\r",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },\r",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },\r",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }\r",
                      "];\r",
                      "\r",
                      "// ✅ Select a random product\r",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];\r",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;\r",
                      "\r",
                      "// ✅ Generate dynamic cost and selling prices\r",
                      "const costPrice = getRandomNumber(50, 500);\r",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice\r",
                      "\r",
                      "// ✅ Fetch existing product details from environment variables\r",
                      "const productDetails = {\r",
                      "    title: uniqueTitle,  // Updating title\r",
                      "    description: selectedProduct.description, // Updating description\r",
                      "    brandName: pm.environment.get(\"brandName\") || \"DefaultBrand\",\r",
                      "    model: pm.environment.get(\"model\") || `M${getRandomNumber(1000, 9999)}`,\r",
                      "    expiryDate: pm.environment.get(\"expiryDate\") || \"2026-12-31T00:00:00.000Z\",\r",
                      "    manufactureDate: pm.environment.get(\"manufactureDate\") || \"2024-01-01T00:00:00.000Z\",\r",
                      "    isoNumber: pm.environment.get(\"isoNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    nafdacNumber: pm.environment.get(\"nafdacNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    quantity: pm.environment.get(\"quantity\") || getRandomNumber(1, 100),\r",
                      "    costPrice: costPrice.toString(), // Updating cost price\r",
                      "    sellingPrice: sellingPrice.toString(), // Updating selling price\r",
                      "    eanNumber: pm.environment.get(\"eanNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),\r",
                      "    saleStart: pm.environment.get(\"saleStart\") || \"2025-01-01T00:00:00.000Z\",\r",
                      "    saleEnd: pm.environment.get(\"saleEnd\") || \"2026-12-31T00:00:00.000Z\"\r",
                      "};\r",
                      "\r",
                      "// ✅ Update form-data in the request body (excluding images)\r",
                      "pm.request.body.update({\r",
                      "    mode: \"formdata\",\r",
                      "    formdata: Object.entries(productDetails).map(([key, value]) => ({\r",
                      "        key: key,\r",
                      "        value: value,\r",
                      "        type: \"text\"\r",
                      "    }))\r",
                      "});\r",
                      "\r",
                      "// ✅ Log generated data for debugging\r",
                      "console.log(\"🔹 Updated Product Details:\", productDetails);\r",
                      ""
                    ],
                    "_lastExecutionId": "4b89423d-5840-4106-a7ed-22222b02f904"
                  }
                }
              ]
            },
            {
              "id": "83efae9e-6fdb-489c-a62b-ec39aa817070",
              "name": "delete product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2e3e38f-f2f4-45ca-9a31-67a7b8df002d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate product data structure\r",
                      "pm.test(\"Response contains valid product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    \r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e4cbd781-c87b-4533-b4b1-cb5d3b8b43ee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5bd1202c-89cc-4b06-b701-f4ef429f75e9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Retrieve stored product IDs from the environment\r",
                      "let storedProductIds = pm.environment.get(\"product_ids\");\r",
                      "storedProductIds = storedProductIds ? JSON.parse(storedProductIds) : [];\r",
                      "\r",
                      "// ✅ Select a random product ID and store it before the request runs\r",
                      "if (storedProductIds.length > 0) {\r",
                      "    let randomIndex = Math.floor(Math.random() * storedProductIds.length);\r",
                      "    let randomProductId = storedProductIds[randomIndex];\r",
                      "\r",
                      "    // ✅ Store the selected product ID for use in the request\r",
                      "    pm.environment.set(\"randomProductId\", randomProductId);\r",
                      "    console.log(\"Randomly selected Product ID:\", randomProductId);\r",
                      "} else {\r",
                      "    console.warn(\"No stored product IDs available! Ensure the previous request fetched product IDs correctly.\");\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "23bd7d97-e382-4214-b968-09ce1c0c2dfe"
                  }
                }
              ]
            },
            {
              "id": "e7c6f7cf-f1fb-425f-9c69-f9ea93232803",
              "name": "Top brands",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "brands"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83c0d520-e58c-413f-ab9a-6a86fce39f05",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product top brand fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure (Array of Brands)\r",
                      "pm.test(\"Response contains an array of top brands\", function () {\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "\r",
                      "    if (jsonData.data.length > 0) {\r",
                      "        let brand = jsonData.data[0];\r",
                      "\r",
                      "        pm.expect(brand).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "        pm.expect(brand).to.have.property(\"count\").that.is.a(\"number\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store brand names for future use\r",
                      "if (jsonData.data.length > 0) {\r",
                      "    let brandNames = jsonData.data.map(brand => brand.brandName);\r",
                      "    pm.environment.set(\"brand_names\", JSON.stringify(brandNames));\r",
                      "    console.log(\"Stored brand names:\", brandNames);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "4158cfe7-cb1b-4531-9629-d21d38d52ec4"
                  }
                }
              ]
            },
            {
              "id": "f1be75de-bb8e-4f8c-990d-f9230ed0fc7d",
              "name": "search products",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "search"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"q\": \"LG\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70e98749-492d-42fd-b924-96dcad8f7dd5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid search query\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid search\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    let jsonData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate search query response does not return 404 or empty result set\r",
                      "pm.test(\"TC_003 - Valid search should not return 404 or empty result set\", function () {\r",
                      "    let data = pm.response.json().data;\r",
                      "    \r",
                      "    pm.expect(pm.response.code).not.to.eql(404);\r",
                      "    pm.expect(data.result.length).to.be.above(0, \"Search query should return at least one result\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate response time (Performance)\r",
                      "pm.test(\"TC_004 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a2806663-5e06-423a-9899-7ec1f8034045"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b7da7082-a2fd-48aa-984d-519a45109519",
          "length": 40,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "scriptId": "c810435d-b1e8-4cc8-a896-155e37f6b598"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response should be present",
          "message": "expected response to have status code 200 but got 500",
          "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:28)",
          "checksum": "0649ea23c5164332e7f72ca88338af41",
          "id": "189faacb-9528-48dc-ae70-d22b9b514605",
          "timestamp": 1747063088488,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 28,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "17690a3e-fa74-49f5-849f-3d412ec83d52",
          "name": "add product",
          "request": {
            "url": {
              "path": [
                "products"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{authToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c810435d-b1e8-4cc8-a896-155e37f6b598",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure Authorization Token is Set",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");",
                  "}",
                  "",
                  "// ✅ Set Authorization Header",
                  "pm.request.headers.add({",
                  "    key: \"Authorization\",",
                  "    value: `Bearer ${pm.environment.get(\"authToken\")}`",
                  "});",
                  "",
                  "// ✅ Function to generate a random number within a range",
                  "function getRandomNumber(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "}",
                  "",
                  "// ✅ Function to generate a random date within a range",
                  "function getRandomDate(start, end) {",
                  "    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))",
                  "        .toISOString()",
                  "        .split(\"T\")[0]; // Returns in YYYY-MM-DD format",
                  "}",
                  "",
                  "// ✅ Predefined list of real product names and descriptions",
                  "const products = [",
                  "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },",
                  "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },",
                  "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },",
                  "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },",
                  "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },",
                  "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },",
                  "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },",
                  "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },",
                  "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },",
                  "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }",
                  "];",
                  "",
                  "// ✅ Predefined list of real brand names",
                  "const brands = [",
                  "    \"Nike\", \"Adidas\", \"Apple\", \"Samsung\", \"Nestlé\", \"L'Oréal\", \"LG\", \"Sony\", \"Coca-Cola\", \"Colgate\"",
                  "];",
                  "",
                  "// ✅ Select a random product and brand",
                  "const selectedProduct = products[Math.floor(Math.random() * products.length)];",
                  "const selectedBrand = brands[Math.floor(Math.random() * brands.length)];",
                  "",
                  "// ✅ Append a random number to the product title to avoid duplication",
                  "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;",
                  "",
                  "// ✅ Generate dynamic product details",
                  "const costPrice = getRandomNumber(50, 500);",
                  "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice",
                  "",
                  "const productDetails = {",
                  "    title: uniqueTitle,  // Ensuring uniqueness",
                  "    description: selectedProduct.description,",
                  "    brandName: selectedBrand,",
                  "    model: `M${getRandomNumber(1000, 9999)}`,",
                  "    expiryDate: getRandomDate(new Date(2025, 0, 1), new Date(2030, 11, 31)), // Future date",
                  "    manufactureDate: getRandomDate(new Date(2023, 0, 1), new Date(2024, 11, 31)), // Past date",
                  "    isoNumber: getRandomNumber(1000, 9999).toString(),",
                  "    nafdacNumber: getRandomNumber(1000, 9999).toString(),",
                  "    quantity: getRandomNumber(1, 100),",
                  "    costPrice: costPrice,",
                  "    sellingPrice: sellingPrice, // Ensuring selling price is not less than cost price",
                  "    eanNumber: getRandomNumber(1000, 9999).toString(),",
                  "    categoryId: pm.environment.get(\"categoryId4p\"),",
                  "    saleStart: getRandomDate(new Date(2024, 0, 1), new Date(2025, 11, 31)), // Future date",
                  "    saleEnd: getRandomDate(new Date(2025, 0, 1), new Date(2026, 11, 31)), // Future date",
                  "    imagePath: \"https://imagekit.io/tools/free-image-hosting/\" // Replace with dynamic upload if needed",
                  "};",
                  "",
                  "// ✅ Update form-data in the request body",
                  "pm.request.body.update({",
                  "    mode: \"formdata\",",
                  "    formdata: [",
                  "        { key: \"title\", value: productDetails.title, type: \"text\" },",
                  "        { key: \"description\", value: productDetails.description, type: \"text\" },",
                  "        { key: \"brandName\", value: productDetails.brandName, type: \"text\" },",
                  "        { key: \"model\", value: productDetails.model, type: \"text\" },",
                  "        { key: \"expiryDate\", value: productDetails.expiryDate, type: \"text\" },",
                  "        { key: \"manufactureDate\", value: productDetails.manufactureDate, type: \"text\" },",
                  "        { key: \"isoNumber\", value: productDetails.isoNumber, type: \"text\" },",
                  "        { key: \"nafdacNumber\", value: productDetails.nafdacNumber, type: \"text\" },",
                  "        { key: \"quantity\", value: productDetails.quantity.toString(), type: \"text\" },",
                  "        { key: \"costPrice\", value: productDetails.costPrice.toString(), type: \"text\" },",
                  "        { key: \"sellingPrice\", value: productDetails.sellingPrice.toString(), type: \"text\" },",
                  "        { key: \"eanNumber\", value: productDetails.eanNumber, type: \"text\" },",
                  "        { key: \"categoryId\", value: productDetails.categoryId, type: \"text\" },",
                  "        { key: \"saleStart\", value: productDetails.saleStart, type: \"text\" },",
                  "        { key: \"saleEnd\", value: productDetails.saleEnd, type: \"text\" },",
                  "        { key: \"images\", src: productDetails.imagePath, type: \"file\" }",
                  "    ]",
                  "});",
                  "",
                  "// ✅ Log generated data for debugging",
                  "console.log(\"🔹 Generated product details:\", productDetails);",
                  ""
                ],
                "_lastExecutionId": "00e3dc30-3389-43bf-b49f-67a7b839840d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "427614b5-9354-458b-bd1e-f7a3fc0dced7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response exists\r",
                  "pm.test(\"Response should be present\", function () {\r",
                  "    pm.response.to.have.status(200); // Corrected the expected status code\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse the response body\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "// ✅ Define required fields\r",
                  "const requiredFields = [\r",
                  "    \"id\", \"title\", \"description\", \"brandName\", \"model\",\r",
                  "    \"expiryDate\", \"manufactureDate\", \"isoNumber\", \"nafdacNumber\",\r",
                  "    \"quantity\", \"costPrice\", \"sellingPrice\", \"eanNumber\", \"categoryId\",\r",
                  "    \"saleStart\", \"saleEnd\"\r",
                  "];\r",
                  "\r",
                  "// ✅ Check that required fields exist and are not empty\r",
                  "pm.test(\"Required fields should not be empty\", function () {\r",
                  "    requiredFields.forEach(field => {\r",
                  "        pm.expect(response.data).to.have.property(field);\r",
                  "        if (response[field]) {\r",
                  "            pm.expect(response.data[field]).to.not.be.null;\r",
                  "            pm.expect(response.data[field]).to.not.be.undefined;\r",
                  "\r",
                  "            // ✅ Check if string fields are not empty\r",
                  "            if (typeof response.data[field] === \"string\") {\r",
                  "                pm.expect(response.data[field].trim()).to.not.equal(\"\");\r",
                  "            }\r",
                  "\r",
                  "            // ✅ Check if array fields are not empty\r",
                  "            if (Array.isArray(response.data[field])) {\r",
                  "                pm.expect(response.data[field].length).to.be.greaterThan(0);\r",
                  "            }\r",
                  "\r",
                  "            // ✅ Check if numeric fields are valid\r",
                  "            if ([\"quantity\", \"costPrice\", \"sellingPrice\"].includes(field)) {\r",
                  "                pm.expect(response.data[field]).to.be.a(\"number\");\r",
                  "                pm.expect(response.data[field]).to.be.greaterThan(0);\r",
                  "            }\r",
                  "        }\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate the response contains a success message\r",
                  "pm.test(\"Response should contain a success message\", function () {\r",
                  "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                  "    pm.expect(response.message.toLowerCase()).to.include(\"success\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate that selling price is not lower than cost price\r",
                  "pm.test(\"Selling price should be greater than or equal to cost price\", function () {\r",
                  "    if (response.sellingPrice && response.costPrice) {\r",
                  "        pm.expect(response.sellingPrice).to.be.at.least(response.costPrice);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate dates are in YYYY-MM-DD format\r",
                  "pm.test(\"Dates should be in valid format\", function () {\r",
                  "    [\"expiryDate\", \"manufactureDate\", \"saleStart\", \"saleEnd\"].forEach(field => {\r",
                  "        if (response[field]) {\r",
                  "            pm.expect(response[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                  "        }\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// ✅ Log response for debugging\r",
                  "console.log(\"🔹 Response Body:\", response);\r",
                  "\r",
                  "pm.environment.set(\"productId\", response?.data?.id); // Fixed the TypeError by using optional chaining\r",
                  ""
                ],
                "_lastExecutionId": "7fdcbba5-51d6-422a-9b89-b13427c00d13"
              }
            }
          ]
        },
        "parent": {
          "id": "8b64db53-a9fa-473b-8cc6-96423e861533",
          "name": "product",
          "item": [
            {
              "id": "d8af0e9c-aa87-4e73-8e74-f42001b0f625",
              "name": "valid Sign In",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "signin",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{currentPayload}}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cab83c48-571c-4902-b4e7-02acc12dd018",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = {\r",
                      "    \"valid_login\": {\r",
                      "     \"email\": \"testog@e-record.com\",\r",
                      "    \"password\": \"Pass@12345\"\r",
                      "},\r",
                      "    \"missing_email\": { \r",
                      "        \"email\": \"\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"missing_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"\" \r",
                      "    },\r",
                      "    \"invalid_email_format\": { \r",
                      "        \"email\": \"invalid-email\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"incorrect_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"WrongPass123\" \r",
                      "    },\r",
                      "    \"unregistered_email\": { \r",
                      "        \"email\": \"unregistered@mail.com\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "// Get the current test case (default: valid_login)\r",
                      "let testCase = pm.environment.get(\"testCase\") || \"valid_login\";\r",
                      "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                      "\r",
                      "// Set request headers for tracking\r",
                      "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3967611-823a-4c6e-9ee2-a0f9fea65d93"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a359d213-bdc7-46a4-8889-efa1f73cc962",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                      "\r",
                      "const expectedStatus = {\r",
                      "    \"valid_login\": 200,\r",
                      "    \"missing_email\": 400,\r",
                      "    \"missing_password\": 400,\r",
                      "    \"invalid_email_format\": 400,\r",
                      "    \"incorrect_password\": 401,\r",
                      "    \"unregistered_email\": 404\r",
                      "};\r",
                      "\r",
                      "// ✅ Test Case 1: Validate Status Code\r",
                      "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                      "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                      "});\r",
                      "\r",
                      "// Handle successful login response\r",
                      "if (pm.response.code === 200) {\r",
                      "    // ✅ Test Case 2: Verify Success Field Value\r",
                      "    pm.test(\"Verify that the success field is true\", function () {\r",
                      "        pm.expect(response.success).to.eql(true);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 3: Check Message Field Value\r",
                      "    pm.test(\"Check that the message field is 'User sign in successful'\", function () {\r",
                      "        pm.expect(response.message).to.eql(\"User sign in successful\");\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 4: Validate Token Field\r",
                      "    pm.test(\"Validate that the token field is present and not empty\", function () {\r",
                      "        pm.expect(response.data.token).to.be.a('string');\r",
                      "        pm.expect(response.data.token.length).to.be.greaterThan(0);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 5: Verify Expiration Timestamp Format\r",
                      "    pm.test(\"Verify that the expiration timestamp is in ISO 8601 format\", function () {\r",
                      "        let expiresIn = response.data.expiresIn;\r",
                      "        pm.expect(new Date(expiresIn).toISOString()).to.eql(expiresIn);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 6: Validate User Data Fields\r",
                      "    pm.test(\"Validate that the user data fields are correct\", function () {\r",
                      "        let user = response.data.user;\r",
                      "        \r",
                      "        pm.expect(user.id).to.not.eql(null);\r",
                      "        pm.expect(user.email).to.not.eql(null);\r",
                      "        pm.expect(user.fullName).to.not.eql(null);\r",
                      "        pm.expect(user.firstName).to.not.eql(null);\r",
                      "        pm.expect(user.lastName).to.not.eql(null);\r",
                      "    });\r",
                      "\r",
                      "    pm.environment.set(\"userId\", response.data.user.id)\r",
                      "\r",
                      "    // ✅ Test Case 7: Verify KYC Status\r",
                      "    pm.test(\"Verify that the KYC status is false\", function () {\r",
                      "        pm.expect(response.data.user.kycCompleted).to.eql(false);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 9: Check Token Format (JWT)\r",
                      "    pm.test(\"Check that the token is in a valid JWT format\", function () {\r",
                      "        let token = response.data.token;\r",
                      "        let tokenParts = token.split('.');\r",
                      "\r",
                      "        pm.expect(tokenParts).to.have.lengthOf(3);\r",
                      "        pm.expect(tokenParts[0]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[1]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[2]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 10: Validate Response Time\r",
                      "    pm.test(\"Validate that the response time is less than 500ms\", function () {\r",
                      "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Store Auth Token for Future Requests\r",
                      "    pm.environment.set(\"authToken\", response.data.token);\r",
                      "} \r",
                      "// Handle error cases\r",
                      "else {\r",
                      "    pm.test(\"Response contains error message\", function () {\r",
                      "        pm.expect(response).to.have.property(\"error\");\r",
                      "        pm.expect(response.error).to.be.a(\"string\");\r",
                      "    });\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "9ac9fcb0-f51a-42f3-a3c8-2ef6c123219e"
                  }
                }
              ]
            },
            {
              "id": "17690a3e-fa74-49f5-849f-3d412ec83d52",
              "name": "add product",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c810435d-b1e8-4cc8-a896-155e37f6b598",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set",
                      "if (!pm.environment.get(\"authToken\")) {",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");",
                      "}",
                      "",
                      "// ✅ Set Authorization Header",
                      "pm.request.headers.add({",
                      "    key: \"Authorization\",",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`",
                      "});",
                      "",
                      "// ✅ Function to generate a random number within a range",
                      "function getRandomNumber(min, max) {",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                      "}",
                      "",
                      "// ✅ Function to generate a random date within a range",
                      "function getRandomDate(start, end) {",
                      "    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))",
                      "        .toISOString()",
                      "        .split(\"T\")[0]; // Returns in YYYY-MM-DD format",
                      "}",
                      "",
                      "// ✅ Predefined list of real product names and descriptions",
                      "const products = [",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }",
                      "];",
                      "",
                      "// ✅ Predefined list of real brand names",
                      "const brands = [",
                      "    \"Nike\", \"Adidas\", \"Apple\", \"Samsung\", \"Nestlé\", \"L'Oréal\", \"LG\", \"Sony\", \"Coca-Cola\", \"Colgate\"",
                      "];",
                      "",
                      "// ✅ Select a random product and brand",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];",
                      "const selectedBrand = brands[Math.floor(Math.random() * brands.length)];",
                      "",
                      "// ✅ Append a random number to the product title to avoid duplication",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;",
                      "",
                      "// ✅ Generate dynamic product details",
                      "const costPrice = getRandomNumber(50, 500);",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice",
                      "",
                      "const productDetails = {",
                      "    title: uniqueTitle,  // Ensuring uniqueness",
                      "    description: selectedProduct.description,",
                      "    brandName: selectedBrand,",
                      "    model: `M${getRandomNumber(1000, 9999)}`,",
                      "    expiryDate: getRandomDate(new Date(2025, 0, 1), new Date(2030, 11, 31)), // Future date",
                      "    manufactureDate: getRandomDate(new Date(2023, 0, 1), new Date(2024, 11, 31)), // Past date",
                      "    isoNumber: getRandomNumber(1000, 9999).toString(),",
                      "    nafdacNumber: getRandomNumber(1000, 9999).toString(),",
                      "    quantity: getRandomNumber(1, 100),",
                      "    costPrice: costPrice,",
                      "    sellingPrice: sellingPrice, // Ensuring selling price is not less than cost price",
                      "    eanNumber: getRandomNumber(1000, 9999).toString(),",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),",
                      "    saleStart: getRandomDate(new Date(2024, 0, 1), new Date(2025, 11, 31)), // Future date",
                      "    saleEnd: getRandomDate(new Date(2025, 0, 1), new Date(2026, 11, 31)), // Future date",
                      "    imagePath: \"https://imagekit.io/tools/free-image-hosting/\" // Replace with dynamic upload if needed",
                      "};",
                      "",
                      "// ✅ Update form-data in the request body",
                      "pm.request.body.update({",
                      "    mode: \"formdata\",",
                      "    formdata: [",
                      "        { key: \"title\", value: productDetails.title, type: \"text\" },",
                      "        { key: \"description\", value: productDetails.description, type: \"text\" },",
                      "        { key: \"brandName\", value: productDetails.brandName, type: \"text\" },",
                      "        { key: \"model\", value: productDetails.model, type: \"text\" },",
                      "        { key: \"expiryDate\", value: productDetails.expiryDate, type: \"text\" },",
                      "        { key: \"manufactureDate\", value: productDetails.manufactureDate, type: \"text\" },",
                      "        { key: \"isoNumber\", value: productDetails.isoNumber, type: \"text\" },",
                      "        { key: \"nafdacNumber\", value: productDetails.nafdacNumber, type: \"text\" },",
                      "        { key: \"quantity\", value: productDetails.quantity.toString(), type: \"text\" },",
                      "        { key: \"costPrice\", value: productDetails.costPrice.toString(), type: \"text\" },",
                      "        { key: \"sellingPrice\", value: productDetails.sellingPrice.toString(), type: \"text\" },",
                      "        { key: \"eanNumber\", value: productDetails.eanNumber, type: \"text\" },",
                      "        { key: \"categoryId\", value: productDetails.categoryId, type: \"text\" },",
                      "        { key: \"saleStart\", value: productDetails.saleStart, type: \"text\" },",
                      "        { key: \"saleEnd\", value: productDetails.saleEnd, type: \"text\" },",
                      "        { key: \"images\", src: productDetails.imagePath, type: \"file\" }",
                      "    ]",
                      "});",
                      "",
                      "// ✅ Log generated data for debugging",
                      "console.log(\"🔹 Generated product details:\", productDetails);",
                      ""
                    ],
                    "_lastExecutionId": "00e3dc30-3389-43bf-b49f-67a7b839840d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "427614b5-9354-458b-bd1e-f7a3fc0dced7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response exists\r",
                      "pm.test(\"Response should be present\", function () {\r",
                      "    pm.response.to.have.status(200); // Corrected the expected status code\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse the response body\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// ✅ Define required fields\r",
                      "const requiredFields = [\r",
                      "    \"id\", \"title\", \"description\", \"brandName\", \"model\",\r",
                      "    \"expiryDate\", \"manufactureDate\", \"isoNumber\", \"nafdacNumber\",\r",
                      "    \"quantity\", \"costPrice\", \"sellingPrice\", \"eanNumber\", \"categoryId\",\r",
                      "    \"saleStart\", \"saleEnd\"\r",
                      "];\r",
                      "\r",
                      "// ✅ Check that required fields exist and are not empty\r",
                      "pm.test(\"Required fields should not be empty\", function () {\r",
                      "    requiredFields.forEach(field => {\r",
                      "        pm.expect(response.data).to.have.property(field);\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response.data[field]).to.not.be.null;\r",
                      "            pm.expect(response.data[field]).to.not.be.undefined;\r",
                      "\r",
                      "            // ✅ Check if string fields are not empty\r",
                      "            if (typeof response.data[field] === \"string\") {\r",
                      "                pm.expect(response.data[field].trim()).to.not.equal(\"\");\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if array fields are not empty\r",
                      "            if (Array.isArray(response.data[field])) {\r",
                      "                pm.expect(response.data[field].length).to.be.greaterThan(0);\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if numeric fields are valid\r",
                      "            if ([\"quantity\", \"costPrice\", \"sellingPrice\"].includes(field)) {\r",
                      "                pm.expect(response.data[field]).to.be.a(\"number\");\r",
                      "                pm.expect(response.data[field]).to.be.greaterThan(0);\r",
                      "            }\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate the response contains a success message\r",
                      "pm.test(\"Response should contain a success message\", function () {\r",
                      "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(response.message.toLowerCase()).to.include(\"success\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate that selling price is not lower than cost price\r",
                      "pm.test(\"Selling price should be greater than or equal to cost price\", function () {\r",
                      "    if (response.sellingPrice && response.costPrice) {\r",
                      "        pm.expect(response.sellingPrice).to.be.at.least(response.costPrice);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate dates are in YYYY-MM-DD format\r",
                      "pm.test(\"Dates should be in valid format\", function () {\r",
                      "    [\"expiryDate\", \"manufactureDate\", \"saleStart\", \"saleEnd\"].forEach(field => {\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Log response for debugging\r",
                      "console.log(\"🔹 Response Body:\", response);\r",
                      "\r",
                      "pm.environment.set(\"productId\", response?.data?.id); // Fixed the TypeError by using optional chaining\r",
                      ""
                    ],
                    "_lastExecutionId": "7fdcbba5-51d6-422a-9b89-b13427c00d13"
                  }
                }
              ]
            },
            {
              "id": "1558af38-c792-4986-9265-3a05664909f7",
              "name": "get products",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5acdbd07-8bbd-4e88-9ea6-c89fee8db72e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure\r",
                      "pm.test(\"Response contains an array of products\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"result\").that.is.an(\"array\");\r",
                      "\r",
                      "    let products = jsonData.data.result;\r",
                      "    \r",
                      "    if (products.length > 0) {\r",
                      "        let product = products[0];\r",
                      "        pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\"); // Adjusted type based on response\r",
                      "        pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Extract and store all unique product IDs\r",
                      "let products = jsonData.data?.result || [];\r",
                      "let existingIds = pm.environment.get(\"product_ids\");\r",
                      "existingIds = existingIds ? JSON.parse(existingIds) : [];\r",
                      "\r",
                      "let newProductIds = products.map(product => product.id);\r",
                      "\r",
                      "// ✅ Merge new IDs with existing ones and remove duplicates\r",
                      "let uniqueProductIds = [...new Set([...existingIds, ...newProductIds])];\r",
                      "\r",
                      "// ✅ Store updated product IDs in environment variable\r",
                      "pm.environment.set(\"product_ids\", JSON.stringify(uniqueProductIds));\r",
                      "\r",
                      "// ✅ Store first product ID separately for quick access\r",
                      "if (products.length > 0) {\r",
                      "    pm.environment.set(\"firstProductId\", products[0].id);\r",
                      "    console.log(\"First product ID stored:\", products[0].id);\r",
                      "}\r",
                      "\r",
                      "// ✅ Log the unique extracted product IDs for debugging\r",
                      "console.log(\"Extracted Product IDs:\", uniqueProductIds);\r",
                      "\r",
                      "// ✅ Test that product IDs are correctly stored\r",
                      "pm.test(\"Product IDs should be extracted, stored, and unique\", function () {\r",
                      "    pm.expect(uniqueProductIds).to.be.an(\"array\").that.is.not.empty;\r",
                      "    uniqueProductIds.forEach(id => pm.expect(id).to.be.a(\"string\").that.has.lengthOf(36)); // UUID validation\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ec167e80-cfe3-4cc1-ae4c-3eb9273e706d"
                  }
                }
              ]
            },
            {
              "id": "e87e3c10-3383-4997-996a-4557c70e7107",
              "name": "get product by ID",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3928b7d-bb79-44ad-8b81-032f3d61c9b9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid product ID\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid product ID\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "if (jsonData.success && jsonData.data) {\r",
                      "    let product = jsonData.data;\r",
                      "\r",
                      "    // ✅ Store key product details as environment variables\r",
                      "    pm.environment.set(\"productId\", product.id);\r",
                      "    pm.environment.set(\"productTitle\", product.title);\r",
                      "    pm.environment.set(\"productDescription\", product.description);\r",
                      "    pm.environment.set(\"brandName\", product.brandName);\r",
                      "    pm.environment.set(\"model\", product.model);\r",
                      "    pm.environment.set(\"expiryDate\", product.expiryDate);\r",
                      "    pm.environment.set(\"manufactureDate\", product.manufactureDate);\r",
                      "    pm.environment.set(\"quantity\", product.quantity);\r",
                      "    pm.environment.set(\"sellingPrice\", product.sellingPrice);\r",
                      "    pm.environment.set(\"costPrice\", product.costPrice);\r",
                      "    pm.environment.set(\"sku\", product.sku);\r",
                      "    pm.environment.set(\"eanNumber\", product.eanNumber);\r",
                      "    pm.environment.set(\"categoryId\", product.category.id);\r",
                      "    pm.environment.set(\"categoryName\", product.category.name);\r",
                      "    pm.environment.set(\"sellerEmail\", product.seller.email);\r",
                      "    pm.environment.set(\"sellerFullName\", product.seller.fullName);\r",
                      "    \r",
                      "    console.log(\"✅ Stored product details as environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"model\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"expiryDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"manufactureDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"quantity\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"costPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sku\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"eanNumber\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"category\").that.is.an(\"object\");\r",
                      "    pm.expect(product.category).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product.category).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"seller\").that.is.an(\"object\");\r",
                      "    pm.expect(product.seller).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                      "    pm.expect(product.seller).to.have.property(\"email\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"reviews\").that.is.an(\"object\");\r",
                      "    pm.expect(product.reviews).to.have.property(\"data\").that.is.an(\"array\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate numerical values (quantity, price)\r",
                      "pm.test(\"TC_003 - Ensure numerical values are correct\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.quantity).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.sellingPrice)).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.costPrice)).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate seller email format\r",
                      "pm.test(\"TC_004 - Validate seller email format\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.seller.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_005 - API response time should be within 1000ms\r",
                      "pm.test(\"TC_005 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "337313f0-1a4e-48a3-81fa-bec5badf73dc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c3857aad-3a03-42df-a3e2-96403f7309b0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "288a0e0e-2153-4c7d-bf64-14ea8b598e58"
                  }
                }
              ]
            },
            {
              "id": "c8b7578a-c912-43b2-a8df-f584d1599230",
              "name": "update product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "PUT",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset:utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product updated successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate updated product structure\r",
                      "pm.test(\"Response contains updated product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"price\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\").and.includes(\"http\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d046e760-dc6a-44b9-a725-667194ab3e82",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set\r",
                      "if (!pm.environment.get(\"authToken\")) {\r",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ Set Authorization Header\r",
                      "pm.request.headers.add({\r",
                      "    key: \"Authorization\",\r",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
                      "});\r",
                      "\r",
                      "// ✅ Function to generate a random number within a range\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// ✅ Predefined list of real product names and descriptions\r",
                      "const products = [\r",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },\r",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },\r",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },\r",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },\r",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },\r",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },\r",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },\r",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },\r",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },\r",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }\r",
                      "];\r",
                      "\r",
                      "// ✅ Select a random product\r",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];\r",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;\r",
                      "\r",
                      "// ✅ Generate dynamic cost and selling prices\r",
                      "const costPrice = getRandomNumber(50, 500);\r",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice\r",
                      "\r",
                      "// ✅ Fetch existing product details from environment variables\r",
                      "const productDetails = {\r",
                      "    title: uniqueTitle,  // Updating title\r",
                      "    description: selectedProduct.description, // Updating description\r",
                      "    brandName: pm.environment.get(\"brandName\") || \"DefaultBrand\",\r",
                      "    model: pm.environment.get(\"model\") || `M${getRandomNumber(1000, 9999)}`,\r",
                      "    expiryDate: pm.environment.get(\"expiryDate\") || \"2026-12-31T00:00:00.000Z\",\r",
                      "    manufactureDate: pm.environment.get(\"manufactureDate\") || \"2024-01-01T00:00:00.000Z\",\r",
                      "    isoNumber: pm.environment.get(\"isoNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    nafdacNumber: pm.environment.get(\"nafdacNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    quantity: pm.environment.get(\"quantity\") || getRandomNumber(1, 100),\r",
                      "    costPrice: costPrice.toString(), // Updating cost price\r",
                      "    sellingPrice: sellingPrice.toString(), // Updating selling price\r",
                      "    eanNumber: pm.environment.get(\"eanNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),\r",
                      "    saleStart: pm.environment.get(\"saleStart\") || \"2025-01-01T00:00:00.000Z\",\r",
                      "    saleEnd: pm.environment.get(\"saleEnd\") || \"2026-12-31T00:00:00.000Z\"\r",
                      "};\r",
                      "\r",
                      "// ✅ Update form-data in the request body (excluding images)\r",
                      "pm.request.body.update({\r",
                      "    mode: \"formdata\",\r",
                      "    formdata: Object.entries(productDetails).map(([key, value]) => ({\r",
                      "        key: key,\r",
                      "        value: value,\r",
                      "        type: \"text\"\r",
                      "    }))\r",
                      "});\r",
                      "\r",
                      "// ✅ Log generated data for debugging\r",
                      "console.log(\"🔹 Updated Product Details:\", productDetails);\r",
                      ""
                    ],
                    "_lastExecutionId": "4b89423d-5840-4106-a7ed-22222b02f904"
                  }
                }
              ]
            },
            {
              "id": "83efae9e-6fdb-489c-a62b-ec39aa817070",
              "name": "delete product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2e3e38f-f2f4-45ca-9a31-67a7b8df002d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate product data structure\r",
                      "pm.test(\"Response contains valid product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    \r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e4cbd781-c87b-4533-b4b1-cb5d3b8b43ee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5bd1202c-89cc-4b06-b701-f4ef429f75e9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Retrieve stored product IDs from the environment\r",
                      "let storedProductIds = pm.environment.get(\"product_ids\");\r",
                      "storedProductIds = storedProductIds ? JSON.parse(storedProductIds) : [];\r",
                      "\r",
                      "// ✅ Select a random product ID and store it before the request runs\r",
                      "if (storedProductIds.length > 0) {\r",
                      "    let randomIndex = Math.floor(Math.random() * storedProductIds.length);\r",
                      "    let randomProductId = storedProductIds[randomIndex];\r",
                      "\r",
                      "    // ✅ Store the selected product ID for use in the request\r",
                      "    pm.environment.set(\"randomProductId\", randomProductId);\r",
                      "    console.log(\"Randomly selected Product ID:\", randomProductId);\r",
                      "} else {\r",
                      "    console.warn(\"No stored product IDs available! Ensure the previous request fetched product IDs correctly.\");\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "23bd7d97-e382-4214-b968-09ce1c0c2dfe"
                  }
                }
              ]
            },
            {
              "id": "e7c6f7cf-f1fb-425f-9c69-f9ea93232803",
              "name": "Top brands",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "brands"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83c0d520-e58c-413f-ab9a-6a86fce39f05",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product top brand fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure (Array of Brands)\r",
                      "pm.test(\"Response contains an array of top brands\", function () {\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "\r",
                      "    if (jsonData.data.length > 0) {\r",
                      "        let brand = jsonData.data[0];\r",
                      "\r",
                      "        pm.expect(brand).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "        pm.expect(brand).to.have.property(\"count\").that.is.a(\"number\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store brand names for future use\r",
                      "if (jsonData.data.length > 0) {\r",
                      "    let brandNames = jsonData.data.map(brand => brand.brandName);\r",
                      "    pm.environment.set(\"brand_names\", JSON.stringify(brandNames));\r",
                      "    console.log(\"Stored brand names:\", brandNames);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "4158cfe7-cb1b-4531-9629-d21d38d52ec4"
                  }
                }
              ]
            },
            {
              "id": "f1be75de-bb8e-4f8c-990d-f9230ed0fc7d",
              "name": "search products",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "search"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"q\": \"LG\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70e98749-492d-42fd-b924-96dcad8f7dd5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid search query\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid search\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    let jsonData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate search query response does not return 404 or empty result set\r",
                      "pm.test(\"TC_003 - Valid search should not return 404 or empty result set\", function () {\r",
                      "    let data = pm.response.json().data;\r",
                      "    \r",
                      "    pm.expect(pm.response.code).not.to.eql(404);\r",
                      "    pm.expect(data.result.length).to.be.above(0, \"Search query should return at least one result\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate response time (Performance)\r",
                      "pm.test(\"TC_004 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a2806663-5e06-423a-9899-7ec1f8034045"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b7da7082-a2fd-48aa-984d-519a45109519",
          "length": 40,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b402b9bc-cdbe-4298-a385-7ffa371778b3",
          "scriptId": "427614b5-9354-458b-bd1e-f7a3fc0dced7",
          "execution": "7fdcbba5-51d6-422a-9b89-b13427c00d13"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Required fields should not be empty",
          "message": "Target cannot be null or undefined.",
          "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:2:28)",
          "checksum": "15c47733f66ab2fddd34ac4315591481",
          "id": "5a84a581-387a-4e7f-844c-77141b7774a9",
          "timestamp": 1747063088489,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 28,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "17690a3e-fa74-49f5-849f-3d412ec83d52",
          "name": "add product",
          "request": {
            "url": {
              "path": [
                "products"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{authToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c810435d-b1e8-4cc8-a896-155e37f6b598",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure Authorization Token is Set",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");",
                  "}",
                  "",
                  "// ✅ Set Authorization Header",
                  "pm.request.headers.add({",
                  "    key: \"Authorization\",",
                  "    value: `Bearer ${pm.environment.get(\"authToken\")}`",
                  "});",
                  "",
                  "// ✅ Function to generate a random number within a range",
                  "function getRandomNumber(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "}",
                  "",
                  "// ✅ Function to generate a random date within a range",
                  "function getRandomDate(start, end) {",
                  "    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))",
                  "        .toISOString()",
                  "        .split(\"T\")[0]; // Returns in YYYY-MM-DD format",
                  "}",
                  "",
                  "// ✅ Predefined list of real product names and descriptions",
                  "const products = [",
                  "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },",
                  "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },",
                  "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },",
                  "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },",
                  "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },",
                  "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },",
                  "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },",
                  "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },",
                  "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },",
                  "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }",
                  "];",
                  "",
                  "// ✅ Predefined list of real brand names",
                  "const brands = [",
                  "    \"Nike\", \"Adidas\", \"Apple\", \"Samsung\", \"Nestlé\", \"L'Oréal\", \"LG\", \"Sony\", \"Coca-Cola\", \"Colgate\"",
                  "];",
                  "",
                  "// ✅ Select a random product and brand",
                  "const selectedProduct = products[Math.floor(Math.random() * products.length)];",
                  "const selectedBrand = brands[Math.floor(Math.random() * brands.length)];",
                  "",
                  "// ✅ Append a random number to the product title to avoid duplication",
                  "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;",
                  "",
                  "// ✅ Generate dynamic product details",
                  "const costPrice = getRandomNumber(50, 500);",
                  "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice",
                  "",
                  "const productDetails = {",
                  "    title: uniqueTitle,  // Ensuring uniqueness",
                  "    description: selectedProduct.description,",
                  "    brandName: selectedBrand,",
                  "    model: `M${getRandomNumber(1000, 9999)}`,",
                  "    expiryDate: getRandomDate(new Date(2025, 0, 1), new Date(2030, 11, 31)), // Future date",
                  "    manufactureDate: getRandomDate(new Date(2023, 0, 1), new Date(2024, 11, 31)), // Past date",
                  "    isoNumber: getRandomNumber(1000, 9999).toString(),",
                  "    nafdacNumber: getRandomNumber(1000, 9999).toString(),",
                  "    quantity: getRandomNumber(1, 100),",
                  "    costPrice: costPrice,",
                  "    sellingPrice: sellingPrice, // Ensuring selling price is not less than cost price",
                  "    eanNumber: getRandomNumber(1000, 9999).toString(),",
                  "    categoryId: pm.environment.get(\"categoryId4p\"),",
                  "    saleStart: getRandomDate(new Date(2024, 0, 1), new Date(2025, 11, 31)), // Future date",
                  "    saleEnd: getRandomDate(new Date(2025, 0, 1), new Date(2026, 11, 31)), // Future date",
                  "    imagePath: \"https://imagekit.io/tools/free-image-hosting/\" // Replace with dynamic upload if needed",
                  "};",
                  "",
                  "// ✅ Update form-data in the request body",
                  "pm.request.body.update({",
                  "    mode: \"formdata\",",
                  "    formdata: [",
                  "        { key: \"title\", value: productDetails.title, type: \"text\" },",
                  "        { key: \"description\", value: productDetails.description, type: \"text\" },",
                  "        { key: \"brandName\", value: productDetails.brandName, type: \"text\" },",
                  "        { key: \"model\", value: productDetails.model, type: \"text\" },",
                  "        { key: \"expiryDate\", value: productDetails.expiryDate, type: \"text\" },",
                  "        { key: \"manufactureDate\", value: productDetails.manufactureDate, type: \"text\" },",
                  "        { key: \"isoNumber\", value: productDetails.isoNumber, type: \"text\" },",
                  "        { key: \"nafdacNumber\", value: productDetails.nafdacNumber, type: \"text\" },",
                  "        { key: \"quantity\", value: productDetails.quantity.toString(), type: \"text\" },",
                  "        { key: \"costPrice\", value: productDetails.costPrice.toString(), type: \"text\" },",
                  "        { key: \"sellingPrice\", value: productDetails.sellingPrice.toString(), type: \"text\" },",
                  "        { key: \"eanNumber\", value: productDetails.eanNumber, type: \"text\" },",
                  "        { key: \"categoryId\", value: productDetails.categoryId, type: \"text\" },",
                  "        { key: \"saleStart\", value: productDetails.saleStart, type: \"text\" },",
                  "        { key: \"saleEnd\", value: productDetails.saleEnd, type: \"text\" },",
                  "        { key: \"images\", src: productDetails.imagePath, type: \"file\" }",
                  "    ]",
                  "});",
                  "",
                  "// ✅ Log generated data for debugging",
                  "console.log(\"🔹 Generated product details:\", productDetails);",
                  ""
                ],
                "_lastExecutionId": "00e3dc30-3389-43bf-b49f-67a7b839840d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "427614b5-9354-458b-bd1e-f7a3fc0dced7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response exists\r",
                  "pm.test(\"Response should be present\", function () {\r",
                  "    pm.response.to.have.status(200); // Corrected the expected status code\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse the response body\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "// ✅ Define required fields\r",
                  "const requiredFields = [\r",
                  "    \"id\", \"title\", \"description\", \"brandName\", \"model\",\r",
                  "    \"expiryDate\", \"manufactureDate\", \"isoNumber\", \"nafdacNumber\",\r",
                  "    \"quantity\", \"costPrice\", \"sellingPrice\", \"eanNumber\", \"categoryId\",\r",
                  "    \"saleStart\", \"saleEnd\"\r",
                  "];\r",
                  "\r",
                  "// ✅ Check that required fields exist and are not empty\r",
                  "pm.test(\"Required fields should not be empty\", function () {\r",
                  "    requiredFields.forEach(field => {\r",
                  "        pm.expect(response.data).to.have.property(field);\r",
                  "        if (response[field]) {\r",
                  "            pm.expect(response.data[field]).to.not.be.null;\r",
                  "            pm.expect(response.data[field]).to.not.be.undefined;\r",
                  "\r",
                  "            // ✅ Check if string fields are not empty\r",
                  "            if (typeof response.data[field] === \"string\") {\r",
                  "                pm.expect(response.data[field].trim()).to.not.equal(\"\");\r",
                  "            }\r",
                  "\r",
                  "            // ✅ Check if array fields are not empty\r",
                  "            if (Array.isArray(response.data[field])) {\r",
                  "                pm.expect(response.data[field].length).to.be.greaterThan(0);\r",
                  "            }\r",
                  "\r",
                  "            // ✅ Check if numeric fields are valid\r",
                  "            if ([\"quantity\", \"costPrice\", \"sellingPrice\"].includes(field)) {\r",
                  "                pm.expect(response.data[field]).to.be.a(\"number\");\r",
                  "                pm.expect(response.data[field]).to.be.greaterThan(0);\r",
                  "            }\r",
                  "        }\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate the response contains a success message\r",
                  "pm.test(\"Response should contain a success message\", function () {\r",
                  "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                  "    pm.expect(response.message.toLowerCase()).to.include(\"success\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate that selling price is not lower than cost price\r",
                  "pm.test(\"Selling price should be greater than or equal to cost price\", function () {\r",
                  "    if (response.sellingPrice && response.costPrice) {\r",
                  "        pm.expect(response.sellingPrice).to.be.at.least(response.costPrice);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate dates are in YYYY-MM-DD format\r",
                  "pm.test(\"Dates should be in valid format\", function () {\r",
                  "    [\"expiryDate\", \"manufactureDate\", \"saleStart\", \"saleEnd\"].forEach(field => {\r",
                  "        if (response[field]) {\r",
                  "            pm.expect(response[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                  "        }\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// ✅ Log response for debugging\r",
                  "console.log(\"🔹 Response Body:\", response);\r",
                  "\r",
                  "pm.environment.set(\"productId\", response?.data?.id); // Fixed the TypeError by using optional chaining\r",
                  ""
                ],
                "_lastExecutionId": "7fdcbba5-51d6-422a-9b89-b13427c00d13"
              }
            }
          ]
        },
        "parent": {
          "id": "8b64db53-a9fa-473b-8cc6-96423e861533",
          "name": "product",
          "item": [
            {
              "id": "d8af0e9c-aa87-4e73-8e74-f42001b0f625",
              "name": "valid Sign In",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "signin",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{currentPayload}}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cab83c48-571c-4902-b4e7-02acc12dd018",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = {\r",
                      "    \"valid_login\": {\r",
                      "     \"email\": \"testog@e-record.com\",\r",
                      "    \"password\": \"Pass@12345\"\r",
                      "},\r",
                      "    \"missing_email\": { \r",
                      "        \"email\": \"\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"missing_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"\" \r",
                      "    },\r",
                      "    \"invalid_email_format\": { \r",
                      "        \"email\": \"invalid-email\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"incorrect_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"WrongPass123\" \r",
                      "    },\r",
                      "    \"unregistered_email\": { \r",
                      "        \"email\": \"unregistered@mail.com\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "// Get the current test case (default: valid_login)\r",
                      "let testCase = pm.environment.get(\"testCase\") || \"valid_login\";\r",
                      "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                      "\r",
                      "// Set request headers for tracking\r",
                      "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3967611-823a-4c6e-9ee2-a0f9fea65d93"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a359d213-bdc7-46a4-8889-efa1f73cc962",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                      "\r",
                      "const expectedStatus = {\r",
                      "    \"valid_login\": 200,\r",
                      "    \"missing_email\": 400,\r",
                      "    \"missing_password\": 400,\r",
                      "    \"invalid_email_format\": 400,\r",
                      "    \"incorrect_password\": 401,\r",
                      "    \"unregistered_email\": 404\r",
                      "};\r",
                      "\r",
                      "// ✅ Test Case 1: Validate Status Code\r",
                      "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                      "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                      "});\r",
                      "\r",
                      "// Handle successful login response\r",
                      "if (pm.response.code === 200) {\r",
                      "    // ✅ Test Case 2: Verify Success Field Value\r",
                      "    pm.test(\"Verify that the success field is true\", function () {\r",
                      "        pm.expect(response.success).to.eql(true);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 3: Check Message Field Value\r",
                      "    pm.test(\"Check that the message field is 'User sign in successful'\", function () {\r",
                      "        pm.expect(response.message).to.eql(\"User sign in successful\");\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 4: Validate Token Field\r",
                      "    pm.test(\"Validate that the token field is present and not empty\", function () {\r",
                      "        pm.expect(response.data.token).to.be.a('string');\r",
                      "        pm.expect(response.data.token.length).to.be.greaterThan(0);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 5: Verify Expiration Timestamp Format\r",
                      "    pm.test(\"Verify that the expiration timestamp is in ISO 8601 format\", function () {\r",
                      "        let expiresIn = response.data.expiresIn;\r",
                      "        pm.expect(new Date(expiresIn).toISOString()).to.eql(expiresIn);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 6: Validate User Data Fields\r",
                      "    pm.test(\"Validate that the user data fields are correct\", function () {\r",
                      "        let user = response.data.user;\r",
                      "        \r",
                      "        pm.expect(user.id).to.not.eql(null);\r",
                      "        pm.expect(user.email).to.not.eql(null);\r",
                      "        pm.expect(user.fullName).to.not.eql(null);\r",
                      "        pm.expect(user.firstName).to.not.eql(null);\r",
                      "        pm.expect(user.lastName).to.not.eql(null);\r",
                      "    });\r",
                      "\r",
                      "    pm.environment.set(\"userId\", response.data.user.id)\r",
                      "\r",
                      "    // ✅ Test Case 7: Verify KYC Status\r",
                      "    pm.test(\"Verify that the KYC status is false\", function () {\r",
                      "        pm.expect(response.data.user.kycCompleted).to.eql(false);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 9: Check Token Format (JWT)\r",
                      "    pm.test(\"Check that the token is in a valid JWT format\", function () {\r",
                      "        let token = response.data.token;\r",
                      "        let tokenParts = token.split('.');\r",
                      "\r",
                      "        pm.expect(tokenParts).to.have.lengthOf(3);\r",
                      "        pm.expect(tokenParts[0]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[1]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[2]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 10: Validate Response Time\r",
                      "    pm.test(\"Validate that the response time is less than 500ms\", function () {\r",
                      "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Store Auth Token for Future Requests\r",
                      "    pm.environment.set(\"authToken\", response.data.token);\r",
                      "} \r",
                      "// Handle error cases\r",
                      "else {\r",
                      "    pm.test(\"Response contains error message\", function () {\r",
                      "        pm.expect(response).to.have.property(\"error\");\r",
                      "        pm.expect(response.error).to.be.a(\"string\");\r",
                      "    });\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "9ac9fcb0-f51a-42f3-a3c8-2ef6c123219e"
                  }
                }
              ]
            },
            {
              "id": "17690a3e-fa74-49f5-849f-3d412ec83d52",
              "name": "add product",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c810435d-b1e8-4cc8-a896-155e37f6b598",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set",
                      "if (!pm.environment.get(\"authToken\")) {",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");",
                      "}",
                      "",
                      "// ✅ Set Authorization Header",
                      "pm.request.headers.add({",
                      "    key: \"Authorization\",",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`",
                      "});",
                      "",
                      "// ✅ Function to generate a random number within a range",
                      "function getRandomNumber(min, max) {",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                      "}",
                      "",
                      "// ✅ Function to generate a random date within a range",
                      "function getRandomDate(start, end) {",
                      "    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))",
                      "        .toISOString()",
                      "        .split(\"T\")[0]; // Returns in YYYY-MM-DD format",
                      "}",
                      "",
                      "// ✅ Predefined list of real product names and descriptions",
                      "const products = [",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }",
                      "];",
                      "",
                      "// ✅ Predefined list of real brand names",
                      "const brands = [",
                      "    \"Nike\", \"Adidas\", \"Apple\", \"Samsung\", \"Nestlé\", \"L'Oréal\", \"LG\", \"Sony\", \"Coca-Cola\", \"Colgate\"",
                      "];",
                      "",
                      "// ✅ Select a random product and brand",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];",
                      "const selectedBrand = brands[Math.floor(Math.random() * brands.length)];",
                      "",
                      "// ✅ Append a random number to the product title to avoid duplication",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;",
                      "",
                      "// ✅ Generate dynamic product details",
                      "const costPrice = getRandomNumber(50, 500);",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice",
                      "",
                      "const productDetails = {",
                      "    title: uniqueTitle,  // Ensuring uniqueness",
                      "    description: selectedProduct.description,",
                      "    brandName: selectedBrand,",
                      "    model: `M${getRandomNumber(1000, 9999)}`,",
                      "    expiryDate: getRandomDate(new Date(2025, 0, 1), new Date(2030, 11, 31)), // Future date",
                      "    manufactureDate: getRandomDate(new Date(2023, 0, 1), new Date(2024, 11, 31)), // Past date",
                      "    isoNumber: getRandomNumber(1000, 9999).toString(),",
                      "    nafdacNumber: getRandomNumber(1000, 9999).toString(),",
                      "    quantity: getRandomNumber(1, 100),",
                      "    costPrice: costPrice,",
                      "    sellingPrice: sellingPrice, // Ensuring selling price is not less than cost price",
                      "    eanNumber: getRandomNumber(1000, 9999).toString(),",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),",
                      "    saleStart: getRandomDate(new Date(2024, 0, 1), new Date(2025, 11, 31)), // Future date",
                      "    saleEnd: getRandomDate(new Date(2025, 0, 1), new Date(2026, 11, 31)), // Future date",
                      "    imagePath: \"https://imagekit.io/tools/free-image-hosting/\" // Replace with dynamic upload if needed",
                      "};",
                      "",
                      "// ✅ Update form-data in the request body",
                      "pm.request.body.update({",
                      "    mode: \"formdata\",",
                      "    formdata: [",
                      "        { key: \"title\", value: productDetails.title, type: \"text\" },",
                      "        { key: \"description\", value: productDetails.description, type: \"text\" },",
                      "        { key: \"brandName\", value: productDetails.brandName, type: \"text\" },",
                      "        { key: \"model\", value: productDetails.model, type: \"text\" },",
                      "        { key: \"expiryDate\", value: productDetails.expiryDate, type: \"text\" },",
                      "        { key: \"manufactureDate\", value: productDetails.manufactureDate, type: \"text\" },",
                      "        { key: \"isoNumber\", value: productDetails.isoNumber, type: \"text\" },",
                      "        { key: \"nafdacNumber\", value: productDetails.nafdacNumber, type: \"text\" },",
                      "        { key: \"quantity\", value: productDetails.quantity.toString(), type: \"text\" },",
                      "        { key: \"costPrice\", value: productDetails.costPrice.toString(), type: \"text\" },",
                      "        { key: \"sellingPrice\", value: productDetails.sellingPrice.toString(), type: \"text\" },",
                      "        { key: \"eanNumber\", value: productDetails.eanNumber, type: \"text\" },",
                      "        { key: \"categoryId\", value: productDetails.categoryId, type: \"text\" },",
                      "        { key: \"saleStart\", value: productDetails.saleStart, type: \"text\" },",
                      "        { key: \"saleEnd\", value: productDetails.saleEnd, type: \"text\" },",
                      "        { key: \"images\", src: productDetails.imagePath, type: \"file\" }",
                      "    ]",
                      "});",
                      "",
                      "// ✅ Log generated data for debugging",
                      "console.log(\"🔹 Generated product details:\", productDetails);",
                      ""
                    ],
                    "_lastExecutionId": "00e3dc30-3389-43bf-b49f-67a7b839840d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "427614b5-9354-458b-bd1e-f7a3fc0dced7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response exists\r",
                      "pm.test(\"Response should be present\", function () {\r",
                      "    pm.response.to.have.status(200); // Corrected the expected status code\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse the response body\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// ✅ Define required fields\r",
                      "const requiredFields = [\r",
                      "    \"id\", \"title\", \"description\", \"brandName\", \"model\",\r",
                      "    \"expiryDate\", \"manufactureDate\", \"isoNumber\", \"nafdacNumber\",\r",
                      "    \"quantity\", \"costPrice\", \"sellingPrice\", \"eanNumber\", \"categoryId\",\r",
                      "    \"saleStart\", \"saleEnd\"\r",
                      "];\r",
                      "\r",
                      "// ✅ Check that required fields exist and are not empty\r",
                      "pm.test(\"Required fields should not be empty\", function () {\r",
                      "    requiredFields.forEach(field => {\r",
                      "        pm.expect(response.data).to.have.property(field);\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response.data[field]).to.not.be.null;\r",
                      "            pm.expect(response.data[field]).to.not.be.undefined;\r",
                      "\r",
                      "            // ✅ Check if string fields are not empty\r",
                      "            if (typeof response.data[field] === \"string\") {\r",
                      "                pm.expect(response.data[field].trim()).to.not.equal(\"\");\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if array fields are not empty\r",
                      "            if (Array.isArray(response.data[field])) {\r",
                      "                pm.expect(response.data[field].length).to.be.greaterThan(0);\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if numeric fields are valid\r",
                      "            if ([\"quantity\", \"costPrice\", \"sellingPrice\"].includes(field)) {\r",
                      "                pm.expect(response.data[field]).to.be.a(\"number\");\r",
                      "                pm.expect(response.data[field]).to.be.greaterThan(0);\r",
                      "            }\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate the response contains a success message\r",
                      "pm.test(\"Response should contain a success message\", function () {\r",
                      "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(response.message.toLowerCase()).to.include(\"success\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate that selling price is not lower than cost price\r",
                      "pm.test(\"Selling price should be greater than or equal to cost price\", function () {\r",
                      "    if (response.sellingPrice && response.costPrice) {\r",
                      "        pm.expect(response.sellingPrice).to.be.at.least(response.costPrice);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate dates are in YYYY-MM-DD format\r",
                      "pm.test(\"Dates should be in valid format\", function () {\r",
                      "    [\"expiryDate\", \"manufactureDate\", \"saleStart\", \"saleEnd\"].forEach(field => {\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Log response for debugging\r",
                      "console.log(\"🔹 Response Body:\", response);\r",
                      "\r",
                      "pm.environment.set(\"productId\", response?.data?.id); // Fixed the TypeError by using optional chaining\r",
                      ""
                    ],
                    "_lastExecutionId": "7fdcbba5-51d6-422a-9b89-b13427c00d13"
                  }
                }
              ]
            },
            {
              "id": "1558af38-c792-4986-9265-3a05664909f7",
              "name": "get products",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5acdbd07-8bbd-4e88-9ea6-c89fee8db72e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure\r",
                      "pm.test(\"Response contains an array of products\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"result\").that.is.an(\"array\");\r",
                      "\r",
                      "    let products = jsonData.data.result;\r",
                      "    \r",
                      "    if (products.length > 0) {\r",
                      "        let product = products[0];\r",
                      "        pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\"); // Adjusted type based on response\r",
                      "        pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Extract and store all unique product IDs\r",
                      "let products = jsonData.data?.result || [];\r",
                      "let existingIds = pm.environment.get(\"product_ids\");\r",
                      "existingIds = existingIds ? JSON.parse(existingIds) : [];\r",
                      "\r",
                      "let newProductIds = products.map(product => product.id);\r",
                      "\r",
                      "// ✅ Merge new IDs with existing ones and remove duplicates\r",
                      "let uniqueProductIds = [...new Set([...existingIds, ...newProductIds])];\r",
                      "\r",
                      "// ✅ Store updated product IDs in environment variable\r",
                      "pm.environment.set(\"product_ids\", JSON.stringify(uniqueProductIds));\r",
                      "\r",
                      "// ✅ Store first product ID separately for quick access\r",
                      "if (products.length > 0) {\r",
                      "    pm.environment.set(\"firstProductId\", products[0].id);\r",
                      "    console.log(\"First product ID stored:\", products[0].id);\r",
                      "}\r",
                      "\r",
                      "// ✅ Log the unique extracted product IDs for debugging\r",
                      "console.log(\"Extracted Product IDs:\", uniqueProductIds);\r",
                      "\r",
                      "// ✅ Test that product IDs are correctly stored\r",
                      "pm.test(\"Product IDs should be extracted, stored, and unique\", function () {\r",
                      "    pm.expect(uniqueProductIds).to.be.an(\"array\").that.is.not.empty;\r",
                      "    uniqueProductIds.forEach(id => pm.expect(id).to.be.a(\"string\").that.has.lengthOf(36)); // UUID validation\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ec167e80-cfe3-4cc1-ae4c-3eb9273e706d"
                  }
                }
              ]
            },
            {
              "id": "e87e3c10-3383-4997-996a-4557c70e7107",
              "name": "get product by ID",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3928b7d-bb79-44ad-8b81-032f3d61c9b9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid product ID\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid product ID\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "if (jsonData.success && jsonData.data) {\r",
                      "    let product = jsonData.data;\r",
                      "\r",
                      "    // ✅ Store key product details as environment variables\r",
                      "    pm.environment.set(\"productId\", product.id);\r",
                      "    pm.environment.set(\"productTitle\", product.title);\r",
                      "    pm.environment.set(\"productDescription\", product.description);\r",
                      "    pm.environment.set(\"brandName\", product.brandName);\r",
                      "    pm.environment.set(\"model\", product.model);\r",
                      "    pm.environment.set(\"expiryDate\", product.expiryDate);\r",
                      "    pm.environment.set(\"manufactureDate\", product.manufactureDate);\r",
                      "    pm.environment.set(\"quantity\", product.quantity);\r",
                      "    pm.environment.set(\"sellingPrice\", product.sellingPrice);\r",
                      "    pm.environment.set(\"costPrice\", product.costPrice);\r",
                      "    pm.environment.set(\"sku\", product.sku);\r",
                      "    pm.environment.set(\"eanNumber\", product.eanNumber);\r",
                      "    pm.environment.set(\"categoryId\", product.category.id);\r",
                      "    pm.environment.set(\"categoryName\", product.category.name);\r",
                      "    pm.environment.set(\"sellerEmail\", product.seller.email);\r",
                      "    pm.environment.set(\"sellerFullName\", product.seller.fullName);\r",
                      "    \r",
                      "    console.log(\"✅ Stored product details as environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"model\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"expiryDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"manufactureDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"quantity\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"costPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sku\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"eanNumber\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"category\").that.is.an(\"object\");\r",
                      "    pm.expect(product.category).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product.category).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"seller\").that.is.an(\"object\");\r",
                      "    pm.expect(product.seller).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                      "    pm.expect(product.seller).to.have.property(\"email\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"reviews\").that.is.an(\"object\");\r",
                      "    pm.expect(product.reviews).to.have.property(\"data\").that.is.an(\"array\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate numerical values (quantity, price)\r",
                      "pm.test(\"TC_003 - Ensure numerical values are correct\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.quantity).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.sellingPrice)).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.costPrice)).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate seller email format\r",
                      "pm.test(\"TC_004 - Validate seller email format\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.seller.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_005 - API response time should be within 1000ms\r",
                      "pm.test(\"TC_005 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "337313f0-1a4e-48a3-81fa-bec5badf73dc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c3857aad-3a03-42df-a3e2-96403f7309b0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "288a0e0e-2153-4c7d-bf64-14ea8b598e58"
                  }
                }
              ]
            },
            {
              "id": "c8b7578a-c912-43b2-a8df-f584d1599230",
              "name": "update product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "PUT",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset:utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product updated successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate updated product structure\r",
                      "pm.test(\"Response contains updated product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"price\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\").and.includes(\"http\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d046e760-dc6a-44b9-a725-667194ab3e82",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set\r",
                      "if (!pm.environment.get(\"authToken\")) {\r",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ Set Authorization Header\r",
                      "pm.request.headers.add({\r",
                      "    key: \"Authorization\",\r",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
                      "});\r",
                      "\r",
                      "// ✅ Function to generate a random number within a range\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// ✅ Predefined list of real product names and descriptions\r",
                      "const products = [\r",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },\r",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },\r",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },\r",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },\r",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },\r",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },\r",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },\r",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },\r",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },\r",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }\r",
                      "];\r",
                      "\r",
                      "// ✅ Select a random product\r",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];\r",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;\r",
                      "\r",
                      "// ✅ Generate dynamic cost and selling prices\r",
                      "const costPrice = getRandomNumber(50, 500);\r",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice\r",
                      "\r",
                      "// ✅ Fetch existing product details from environment variables\r",
                      "const productDetails = {\r",
                      "    title: uniqueTitle,  // Updating title\r",
                      "    description: selectedProduct.description, // Updating description\r",
                      "    brandName: pm.environment.get(\"brandName\") || \"DefaultBrand\",\r",
                      "    model: pm.environment.get(\"model\") || `M${getRandomNumber(1000, 9999)}`,\r",
                      "    expiryDate: pm.environment.get(\"expiryDate\") || \"2026-12-31T00:00:00.000Z\",\r",
                      "    manufactureDate: pm.environment.get(\"manufactureDate\") || \"2024-01-01T00:00:00.000Z\",\r",
                      "    isoNumber: pm.environment.get(\"isoNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    nafdacNumber: pm.environment.get(\"nafdacNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    quantity: pm.environment.get(\"quantity\") || getRandomNumber(1, 100),\r",
                      "    costPrice: costPrice.toString(), // Updating cost price\r",
                      "    sellingPrice: sellingPrice.toString(), // Updating selling price\r",
                      "    eanNumber: pm.environment.get(\"eanNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),\r",
                      "    saleStart: pm.environment.get(\"saleStart\") || \"2025-01-01T00:00:00.000Z\",\r",
                      "    saleEnd: pm.environment.get(\"saleEnd\") || \"2026-12-31T00:00:00.000Z\"\r",
                      "};\r",
                      "\r",
                      "// ✅ Update form-data in the request body (excluding images)\r",
                      "pm.request.body.update({\r",
                      "    mode: \"formdata\",\r",
                      "    formdata: Object.entries(productDetails).map(([key, value]) => ({\r",
                      "        key: key,\r",
                      "        value: value,\r",
                      "        type: \"text\"\r",
                      "    }))\r",
                      "});\r",
                      "\r",
                      "// ✅ Log generated data for debugging\r",
                      "console.log(\"🔹 Updated Product Details:\", productDetails);\r",
                      ""
                    ],
                    "_lastExecutionId": "4b89423d-5840-4106-a7ed-22222b02f904"
                  }
                }
              ]
            },
            {
              "id": "83efae9e-6fdb-489c-a62b-ec39aa817070",
              "name": "delete product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2e3e38f-f2f4-45ca-9a31-67a7b8df002d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate product data structure\r",
                      "pm.test(\"Response contains valid product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    \r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e4cbd781-c87b-4533-b4b1-cb5d3b8b43ee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5bd1202c-89cc-4b06-b701-f4ef429f75e9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Retrieve stored product IDs from the environment\r",
                      "let storedProductIds = pm.environment.get(\"product_ids\");\r",
                      "storedProductIds = storedProductIds ? JSON.parse(storedProductIds) : [];\r",
                      "\r",
                      "// ✅ Select a random product ID and store it before the request runs\r",
                      "if (storedProductIds.length > 0) {\r",
                      "    let randomIndex = Math.floor(Math.random() * storedProductIds.length);\r",
                      "    let randomProductId = storedProductIds[randomIndex];\r",
                      "\r",
                      "    // ✅ Store the selected product ID for use in the request\r",
                      "    pm.environment.set(\"randomProductId\", randomProductId);\r",
                      "    console.log(\"Randomly selected Product ID:\", randomProductId);\r",
                      "} else {\r",
                      "    console.warn(\"No stored product IDs available! Ensure the previous request fetched product IDs correctly.\");\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "23bd7d97-e382-4214-b968-09ce1c0c2dfe"
                  }
                }
              ]
            },
            {
              "id": "e7c6f7cf-f1fb-425f-9c69-f9ea93232803",
              "name": "Top brands",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "brands"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83c0d520-e58c-413f-ab9a-6a86fce39f05",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product top brand fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure (Array of Brands)\r",
                      "pm.test(\"Response contains an array of top brands\", function () {\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "\r",
                      "    if (jsonData.data.length > 0) {\r",
                      "        let brand = jsonData.data[0];\r",
                      "\r",
                      "        pm.expect(brand).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "        pm.expect(brand).to.have.property(\"count\").that.is.a(\"number\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store brand names for future use\r",
                      "if (jsonData.data.length > 0) {\r",
                      "    let brandNames = jsonData.data.map(brand => brand.brandName);\r",
                      "    pm.environment.set(\"brand_names\", JSON.stringify(brandNames));\r",
                      "    console.log(\"Stored brand names:\", brandNames);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "4158cfe7-cb1b-4531-9629-d21d38d52ec4"
                  }
                }
              ]
            },
            {
              "id": "f1be75de-bb8e-4f8c-990d-f9230ed0fc7d",
              "name": "search products",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "search"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"q\": \"LG\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70e98749-492d-42fd-b924-96dcad8f7dd5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid search query\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid search\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    let jsonData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate search query response does not return 404 or empty result set\r",
                      "pm.test(\"TC_003 - Valid search should not return 404 or empty result set\", function () {\r",
                      "    let data = pm.response.json().data;\r",
                      "    \r",
                      "    pm.expect(pm.response.code).not.to.eql(404);\r",
                      "    pm.expect(data.result.length).to.be.above(0, \"Search query should return at least one result\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate response time (Performance)\r",
                      "pm.test(\"TC_004 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a2806663-5e06-423a-9899-7ec1f8034045"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b7da7082-a2fd-48aa-984d-519a45109519",
          "length": 40,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b402b9bc-cdbe-4298-a385-7ffa371778b3",
          "scriptId": "427614b5-9354-458b-bd1e-f7a3fc0dced7",
          "execution": "7fdcbba5-51d6-422a-9b89-b13427c00d13"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response should contain a success message",
          "message": "expected 'an internal server error occurred' to include 'success'",
          "stack": "AssertionError: expected 'an internal server error occurred' to include 'success'\n   at Object.eval sandbox-script.js:3:28)",
          "checksum": "57f40add422d36483915aa7771fe3c07",
          "id": "971aa49c-f2de-4ff1-b1a6-4852e31e0dc0",
          "timestamp": 1747063088490,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 28,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "17690a3e-fa74-49f5-849f-3d412ec83d52",
          "name": "add product",
          "request": {
            "url": {
              "path": [
                "products"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{authToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c810435d-b1e8-4cc8-a896-155e37f6b598",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure Authorization Token is Set",
                  "if (!pm.environment.get(\"authToken\")) {",
                  "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");",
                  "}",
                  "",
                  "// ✅ Set Authorization Header",
                  "pm.request.headers.add({",
                  "    key: \"Authorization\",",
                  "    value: `Bearer ${pm.environment.get(\"authToken\")}`",
                  "});",
                  "",
                  "// ✅ Function to generate a random number within a range",
                  "function getRandomNumber(min, max) {",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                  "}",
                  "",
                  "// ✅ Function to generate a random date within a range",
                  "function getRandomDate(start, end) {",
                  "    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))",
                  "        .toISOString()",
                  "        .split(\"T\")[0]; // Returns in YYYY-MM-DD format",
                  "}",
                  "",
                  "// ✅ Predefined list of real product names and descriptions",
                  "const products = [",
                  "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },",
                  "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },",
                  "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },",
                  "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },",
                  "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },",
                  "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },",
                  "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },",
                  "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },",
                  "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },",
                  "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }",
                  "];",
                  "",
                  "// ✅ Predefined list of real brand names",
                  "const brands = [",
                  "    \"Nike\", \"Adidas\", \"Apple\", \"Samsung\", \"Nestlé\", \"L'Oréal\", \"LG\", \"Sony\", \"Coca-Cola\", \"Colgate\"",
                  "];",
                  "",
                  "// ✅ Select a random product and brand",
                  "const selectedProduct = products[Math.floor(Math.random() * products.length)];",
                  "const selectedBrand = brands[Math.floor(Math.random() * brands.length)];",
                  "",
                  "// ✅ Append a random number to the product title to avoid duplication",
                  "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;",
                  "",
                  "// ✅ Generate dynamic product details",
                  "const costPrice = getRandomNumber(50, 500);",
                  "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice",
                  "",
                  "const productDetails = {",
                  "    title: uniqueTitle,  // Ensuring uniqueness",
                  "    description: selectedProduct.description,",
                  "    brandName: selectedBrand,",
                  "    model: `M${getRandomNumber(1000, 9999)}`,",
                  "    expiryDate: getRandomDate(new Date(2025, 0, 1), new Date(2030, 11, 31)), // Future date",
                  "    manufactureDate: getRandomDate(new Date(2023, 0, 1), new Date(2024, 11, 31)), // Past date",
                  "    isoNumber: getRandomNumber(1000, 9999).toString(),",
                  "    nafdacNumber: getRandomNumber(1000, 9999).toString(),",
                  "    quantity: getRandomNumber(1, 100),",
                  "    costPrice: costPrice,",
                  "    sellingPrice: sellingPrice, // Ensuring selling price is not less than cost price",
                  "    eanNumber: getRandomNumber(1000, 9999).toString(),",
                  "    categoryId: pm.environment.get(\"categoryId4p\"),",
                  "    saleStart: getRandomDate(new Date(2024, 0, 1), new Date(2025, 11, 31)), // Future date",
                  "    saleEnd: getRandomDate(new Date(2025, 0, 1), new Date(2026, 11, 31)), // Future date",
                  "    imagePath: \"https://imagekit.io/tools/free-image-hosting/\" // Replace with dynamic upload if needed",
                  "};",
                  "",
                  "// ✅ Update form-data in the request body",
                  "pm.request.body.update({",
                  "    mode: \"formdata\",",
                  "    formdata: [",
                  "        { key: \"title\", value: productDetails.title, type: \"text\" },",
                  "        { key: \"description\", value: productDetails.description, type: \"text\" },",
                  "        { key: \"brandName\", value: productDetails.brandName, type: \"text\" },",
                  "        { key: \"model\", value: productDetails.model, type: \"text\" },",
                  "        { key: \"expiryDate\", value: productDetails.expiryDate, type: \"text\" },",
                  "        { key: \"manufactureDate\", value: productDetails.manufactureDate, type: \"text\" },",
                  "        { key: \"isoNumber\", value: productDetails.isoNumber, type: \"text\" },",
                  "        { key: \"nafdacNumber\", value: productDetails.nafdacNumber, type: \"text\" },",
                  "        { key: \"quantity\", value: productDetails.quantity.toString(), type: \"text\" },",
                  "        { key: \"costPrice\", value: productDetails.costPrice.toString(), type: \"text\" },",
                  "        { key: \"sellingPrice\", value: productDetails.sellingPrice.toString(), type: \"text\" },",
                  "        { key: \"eanNumber\", value: productDetails.eanNumber, type: \"text\" },",
                  "        { key: \"categoryId\", value: productDetails.categoryId, type: \"text\" },",
                  "        { key: \"saleStart\", value: productDetails.saleStart, type: \"text\" },",
                  "        { key: \"saleEnd\", value: productDetails.saleEnd, type: \"text\" },",
                  "        { key: \"images\", src: productDetails.imagePath, type: \"file\" }",
                  "    ]",
                  "});",
                  "",
                  "// ✅ Log generated data for debugging",
                  "console.log(\"🔹 Generated product details:\", productDetails);",
                  ""
                ],
                "_lastExecutionId": "00e3dc30-3389-43bf-b49f-67a7b839840d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "427614b5-9354-458b-bd1e-f7a3fc0dced7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response exists\r",
                  "pm.test(\"Response should be present\", function () {\r",
                  "    pm.response.to.have.status(200); // Corrected the expected status code\r",
                  "    pm.response.to.be.json;\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse the response body\r",
                  "let response = pm.response.json();\r",
                  "\r",
                  "// ✅ Define required fields\r",
                  "const requiredFields = [\r",
                  "    \"id\", \"title\", \"description\", \"brandName\", \"model\",\r",
                  "    \"expiryDate\", \"manufactureDate\", \"isoNumber\", \"nafdacNumber\",\r",
                  "    \"quantity\", \"costPrice\", \"sellingPrice\", \"eanNumber\", \"categoryId\",\r",
                  "    \"saleStart\", \"saleEnd\"\r",
                  "];\r",
                  "\r",
                  "// ✅ Check that required fields exist and are not empty\r",
                  "pm.test(\"Required fields should not be empty\", function () {\r",
                  "    requiredFields.forEach(field => {\r",
                  "        pm.expect(response.data).to.have.property(field);\r",
                  "        if (response[field]) {\r",
                  "            pm.expect(response.data[field]).to.not.be.null;\r",
                  "            pm.expect(response.data[field]).to.not.be.undefined;\r",
                  "\r",
                  "            // ✅ Check if string fields are not empty\r",
                  "            if (typeof response.data[field] === \"string\") {\r",
                  "                pm.expect(response.data[field].trim()).to.not.equal(\"\");\r",
                  "            }\r",
                  "\r",
                  "            // ✅ Check if array fields are not empty\r",
                  "            if (Array.isArray(response.data[field])) {\r",
                  "                pm.expect(response.data[field].length).to.be.greaterThan(0);\r",
                  "            }\r",
                  "\r",
                  "            // ✅ Check if numeric fields are valid\r",
                  "            if ([\"quantity\", \"costPrice\", \"sellingPrice\"].includes(field)) {\r",
                  "                pm.expect(response.data[field]).to.be.a(\"number\");\r",
                  "                pm.expect(response.data[field]).to.be.greaterThan(0);\r",
                  "            }\r",
                  "        }\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate the response contains a success message\r",
                  "pm.test(\"Response should contain a success message\", function () {\r",
                  "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                  "    pm.expect(response.message.toLowerCase()).to.include(\"success\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate that selling price is not lower than cost price\r",
                  "pm.test(\"Selling price should be greater than or equal to cost price\", function () {\r",
                  "    if (response.sellingPrice && response.costPrice) {\r",
                  "        pm.expect(response.sellingPrice).to.be.at.least(response.costPrice);\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate dates are in YYYY-MM-DD format\r",
                  "pm.test(\"Dates should be in valid format\", function () {\r",
                  "    [\"expiryDate\", \"manufactureDate\", \"saleStart\", \"saleEnd\"].forEach(field => {\r",
                  "        if (response[field]) {\r",
                  "            pm.expect(response[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                  "        }\r",
                  "    });\r",
                  "});\r",
                  "\r",
                  "// ✅ Log response for debugging\r",
                  "console.log(\"🔹 Response Body:\", response);\r",
                  "\r",
                  "pm.environment.set(\"productId\", response?.data?.id); // Fixed the TypeError by using optional chaining\r",
                  ""
                ],
                "_lastExecutionId": "7fdcbba5-51d6-422a-9b89-b13427c00d13"
              }
            }
          ]
        },
        "parent": {
          "id": "8b64db53-a9fa-473b-8cc6-96423e861533",
          "name": "product",
          "item": [
            {
              "id": "d8af0e9c-aa87-4e73-8e74-f42001b0f625",
              "name": "valid Sign In",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "signin",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{currentPayload}}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cab83c48-571c-4902-b4e7-02acc12dd018",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = {\r",
                      "    \"valid_login\": {\r",
                      "     \"email\": \"testog@e-record.com\",\r",
                      "    \"password\": \"Pass@12345\"\r",
                      "},\r",
                      "    \"missing_email\": { \r",
                      "        \"email\": \"\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"missing_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"\" \r",
                      "    },\r",
                      "    \"invalid_email_format\": { \r",
                      "        \"email\": \"invalid-email\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"incorrect_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"WrongPass123\" \r",
                      "    },\r",
                      "    \"unregistered_email\": { \r",
                      "        \"email\": \"unregistered@mail.com\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "// Get the current test case (default: valid_login)\r",
                      "let testCase = pm.environment.get(\"testCase\") || \"valid_login\";\r",
                      "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                      "\r",
                      "// Set request headers for tracking\r",
                      "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3967611-823a-4c6e-9ee2-a0f9fea65d93"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a359d213-bdc7-46a4-8889-efa1f73cc962",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                      "\r",
                      "const expectedStatus = {\r",
                      "    \"valid_login\": 200,\r",
                      "    \"missing_email\": 400,\r",
                      "    \"missing_password\": 400,\r",
                      "    \"invalid_email_format\": 400,\r",
                      "    \"incorrect_password\": 401,\r",
                      "    \"unregistered_email\": 404\r",
                      "};\r",
                      "\r",
                      "// ✅ Test Case 1: Validate Status Code\r",
                      "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                      "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                      "});\r",
                      "\r",
                      "// Handle successful login response\r",
                      "if (pm.response.code === 200) {\r",
                      "    // ✅ Test Case 2: Verify Success Field Value\r",
                      "    pm.test(\"Verify that the success field is true\", function () {\r",
                      "        pm.expect(response.success).to.eql(true);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 3: Check Message Field Value\r",
                      "    pm.test(\"Check that the message field is 'User sign in successful'\", function () {\r",
                      "        pm.expect(response.message).to.eql(\"User sign in successful\");\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 4: Validate Token Field\r",
                      "    pm.test(\"Validate that the token field is present and not empty\", function () {\r",
                      "        pm.expect(response.data.token).to.be.a('string');\r",
                      "        pm.expect(response.data.token.length).to.be.greaterThan(0);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 5: Verify Expiration Timestamp Format\r",
                      "    pm.test(\"Verify that the expiration timestamp is in ISO 8601 format\", function () {\r",
                      "        let expiresIn = response.data.expiresIn;\r",
                      "        pm.expect(new Date(expiresIn).toISOString()).to.eql(expiresIn);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 6: Validate User Data Fields\r",
                      "    pm.test(\"Validate that the user data fields are correct\", function () {\r",
                      "        let user = response.data.user;\r",
                      "        \r",
                      "        pm.expect(user.id).to.not.eql(null);\r",
                      "        pm.expect(user.email).to.not.eql(null);\r",
                      "        pm.expect(user.fullName).to.not.eql(null);\r",
                      "        pm.expect(user.firstName).to.not.eql(null);\r",
                      "        pm.expect(user.lastName).to.not.eql(null);\r",
                      "    });\r",
                      "\r",
                      "    pm.environment.set(\"userId\", response.data.user.id)\r",
                      "\r",
                      "    // ✅ Test Case 7: Verify KYC Status\r",
                      "    pm.test(\"Verify that the KYC status is false\", function () {\r",
                      "        pm.expect(response.data.user.kycCompleted).to.eql(false);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 9: Check Token Format (JWT)\r",
                      "    pm.test(\"Check that the token is in a valid JWT format\", function () {\r",
                      "        let token = response.data.token;\r",
                      "        let tokenParts = token.split('.');\r",
                      "\r",
                      "        pm.expect(tokenParts).to.have.lengthOf(3);\r",
                      "        pm.expect(tokenParts[0]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[1]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[2]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 10: Validate Response Time\r",
                      "    pm.test(\"Validate that the response time is less than 500ms\", function () {\r",
                      "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Store Auth Token for Future Requests\r",
                      "    pm.environment.set(\"authToken\", response.data.token);\r",
                      "} \r",
                      "// Handle error cases\r",
                      "else {\r",
                      "    pm.test(\"Response contains error message\", function () {\r",
                      "        pm.expect(response).to.have.property(\"error\");\r",
                      "        pm.expect(response.error).to.be.a(\"string\");\r",
                      "    });\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "9ac9fcb0-f51a-42f3-a3c8-2ef6c123219e"
                  }
                }
              ]
            },
            {
              "id": "17690a3e-fa74-49f5-849f-3d412ec83d52",
              "name": "add product",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c810435d-b1e8-4cc8-a896-155e37f6b598",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set",
                      "if (!pm.environment.get(\"authToken\")) {",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");",
                      "}",
                      "",
                      "// ✅ Set Authorization Header",
                      "pm.request.headers.add({",
                      "    key: \"Authorization\",",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`",
                      "});",
                      "",
                      "// ✅ Function to generate a random number within a range",
                      "function getRandomNumber(min, max) {",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                      "}",
                      "",
                      "// ✅ Function to generate a random date within a range",
                      "function getRandomDate(start, end) {",
                      "    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))",
                      "        .toISOString()",
                      "        .split(\"T\")[0]; // Returns in YYYY-MM-DD format",
                      "}",
                      "",
                      "// ✅ Predefined list of real product names and descriptions",
                      "const products = [",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }",
                      "];",
                      "",
                      "// ✅ Predefined list of real brand names",
                      "const brands = [",
                      "    \"Nike\", \"Adidas\", \"Apple\", \"Samsung\", \"Nestlé\", \"L'Oréal\", \"LG\", \"Sony\", \"Coca-Cola\", \"Colgate\"",
                      "];",
                      "",
                      "// ✅ Select a random product and brand",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];",
                      "const selectedBrand = brands[Math.floor(Math.random() * brands.length)];",
                      "",
                      "// ✅ Append a random number to the product title to avoid duplication",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;",
                      "",
                      "// ✅ Generate dynamic product details",
                      "const costPrice = getRandomNumber(50, 500);",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice",
                      "",
                      "const productDetails = {",
                      "    title: uniqueTitle,  // Ensuring uniqueness",
                      "    description: selectedProduct.description,",
                      "    brandName: selectedBrand,",
                      "    model: `M${getRandomNumber(1000, 9999)}`,",
                      "    expiryDate: getRandomDate(new Date(2025, 0, 1), new Date(2030, 11, 31)), // Future date",
                      "    manufactureDate: getRandomDate(new Date(2023, 0, 1), new Date(2024, 11, 31)), // Past date",
                      "    isoNumber: getRandomNumber(1000, 9999).toString(),",
                      "    nafdacNumber: getRandomNumber(1000, 9999).toString(),",
                      "    quantity: getRandomNumber(1, 100),",
                      "    costPrice: costPrice,",
                      "    sellingPrice: sellingPrice, // Ensuring selling price is not less than cost price",
                      "    eanNumber: getRandomNumber(1000, 9999).toString(),",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),",
                      "    saleStart: getRandomDate(new Date(2024, 0, 1), new Date(2025, 11, 31)), // Future date",
                      "    saleEnd: getRandomDate(new Date(2025, 0, 1), new Date(2026, 11, 31)), // Future date",
                      "    imagePath: \"https://imagekit.io/tools/free-image-hosting/\" // Replace with dynamic upload if needed",
                      "};",
                      "",
                      "// ✅ Update form-data in the request body",
                      "pm.request.body.update({",
                      "    mode: \"formdata\",",
                      "    formdata: [",
                      "        { key: \"title\", value: productDetails.title, type: \"text\" },",
                      "        { key: \"description\", value: productDetails.description, type: \"text\" },",
                      "        { key: \"brandName\", value: productDetails.brandName, type: \"text\" },",
                      "        { key: \"model\", value: productDetails.model, type: \"text\" },",
                      "        { key: \"expiryDate\", value: productDetails.expiryDate, type: \"text\" },",
                      "        { key: \"manufactureDate\", value: productDetails.manufactureDate, type: \"text\" },",
                      "        { key: \"isoNumber\", value: productDetails.isoNumber, type: \"text\" },",
                      "        { key: \"nafdacNumber\", value: productDetails.nafdacNumber, type: \"text\" },",
                      "        { key: \"quantity\", value: productDetails.quantity.toString(), type: \"text\" },",
                      "        { key: \"costPrice\", value: productDetails.costPrice.toString(), type: \"text\" },",
                      "        { key: \"sellingPrice\", value: productDetails.sellingPrice.toString(), type: \"text\" },",
                      "        { key: \"eanNumber\", value: productDetails.eanNumber, type: \"text\" },",
                      "        { key: \"categoryId\", value: productDetails.categoryId, type: \"text\" },",
                      "        { key: \"saleStart\", value: productDetails.saleStart, type: \"text\" },",
                      "        { key: \"saleEnd\", value: productDetails.saleEnd, type: \"text\" },",
                      "        { key: \"images\", src: productDetails.imagePath, type: \"file\" }",
                      "    ]",
                      "});",
                      "",
                      "// ✅ Log generated data for debugging",
                      "console.log(\"🔹 Generated product details:\", productDetails);",
                      ""
                    ],
                    "_lastExecutionId": "00e3dc30-3389-43bf-b49f-67a7b839840d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "427614b5-9354-458b-bd1e-f7a3fc0dced7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response exists\r",
                      "pm.test(\"Response should be present\", function () {\r",
                      "    pm.response.to.have.status(200); // Corrected the expected status code\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse the response body\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// ✅ Define required fields\r",
                      "const requiredFields = [\r",
                      "    \"id\", \"title\", \"description\", \"brandName\", \"model\",\r",
                      "    \"expiryDate\", \"manufactureDate\", \"isoNumber\", \"nafdacNumber\",\r",
                      "    \"quantity\", \"costPrice\", \"sellingPrice\", \"eanNumber\", \"categoryId\",\r",
                      "    \"saleStart\", \"saleEnd\"\r",
                      "];\r",
                      "\r",
                      "// ✅ Check that required fields exist and are not empty\r",
                      "pm.test(\"Required fields should not be empty\", function () {\r",
                      "    requiredFields.forEach(field => {\r",
                      "        pm.expect(response.data).to.have.property(field);\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response.data[field]).to.not.be.null;\r",
                      "            pm.expect(response.data[field]).to.not.be.undefined;\r",
                      "\r",
                      "            // ✅ Check if string fields are not empty\r",
                      "            if (typeof response.data[field] === \"string\") {\r",
                      "                pm.expect(response.data[field].trim()).to.not.equal(\"\");\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if array fields are not empty\r",
                      "            if (Array.isArray(response.data[field])) {\r",
                      "                pm.expect(response.data[field].length).to.be.greaterThan(0);\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if numeric fields are valid\r",
                      "            if ([\"quantity\", \"costPrice\", \"sellingPrice\"].includes(field)) {\r",
                      "                pm.expect(response.data[field]).to.be.a(\"number\");\r",
                      "                pm.expect(response.data[field]).to.be.greaterThan(0);\r",
                      "            }\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate the response contains a success message\r",
                      "pm.test(\"Response should contain a success message\", function () {\r",
                      "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(response.message.toLowerCase()).to.include(\"success\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate that selling price is not lower than cost price\r",
                      "pm.test(\"Selling price should be greater than or equal to cost price\", function () {\r",
                      "    if (response.sellingPrice && response.costPrice) {\r",
                      "        pm.expect(response.sellingPrice).to.be.at.least(response.costPrice);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate dates are in YYYY-MM-DD format\r",
                      "pm.test(\"Dates should be in valid format\", function () {\r",
                      "    [\"expiryDate\", \"manufactureDate\", \"saleStart\", \"saleEnd\"].forEach(field => {\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Log response for debugging\r",
                      "console.log(\"🔹 Response Body:\", response);\r",
                      "\r",
                      "pm.environment.set(\"productId\", response?.data?.id); // Fixed the TypeError by using optional chaining\r",
                      ""
                    ],
                    "_lastExecutionId": "7fdcbba5-51d6-422a-9b89-b13427c00d13"
                  }
                }
              ]
            },
            {
              "id": "1558af38-c792-4986-9265-3a05664909f7",
              "name": "get products",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5acdbd07-8bbd-4e88-9ea6-c89fee8db72e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure\r",
                      "pm.test(\"Response contains an array of products\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"result\").that.is.an(\"array\");\r",
                      "\r",
                      "    let products = jsonData.data.result;\r",
                      "    \r",
                      "    if (products.length > 0) {\r",
                      "        let product = products[0];\r",
                      "        pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\"); // Adjusted type based on response\r",
                      "        pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Extract and store all unique product IDs\r",
                      "let products = jsonData.data?.result || [];\r",
                      "let existingIds = pm.environment.get(\"product_ids\");\r",
                      "existingIds = existingIds ? JSON.parse(existingIds) : [];\r",
                      "\r",
                      "let newProductIds = products.map(product => product.id);\r",
                      "\r",
                      "// ✅ Merge new IDs with existing ones and remove duplicates\r",
                      "let uniqueProductIds = [...new Set([...existingIds, ...newProductIds])];\r",
                      "\r",
                      "// ✅ Store updated product IDs in environment variable\r",
                      "pm.environment.set(\"product_ids\", JSON.stringify(uniqueProductIds));\r",
                      "\r",
                      "// ✅ Store first product ID separately for quick access\r",
                      "if (products.length > 0) {\r",
                      "    pm.environment.set(\"firstProductId\", products[0].id);\r",
                      "    console.log(\"First product ID stored:\", products[0].id);\r",
                      "}\r",
                      "\r",
                      "// ✅ Log the unique extracted product IDs for debugging\r",
                      "console.log(\"Extracted Product IDs:\", uniqueProductIds);\r",
                      "\r",
                      "// ✅ Test that product IDs are correctly stored\r",
                      "pm.test(\"Product IDs should be extracted, stored, and unique\", function () {\r",
                      "    pm.expect(uniqueProductIds).to.be.an(\"array\").that.is.not.empty;\r",
                      "    uniqueProductIds.forEach(id => pm.expect(id).to.be.a(\"string\").that.has.lengthOf(36)); // UUID validation\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ec167e80-cfe3-4cc1-ae4c-3eb9273e706d"
                  }
                }
              ]
            },
            {
              "id": "e87e3c10-3383-4997-996a-4557c70e7107",
              "name": "get product by ID",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3928b7d-bb79-44ad-8b81-032f3d61c9b9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid product ID\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid product ID\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "if (jsonData.success && jsonData.data) {\r",
                      "    let product = jsonData.data;\r",
                      "\r",
                      "    // ✅ Store key product details as environment variables\r",
                      "    pm.environment.set(\"productId\", product.id);\r",
                      "    pm.environment.set(\"productTitle\", product.title);\r",
                      "    pm.environment.set(\"productDescription\", product.description);\r",
                      "    pm.environment.set(\"brandName\", product.brandName);\r",
                      "    pm.environment.set(\"model\", product.model);\r",
                      "    pm.environment.set(\"expiryDate\", product.expiryDate);\r",
                      "    pm.environment.set(\"manufactureDate\", product.manufactureDate);\r",
                      "    pm.environment.set(\"quantity\", product.quantity);\r",
                      "    pm.environment.set(\"sellingPrice\", product.sellingPrice);\r",
                      "    pm.environment.set(\"costPrice\", product.costPrice);\r",
                      "    pm.environment.set(\"sku\", product.sku);\r",
                      "    pm.environment.set(\"eanNumber\", product.eanNumber);\r",
                      "    pm.environment.set(\"categoryId\", product.category.id);\r",
                      "    pm.environment.set(\"categoryName\", product.category.name);\r",
                      "    pm.environment.set(\"sellerEmail\", product.seller.email);\r",
                      "    pm.environment.set(\"sellerFullName\", product.seller.fullName);\r",
                      "    \r",
                      "    console.log(\"✅ Stored product details as environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"model\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"expiryDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"manufactureDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"quantity\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"costPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sku\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"eanNumber\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"category\").that.is.an(\"object\");\r",
                      "    pm.expect(product.category).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product.category).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"seller\").that.is.an(\"object\");\r",
                      "    pm.expect(product.seller).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                      "    pm.expect(product.seller).to.have.property(\"email\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"reviews\").that.is.an(\"object\");\r",
                      "    pm.expect(product.reviews).to.have.property(\"data\").that.is.an(\"array\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate numerical values (quantity, price)\r",
                      "pm.test(\"TC_003 - Ensure numerical values are correct\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.quantity).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.sellingPrice)).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.costPrice)).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate seller email format\r",
                      "pm.test(\"TC_004 - Validate seller email format\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.seller.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_005 - API response time should be within 1000ms\r",
                      "pm.test(\"TC_005 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "337313f0-1a4e-48a3-81fa-bec5badf73dc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c3857aad-3a03-42df-a3e2-96403f7309b0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "288a0e0e-2153-4c7d-bf64-14ea8b598e58"
                  }
                }
              ]
            },
            {
              "id": "c8b7578a-c912-43b2-a8df-f584d1599230",
              "name": "update product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "PUT",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset:utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product updated successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate updated product structure\r",
                      "pm.test(\"Response contains updated product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"price\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\").and.includes(\"http\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d046e760-dc6a-44b9-a725-667194ab3e82",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set\r",
                      "if (!pm.environment.get(\"authToken\")) {\r",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ Set Authorization Header\r",
                      "pm.request.headers.add({\r",
                      "    key: \"Authorization\",\r",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
                      "});\r",
                      "\r",
                      "// ✅ Function to generate a random number within a range\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// ✅ Predefined list of real product names and descriptions\r",
                      "const products = [\r",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },\r",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },\r",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },\r",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },\r",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },\r",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },\r",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },\r",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },\r",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },\r",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }\r",
                      "];\r",
                      "\r",
                      "// ✅ Select a random product\r",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];\r",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;\r",
                      "\r",
                      "// ✅ Generate dynamic cost and selling prices\r",
                      "const costPrice = getRandomNumber(50, 500);\r",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice\r",
                      "\r",
                      "// ✅ Fetch existing product details from environment variables\r",
                      "const productDetails = {\r",
                      "    title: uniqueTitle,  // Updating title\r",
                      "    description: selectedProduct.description, // Updating description\r",
                      "    brandName: pm.environment.get(\"brandName\") || \"DefaultBrand\",\r",
                      "    model: pm.environment.get(\"model\") || `M${getRandomNumber(1000, 9999)}`,\r",
                      "    expiryDate: pm.environment.get(\"expiryDate\") || \"2026-12-31T00:00:00.000Z\",\r",
                      "    manufactureDate: pm.environment.get(\"manufactureDate\") || \"2024-01-01T00:00:00.000Z\",\r",
                      "    isoNumber: pm.environment.get(\"isoNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    nafdacNumber: pm.environment.get(\"nafdacNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    quantity: pm.environment.get(\"quantity\") || getRandomNumber(1, 100),\r",
                      "    costPrice: costPrice.toString(), // Updating cost price\r",
                      "    sellingPrice: sellingPrice.toString(), // Updating selling price\r",
                      "    eanNumber: pm.environment.get(\"eanNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),\r",
                      "    saleStart: pm.environment.get(\"saleStart\") || \"2025-01-01T00:00:00.000Z\",\r",
                      "    saleEnd: pm.environment.get(\"saleEnd\") || \"2026-12-31T00:00:00.000Z\"\r",
                      "};\r",
                      "\r",
                      "// ✅ Update form-data in the request body (excluding images)\r",
                      "pm.request.body.update({\r",
                      "    mode: \"formdata\",\r",
                      "    formdata: Object.entries(productDetails).map(([key, value]) => ({\r",
                      "        key: key,\r",
                      "        value: value,\r",
                      "        type: \"text\"\r",
                      "    }))\r",
                      "});\r",
                      "\r",
                      "// ✅ Log generated data for debugging\r",
                      "console.log(\"🔹 Updated Product Details:\", productDetails);\r",
                      ""
                    ],
                    "_lastExecutionId": "4b89423d-5840-4106-a7ed-22222b02f904"
                  }
                }
              ]
            },
            {
              "id": "83efae9e-6fdb-489c-a62b-ec39aa817070",
              "name": "delete product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2e3e38f-f2f4-45ca-9a31-67a7b8df002d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate product data structure\r",
                      "pm.test(\"Response contains valid product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    \r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e4cbd781-c87b-4533-b4b1-cb5d3b8b43ee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5bd1202c-89cc-4b06-b701-f4ef429f75e9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Retrieve stored product IDs from the environment\r",
                      "let storedProductIds = pm.environment.get(\"product_ids\");\r",
                      "storedProductIds = storedProductIds ? JSON.parse(storedProductIds) : [];\r",
                      "\r",
                      "// ✅ Select a random product ID and store it before the request runs\r",
                      "if (storedProductIds.length > 0) {\r",
                      "    let randomIndex = Math.floor(Math.random() * storedProductIds.length);\r",
                      "    let randomProductId = storedProductIds[randomIndex];\r",
                      "\r",
                      "    // ✅ Store the selected product ID for use in the request\r",
                      "    pm.environment.set(\"randomProductId\", randomProductId);\r",
                      "    console.log(\"Randomly selected Product ID:\", randomProductId);\r",
                      "} else {\r",
                      "    console.warn(\"No stored product IDs available! Ensure the previous request fetched product IDs correctly.\");\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "23bd7d97-e382-4214-b968-09ce1c0c2dfe"
                  }
                }
              ]
            },
            {
              "id": "e7c6f7cf-f1fb-425f-9c69-f9ea93232803",
              "name": "Top brands",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "brands"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83c0d520-e58c-413f-ab9a-6a86fce39f05",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product top brand fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure (Array of Brands)\r",
                      "pm.test(\"Response contains an array of top brands\", function () {\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "\r",
                      "    if (jsonData.data.length > 0) {\r",
                      "        let brand = jsonData.data[0];\r",
                      "\r",
                      "        pm.expect(brand).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "        pm.expect(brand).to.have.property(\"count\").that.is.a(\"number\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store brand names for future use\r",
                      "if (jsonData.data.length > 0) {\r",
                      "    let brandNames = jsonData.data.map(brand => brand.brandName);\r",
                      "    pm.environment.set(\"brand_names\", JSON.stringify(brandNames));\r",
                      "    console.log(\"Stored brand names:\", brandNames);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "4158cfe7-cb1b-4531-9629-d21d38d52ec4"
                  }
                }
              ]
            },
            {
              "id": "f1be75de-bb8e-4f8c-990d-f9230ed0fc7d",
              "name": "search products",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "search"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"q\": \"LG\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70e98749-492d-42fd-b924-96dcad8f7dd5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid search query\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid search\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    let jsonData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate search query response does not return 404 or empty result set\r",
                      "pm.test(\"TC_003 - Valid search should not return 404 or empty result set\", function () {\r",
                      "    let data = pm.response.json().data;\r",
                      "    \r",
                      "    pm.expect(pm.response.code).not.to.eql(404);\r",
                      "    pm.expect(data.result.length).to.be.above(0, \"Search query should return at least one result\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate response time (Performance)\r",
                      "pm.test(\"TC_004 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a2806663-5e06-423a-9899-7ec1f8034045"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b7da7082-a2fd-48aa-984d-519a45109519",
          "length": 40,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b402b9bc-cdbe-4298-a385-7ffa371778b3",
          "scriptId": "427614b5-9354-458b-bd1e-f7a3fc0dced7",
          "execution": "7fdcbba5-51d6-422a-9b89-b13427c00d13"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "TypeError",
          "message": "Cannot read properties of undefined (reading 'update')",
          "checksum": "4bf828083eab87ee4be22a00051b1e31",
          "id": "8d91dd09-9010-424e-aaf2-7495bb1b33c4",
          "timestamp": 1747063088768,
          "stacktrace": []
        },
        "at": "prerequest-script",
        "source": {
          "id": "c8b7578a-c912-43b2-a8df-f584d1599230",
          "name": "update product",
          "request": {
            "url": {
              "path": [
                "products",
                ":id"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "{{firstProductId}}",
                  "key": "id"
                }
              ]
            },
            "method": "PUT",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{authToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset:utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response message\r",
                  "pm.test(\"Response contains success message\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product updated successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate updated product structure\r",
                  "pm.test(\"Response contains updated product details\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"data\");\r",
                  "    let product = jsonData.data;\r",
                  "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"price\").that.is.a(\"number\");\r",
                  "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\").and.includes(\"http\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate authorization requirement\r",
                  "pm.test(\"Request requires authorization\", function () {\r",
                  "    pm.response.to.not.have.status(401);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d046e760-dc6a-44b9-a725-667194ab3e82",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure Authorization Token is Set\r",
                  "if (!pm.environment.get(\"authToken\")) {\r",
                  "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");\r",
                  "}\r",
                  "\r",
                  "// ✅ Set Authorization Header\r",
                  "pm.request.headers.add({\r",
                  "    key: \"Authorization\",\r",
                  "    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
                  "});\r",
                  "\r",
                  "// ✅ Function to generate a random number within a range\r",
                  "function getRandomNumber(min, max) {\r",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                  "}\r",
                  "\r",
                  "// ✅ Predefined list of real product names and descriptions\r",
                  "const products = [\r",
                  "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },\r",
                  "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },\r",
                  "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },\r",
                  "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },\r",
                  "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },\r",
                  "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },\r",
                  "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },\r",
                  "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },\r",
                  "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },\r",
                  "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }\r",
                  "];\r",
                  "\r",
                  "// ✅ Select a random product\r",
                  "const selectedProduct = products[Math.floor(Math.random() * products.length)];\r",
                  "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;\r",
                  "\r",
                  "// ✅ Generate dynamic cost and selling prices\r",
                  "const costPrice = getRandomNumber(50, 500);\r",
                  "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice\r",
                  "\r",
                  "// ✅ Fetch existing product details from environment variables\r",
                  "const productDetails = {\r",
                  "    title: uniqueTitle,  // Updating title\r",
                  "    description: selectedProduct.description, // Updating description\r",
                  "    brandName: pm.environment.get(\"brandName\") || \"DefaultBrand\",\r",
                  "    model: pm.environment.get(\"model\") || `M${getRandomNumber(1000, 9999)}`,\r",
                  "    expiryDate: pm.environment.get(\"expiryDate\") || \"2026-12-31T00:00:00.000Z\",\r",
                  "    manufactureDate: pm.environment.get(\"manufactureDate\") || \"2024-01-01T00:00:00.000Z\",\r",
                  "    isoNumber: pm.environment.get(\"isoNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                  "    nafdacNumber: pm.environment.get(\"nafdacNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                  "    quantity: pm.environment.get(\"quantity\") || getRandomNumber(1, 100),\r",
                  "    costPrice: costPrice.toString(), // Updating cost price\r",
                  "    sellingPrice: sellingPrice.toString(), // Updating selling price\r",
                  "    eanNumber: pm.environment.get(\"eanNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                  "    categoryId: pm.environment.get(\"categoryId4p\"),\r",
                  "    saleStart: pm.environment.get(\"saleStart\") || \"2025-01-01T00:00:00.000Z\",\r",
                  "    saleEnd: pm.environment.get(\"saleEnd\") || \"2026-12-31T00:00:00.000Z\"\r",
                  "};\r",
                  "\r",
                  "// ✅ Update form-data in the request body (excluding images)\r",
                  "pm.request.body.update({\r",
                  "    mode: \"formdata\",\r",
                  "    formdata: Object.entries(productDetails).map(([key, value]) => ({\r",
                  "        key: key,\r",
                  "        value: value,\r",
                  "        type: \"text\"\r",
                  "    }))\r",
                  "});\r",
                  "\r",
                  "// ✅ Log generated data for debugging\r",
                  "console.log(\"🔹 Updated Product Details:\", productDetails);\r",
                  ""
                ],
                "_lastExecutionId": "4b89423d-5840-4106-a7ed-22222b02f904"
              }
            }
          ]
        },
        "parent": {
          "id": "8b64db53-a9fa-473b-8cc6-96423e861533",
          "name": "product",
          "item": [
            {
              "id": "d8af0e9c-aa87-4e73-8e74-f42001b0f625",
              "name": "valid Sign In",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "signin",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{currentPayload}}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cab83c48-571c-4902-b4e7-02acc12dd018",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = {\r",
                      "    \"valid_login\": {\r",
                      "     \"email\": \"testog@e-record.com\",\r",
                      "    \"password\": \"Pass@12345\"\r",
                      "},\r",
                      "    \"missing_email\": { \r",
                      "        \"email\": \"\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"missing_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"\" \r",
                      "    },\r",
                      "    \"invalid_email_format\": { \r",
                      "        \"email\": \"invalid-email\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"incorrect_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"WrongPass123\" \r",
                      "    },\r",
                      "    \"unregistered_email\": { \r",
                      "        \"email\": \"unregistered@mail.com\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "// Get the current test case (default: valid_login)\r",
                      "let testCase = pm.environment.get(\"testCase\") || \"valid_login\";\r",
                      "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                      "\r",
                      "// Set request headers for tracking\r",
                      "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3967611-823a-4c6e-9ee2-a0f9fea65d93"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a359d213-bdc7-46a4-8889-efa1f73cc962",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                      "\r",
                      "const expectedStatus = {\r",
                      "    \"valid_login\": 200,\r",
                      "    \"missing_email\": 400,\r",
                      "    \"missing_password\": 400,\r",
                      "    \"invalid_email_format\": 400,\r",
                      "    \"incorrect_password\": 401,\r",
                      "    \"unregistered_email\": 404\r",
                      "};\r",
                      "\r",
                      "// ✅ Test Case 1: Validate Status Code\r",
                      "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                      "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                      "});\r",
                      "\r",
                      "// Handle successful login response\r",
                      "if (pm.response.code === 200) {\r",
                      "    // ✅ Test Case 2: Verify Success Field Value\r",
                      "    pm.test(\"Verify that the success field is true\", function () {\r",
                      "        pm.expect(response.success).to.eql(true);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 3: Check Message Field Value\r",
                      "    pm.test(\"Check that the message field is 'User sign in successful'\", function () {\r",
                      "        pm.expect(response.message).to.eql(\"User sign in successful\");\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 4: Validate Token Field\r",
                      "    pm.test(\"Validate that the token field is present and not empty\", function () {\r",
                      "        pm.expect(response.data.token).to.be.a('string');\r",
                      "        pm.expect(response.data.token.length).to.be.greaterThan(0);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 5: Verify Expiration Timestamp Format\r",
                      "    pm.test(\"Verify that the expiration timestamp is in ISO 8601 format\", function () {\r",
                      "        let expiresIn = response.data.expiresIn;\r",
                      "        pm.expect(new Date(expiresIn).toISOString()).to.eql(expiresIn);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 6: Validate User Data Fields\r",
                      "    pm.test(\"Validate that the user data fields are correct\", function () {\r",
                      "        let user = response.data.user;\r",
                      "        \r",
                      "        pm.expect(user.id).to.not.eql(null);\r",
                      "        pm.expect(user.email).to.not.eql(null);\r",
                      "        pm.expect(user.fullName).to.not.eql(null);\r",
                      "        pm.expect(user.firstName).to.not.eql(null);\r",
                      "        pm.expect(user.lastName).to.not.eql(null);\r",
                      "    });\r",
                      "\r",
                      "    pm.environment.set(\"userId\", response.data.user.id)\r",
                      "\r",
                      "    // ✅ Test Case 7: Verify KYC Status\r",
                      "    pm.test(\"Verify that the KYC status is false\", function () {\r",
                      "        pm.expect(response.data.user.kycCompleted).to.eql(false);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 9: Check Token Format (JWT)\r",
                      "    pm.test(\"Check that the token is in a valid JWT format\", function () {\r",
                      "        let token = response.data.token;\r",
                      "        let tokenParts = token.split('.');\r",
                      "\r",
                      "        pm.expect(tokenParts).to.have.lengthOf(3);\r",
                      "        pm.expect(tokenParts[0]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[1]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[2]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 10: Validate Response Time\r",
                      "    pm.test(\"Validate that the response time is less than 500ms\", function () {\r",
                      "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Store Auth Token for Future Requests\r",
                      "    pm.environment.set(\"authToken\", response.data.token);\r",
                      "} \r",
                      "// Handle error cases\r",
                      "else {\r",
                      "    pm.test(\"Response contains error message\", function () {\r",
                      "        pm.expect(response).to.have.property(\"error\");\r",
                      "        pm.expect(response.error).to.be.a(\"string\");\r",
                      "    });\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "9ac9fcb0-f51a-42f3-a3c8-2ef6c123219e"
                  }
                }
              ]
            },
            {
              "id": "17690a3e-fa74-49f5-849f-3d412ec83d52",
              "name": "add product",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c810435d-b1e8-4cc8-a896-155e37f6b598",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set",
                      "if (!pm.environment.get(\"authToken\")) {",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");",
                      "}",
                      "",
                      "// ✅ Set Authorization Header",
                      "pm.request.headers.add({",
                      "    key: \"Authorization\",",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`",
                      "});",
                      "",
                      "// ✅ Function to generate a random number within a range",
                      "function getRandomNumber(min, max) {",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                      "}",
                      "",
                      "// ✅ Function to generate a random date within a range",
                      "function getRandomDate(start, end) {",
                      "    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))",
                      "        .toISOString()",
                      "        .split(\"T\")[0]; // Returns in YYYY-MM-DD format",
                      "}",
                      "",
                      "// ✅ Predefined list of real product names and descriptions",
                      "const products = [",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }",
                      "];",
                      "",
                      "// ✅ Predefined list of real brand names",
                      "const brands = [",
                      "    \"Nike\", \"Adidas\", \"Apple\", \"Samsung\", \"Nestlé\", \"L'Oréal\", \"LG\", \"Sony\", \"Coca-Cola\", \"Colgate\"",
                      "];",
                      "",
                      "// ✅ Select a random product and brand",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];",
                      "const selectedBrand = brands[Math.floor(Math.random() * brands.length)];",
                      "",
                      "// ✅ Append a random number to the product title to avoid duplication",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;",
                      "",
                      "// ✅ Generate dynamic product details",
                      "const costPrice = getRandomNumber(50, 500);",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice",
                      "",
                      "const productDetails = {",
                      "    title: uniqueTitle,  // Ensuring uniqueness",
                      "    description: selectedProduct.description,",
                      "    brandName: selectedBrand,",
                      "    model: `M${getRandomNumber(1000, 9999)}`,",
                      "    expiryDate: getRandomDate(new Date(2025, 0, 1), new Date(2030, 11, 31)), // Future date",
                      "    manufactureDate: getRandomDate(new Date(2023, 0, 1), new Date(2024, 11, 31)), // Past date",
                      "    isoNumber: getRandomNumber(1000, 9999).toString(),",
                      "    nafdacNumber: getRandomNumber(1000, 9999).toString(),",
                      "    quantity: getRandomNumber(1, 100),",
                      "    costPrice: costPrice,",
                      "    sellingPrice: sellingPrice, // Ensuring selling price is not less than cost price",
                      "    eanNumber: getRandomNumber(1000, 9999).toString(),",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),",
                      "    saleStart: getRandomDate(new Date(2024, 0, 1), new Date(2025, 11, 31)), // Future date",
                      "    saleEnd: getRandomDate(new Date(2025, 0, 1), new Date(2026, 11, 31)), // Future date",
                      "    imagePath: \"https://imagekit.io/tools/free-image-hosting/\" // Replace with dynamic upload if needed",
                      "};",
                      "",
                      "// ✅ Update form-data in the request body",
                      "pm.request.body.update({",
                      "    mode: \"formdata\",",
                      "    formdata: [",
                      "        { key: \"title\", value: productDetails.title, type: \"text\" },",
                      "        { key: \"description\", value: productDetails.description, type: \"text\" },",
                      "        { key: \"brandName\", value: productDetails.brandName, type: \"text\" },",
                      "        { key: \"model\", value: productDetails.model, type: \"text\" },",
                      "        { key: \"expiryDate\", value: productDetails.expiryDate, type: \"text\" },",
                      "        { key: \"manufactureDate\", value: productDetails.manufactureDate, type: \"text\" },",
                      "        { key: \"isoNumber\", value: productDetails.isoNumber, type: \"text\" },",
                      "        { key: \"nafdacNumber\", value: productDetails.nafdacNumber, type: \"text\" },",
                      "        { key: \"quantity\", value: productDetails.quantity.toString(), type: \"text\" },",
                      "        { key: \"costPrice\", value: productDetails.costPrice.toString(), type: \"text\" },",
                      "        { key: \"sellingPrice\", value: productDetails.sellingPrice.toString(), type: \"text\" },",
                      "        { key: \"eanNumber\", value: productDetails.eanNumber, type: \"text\" },",
                      "        { key: \"categoryId\", value: productDetails.categoryId, type: \"text\" },",
                      "        { key: \"saleStart\", value: productDetails.saleStart, type: \"text\" },",
                      "        { key: \"saleEnd\", value: productDetails.saleEnd, type: \"text\" },",
                      "        { key: \"images\", src: productDetails.imagePath, type: \"file\" }",
                      "    ]",
                      "});",
                      "",
                      "// ✅ Log generated data for debugging",
                      "console.log(\"🔹 Generated product details:\", productDetails);",
                      ""
                    ],
                    "_lastExecutionId": "00e3dc30-3389-43bf-b49f-67a7b839840d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "427614b5-9354-458b-bd1e-f7a3fc0dced7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response exists\r",
                      "pm.test(\"Response should be present\", function () {\r",
                      "    pm.response.to.have.status(200); // Corrected the expected status code\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse the response body\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// ✅ Define required fields\r",
                      "const requiredFields = [\r",
                      "    \"id\", \"title\", \"description\", \"brandName\", \"model\",\r",
                      "    \"expiryDate\", \"manufactureDate\", \"isoNumber\", \"nafdacNumber\",\r",
                      "    \"quantity\", \"costPrice\", \"sellingPrice\", \"eanNumber\", \"categoryId\",\r",
                      "    \"saleStart\", \"saleEnd\"\r",
                      "];\r",
                      "\r",
                      "// ✅ Check that required fields exist and are not empty\r",
                      "pm.test(\"Required fields should not be empty\", function () {\r",
                      "    requiredFields.forEach(field => {\r",
                      "        pm.expect(response.data).to.have.property(field);\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response.data[field]).to.not.be.null;\r",
                      "            pm.expect(response.data[field]).to.not.be.undefined;\r",
                      "\r",
                      "            // ✅ Check if string fields are not empty\r",
                      "            if (typeof response.data[field] === \"string\") {\r",
                      "                pm.expect(response.data[field].trim()).to.not.equal(\"\");\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if array fields are not empty\r",
                      "            if (Array.isArray(response.data[field])) {\r",
                      "                pm.expect(response.data[field].length).to.be.greaterThan(0);\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if numeric fields are valid\r",
                      "            if ([\"quantity\", \"costPrice\", \"sellingPrice\"].includes(field)) {\r",
                      "                pm.expect(response.data[field]).to.be.a(\"number\");\r",
                      "                pm.expect(response.data[field]).to.be.greaterThan(0);\r",
                      "            }\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate the response contains a success message\r",
                      "pm.test(\"Response should contain a success message\", function () {\r",
                      "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(response.message.toLowerCase()).to.include(\"success\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate that selling price is not lower than cost price\r",
                      "pm.test(\"Selling price should be greater than or equal to cost price\", function () {\r",
                      "    if (response.sellingPrice && response.costPrice) {\r",
                      "        pm.expect(response.sellingPrice).to.be.at.least(response.costPrice);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate dates are in YYYY-MM-DD format\r",
                      "pm.test(\"Dates should be in valid format\", function () {\r",
                      "    [\"expiryDate\", \"manufactureDate\", \"saleStart\", \"saleEnd\"].forEach(field => {\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Log response for debugging\r",
                      "console.log(\"🔹 Response Body:\", response);\r",
                      "\r",
                      "pm.environment.set(\"productId\", response?.data?.id); // Fixed the TypeError by using optional chaining\r",
                      ""
                    ],
                    "_lastExecutionId": "7fdcbba5-51d6-422a-9b89-b13427c00d13"
                  }
                }
              ]
            },
            {
              "id": "1558af38-c792-4986-9265-3a05664909f7",
              "name": "get products",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5acdbd07-8bbd-4e88-9ea6-c89fee8db72e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure\r",
                      "pm.test(\"Response contains an array of products\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"result\").that.is.an(\"array\");\r",
                      "\r",
                      "    let products = jsonData.data.result;\r",
                      "    \r",
                      "    if (products.length > 0) {\r",
                      "        let product = products[0];\r",
                      "        pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\"); // Adjusted type based on response\r",
                      "        pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Extract and store all unique product IDs\r",
                      "let products = jsonData.data?.result || [];\r",
                      "let existingIds = pm.environment.get(\"product_ids\");\r",
                      "existingIds = existingIds ? JSON.parse(existingIds) : [];\r",
                      "\r",
                      "let newProductIds = products.map(product => product.id);\r",
                      "\r",
                      "// ✅ Merge new IDs with existing ones and remove duplicates\r",
                      "let uniqueProductIds = [...new Set([...existingIds, ...newProductIds])];\r",
                      "\r",
                      "// ✅ Store updated product IDs in environment variable\r",
                      "pm.environment.set(\"product_ids\", JSON.stringify(uniqueProductIds));\r",
                      "\r",
                      "// ✅ Store first product ID separately for quick access\r",
                      "if (products.length > 0) {\r",
                      "    pm.environment.set(\"firstProductId\", products[0].id);\r",
                      "    console.log(\"First product ID stored:\", products[0].id);\r",
                      "}\r",
                      "\r",
                      "// ✅ Log the unique extracted product IDs for debugging\r",
                      "console.log(\"Extracted Product IDs:\", uniqueProductIds);\r",
                      "\r",
                      "// ✅ Test that product IDs are correctly stored\r",
                      "pm.test(\"Product IDs should be extracted, stored, and unique\", function () {\r",
                      "    pm.expect(uniqueProductIds).to.be.an(\"array\").that.is.not.empty;\r",
                      "    uniqueProductIds.forEach(id => pm.expect(id).to.be.a(\"string\").that.has.lengthOf(36)); // UUID validation\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ec167e80-cfe3-4cc1-ae4c-3eb9273e706d"
                  }
                }
              ]
            },
            {
              "id": "e87e3c10-3383-4997-996a-4557c70e7107",
              "name": "get product by ID",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3928b7d-bb79-44ad-8b81-032f3d61c9b9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid product ID\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid product ID\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "if (jsonData.success && jsonData.data) {\r",
                      "    let product = jsonData.data;\r",
                      "\r",
                      "    // ✅ Store key product details as environment variables\r",
                      "    pm.environment.set(\"productId\", product.id);\r",
                      "    pm.environment.set(\"productTitle\", product.title);\r",
                      "    pm.environment.set(\"productDescription\", product.description);\r",
                      "    pm.environment.set(\"brandName\", product.brandName);\r",
                      "    pm.environment.set(\"model\", product.model);\r",
                      "    pm.environment.set(\"expiryDate\", product.expiryDate);\r",
                      "    pm.environment.set(\"manufactureDate\", product.manufactureDate);\r",
                      "    pm.environment.set(\"quantity\", product.quantity);\r",
                      "    pm.environment.set(\"sellingPrice\", product.sellingPrice);\r",
                      "    pm.environment.set(\"costPrice\", product.costPrice);\r",
                      "    pm.environment.set(\"sku\", product.sku);\r",
                      "    pm.environment.set(\"eanNumber\", product.eanNumber);\r",
                      "    pm.environment.set(\"categoryId\", product.category.id);\r",
                      "    pm.environment.set(\"categoryName\", product.category.name);\r",
                      "    pm.environment.set(\"sellerEmail\", product.seller.email);\r",
                      "    pm.environment.set(\"sellerFullName\", product.seller.fullName);\r",
                      "    \r",
                      "    console.log(\"✅ Stored product details as environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"model\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"expiryDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"manufactureDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"quantity\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"costPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sku\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"eanNumber\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"category\").that.is.an(\"object\");\r",
                      "    pm.expect(product.category).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product.category).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"seller\").that.is.an(\"object\");\r",
                      "    pm.expect(product.seller).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                      "    pm.expect(product.seller).to.have.property(\"email\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"reviews\").that.is.an(\"object\");\r",
                      "    pm.expect(product.reviews).to.have.property(\"data\").that.is.an(\"array\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate numerical values (quantity, price)\r",
                      "pm.test(\"TC_003 - Ensure numerical values are correct\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.quantity).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.sellingPrice)).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.costPrice)).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate seller email format\r",
                      "pm.test(\"TC_004 - Validate seller email format\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.seller.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_005 - API response time should be within 1000ms\r",
                      "pm.test(\"TC_005 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "337313f0-1a4e-48a3-81fa-bec5badf73dc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c3857aad-3a03-42df-a3e2-96403f7309b0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "288a0e0e-2153-4c7d-bf64-14ea8b598e58"
                  }
                }
              ]
            },
            {
              "id": "c8b7578a-c912-43b2-a8df-f584d1599230",
              "name": "update product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "PUT",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset:utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product updated successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate updated product structure\r",
                      "pm.test(\"Response contains updated product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"price\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\").and.includes(\"http\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d046e760-dc6a-44b9-a725-667194ab3e82",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set\r",
                      "if (!pm.environment.get(\"authToken\")) {\r",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ Set Authorization Header\r",
                      "pm.request.headers.add({\r",
                      "    key: \"Authorization\",\r",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
                      "});\r",
                      "\r",
                      "// ✅ Function to generate a random number within a range\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// ✅ Predefined list of real product names and descriptions\r",
                      "const products = [\r",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },\r",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },\r",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },\r",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },\r",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },\r",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },\r",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },\r",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },\r",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },\r",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }\r",
                      "];\r",
                      "\r",
                      "// ✅ Select a random product\r",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];\r",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;\r",
                      "\r",
                      "// ✅ Generate dynamic cost and selling prices\r",
                      "const costPrice = getRandomNumber(50, 500);\r",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice\r",
                      "\r",
                      "// ✅ Fetch existing product details from environment variables\r",
                      "const productDetails = {\r",
                      "    title: uniqueTitle,  // Updating title\r",
                      "    description: selectedProduct.description, // Updating description\r",
                      "    brandName: pm.environment.get(\"brandName\") || \"DefaultBrand\",\r",
                      "    model: pm.environment.get(\"model\") || `M${getRandomNumber(1000, 9999)}`,\r",
                      "    expiryDate: pm.environment.get(\"expiryDate\") || \"2026-12-31T00:00:00.000Z\",\r",
                      "    manufactureDate: pm.environment.get(\"manufactureDate\") || \"2024-01-01T00:00:00.000Z\",\r",
                      "    isoNumber: pm.environment.get(\"isoNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    nafdacNumber: pm.environment.get(\"nafdacNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    quantity: pm.environment.get(\"quantity\") || getRandomNumber(1, 100),\r",
                      "    costPrice: costPrice.toString(), // Updating cost price\r",
                      "    sellingPrice: sellingPrice.toString(), // Updating selling price\r",
                      "    eanNumber: pm.environment.get(\"eanNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),\r",
                      "    saleStart: pm.environment.get(\"saleStart\") || \"2025-01-01T00:00:00.000Z\",\r",
                      "    saleEnd: pm.environment.get(\"saleEnd\") || \"2026-12-31T00:00:00.000Z\"\r",
                      "};\r",
                      "\r",
                      "// ✅ Update form-data in the request body (excluding images)\r",
                      "pm.request.body.update({\r",
                      "    mode: \"formdata\",\r",
                      "    formdata: Object.entries(productDetails).map(([key, value]) => ({\r",
                      "        key: key,\r",
                      "        value: value,\r",
                      "        type: \"text\"\r",
                      "    }))\r",
                      "});\r",
                      "\r",
                      "// ✅ Log generated data for debugging\r",
                      "console.log(\"🔹 Updated Product Details:\", productDetails);\r",
                      ""
                    ],
                    "_lastExecutionId": "4b89423d-5840-4106-a7ed-22222b02f904"
                  }
                }
              ]
            },
            {
              "id": "83efae9e-6fdb-489c-a62b-ec39aa817070",
              "name": "delete product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2e3e38f-f2f4-45ca-9a31-67a7b8df002d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate product data structure\r",
                      "pm.test(\"Response contains valid product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    \r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e4cbd781-c87b-4533-b4b1-cb5d3b8b43ee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5bd1202c-89cc-4b06-b701-f4ef429f75e9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Retrieve stored product IDs from the environment\r",
                      "let storedProductIds = pm.environment.get(\"product_ids\");\r",
                      "storedProductIds = storedProductIds ? JSON.parse(storedProductIds) : [];\r",
                      "\r",
                      "// ✅ Select a random product ID and store it before the request runs\r",
                      "if (storedProductIds.length > 0) {\r",
                      "    let randomIndex = Math.floor(Math.random() * storedProductIds.length);\r",
                      "    let randomProductId = storedProductIds[randomIndex];\r",
                      "\r",
                      "    // ✅ Store the selected product ID for use in the request\r",
                      "    pm.environment.set(\"randomProductId\", randomProductId);\r",
                      "    console.log(\"Randomly selected Product ID:\", randomProductId);\r",
                      "} else {\r",
                      "    console.warn(\"No stored product IDs available! Ensure the previous request fetched product IDs correctly.\");\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "23bd7d97-e382-4214-b968-09ce1c0c2dfe"
                  }
                }
              ]
            },
            {
              "id": "e7c6f7cf-f1fb-425f-9c69-f9ea93232803",
              "name": "Top brands",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "brands"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83c0d520-e58c-413f-ab9a-6a86fce39f05",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product top brand fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure (Array of Brands)\r",
                      "pm.test(\"Response contains an array of top brands\", function () {\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "\r",
                      "    if (jsonData.data.length > 0) {\r",
                      "        let brand = jsonData.data[0];\r",
                      "\r",
                      "        pm.expect(brand).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "        pm.expect(brand).to.have.property(\"count\").that.is.a(\"number\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store brand names for future use\r",
                      "if (jsonData.data.length > 0) {\r",
                      "    let brandNames = jsonData.data.map(brand => brand.brandName);\r",
                      "    pm.environment.set(\"brand_names\", JSON.stringify(brandNames));\r",
                      "    console.log(\"Stored brand names:\", brandNames);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "4158cfe7-cb1b-4531-9629-d21d38d52ec4"
                  }
                }
              ]
            },
            {
              "id": "f1be75de-bb8e-4f8c-990d-f9230ed0fc7d",
              "name": "search products",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "search"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"q\": \"LG\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70e98749-492d-42fd-b924-96dcad8f7dd5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid search query\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid search\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    let jsonData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate search query response does not return 404 or empty result set\r",
                      "pm.test(\"TC_003 - Valid search should not return 404 or empty result set\", function () {\r",
                      "    let data = pm.response.json().data;\r",
                      "    \r",
                      "    pm.expect(pm.response.code).not.to.eql(404);\r",
                      "    pm.expect(data.result.length).to.be.above(0, \"Search query should return at least one result\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate response time (Performance)\r",
                      "pm.test(\"TC_004 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a2806663-5e06-423a-9899-7ec1f8034045"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "dd217f2b-f9e3-4a97-ba87-ccb856e7a792",
          "length": 40,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "scriptId": "d046e760-dc6a-44b9-a725-667194ab3e82"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Response is in JSON format",
          "message": "expected 'Content-Type' response header to be 'application/json; charset:utf-8' but got 'application/json; charset=utf-8'",
          "stack": "AssertionError: expected 'Content-Type' response header to be 'application/json; charset:utf-8' but got 'application/json; charset=utf-8'\n   at Object.eval sandbox-script.js:1:31)",
          "checksum": "ac105cef061231f7ba19d0ae29df0b74",
          "id": "b8bc20ea-829e-46bc-81cf-32bfb3d63097",
          "timestamp": 1747063088877,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 31,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c8b7578a-c912-43b2-a8df-f584d1599230",
          "name": "update product",
          "request": {
            "url": {
              "path": [
                "products",
                ":id"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "{{firstProductId}}",
                  "key": "id"
                }
              ]
            },
            "method": "PUT",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{authToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset:utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response message\r",
                  "pm.test(\"Response contains success message\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product updated successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate updated product structure\r",
                  "pm.test(\"Response contains updated product details\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"data\");\r",
                  "    let product = jsonData.data;\r",
                  "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"price\").that.is.a(\"number\");\r",
                  "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\").and.includes(\"http\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate authorization requirement\r",
                  "pm.test(\"Request requires authorization\", function () {\r",
                  "    pm.response.to.not.have.status(401);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d046e760-dc6a-44b9-a725-667194ab3e82",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure Authorization Token is Set\r",
                  "if (!pm.environment.get(\"authToken\")) {\r",
                  "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");\r",
                  "}\r",
                  "\r",
                  "// ✅ Set Authorization Header\r",
                  "pm.request.headers.add({\r",
                  "    key: \"Authorization\",\r",
                  "    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
                  "});\r",
                  "\r",
                  "// ✅ Function to generate a random number within a range\r",
                  "function getRandomNumber(min, max) {\r",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                  "}\r",
                  "\r",
                  "// ✅ Predefined list of real product names and descriptions\r",
                  "const products = [\r",
                  "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },\r",
                  "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },\r",
                  "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },\r",
                  "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },\r",
                  "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },\r",
                  "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },\r",
                  "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },\r",
                  "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },\r",
                  "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },\r",
                  "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }\r",
                  "];\r",
                  "\r",
                  "// ✅ Select a random product\r",
                  "const selectedProduct = products[Math.floor(Math.random() * products.length)];\r",
                  "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;\r",
                  "\r",
                  "// ✅ Generate dynamic cost and selling prices\r",
                  "const costPrice = getRandomNumber(50, 500);\r",
                  "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice\r",
                  "\r",
                  "// ✅ Fetch existing product details from environment variables\r",
                  "const productDetails = {\r",
                  "    title: uniqueTitle,  // Updating title\r",
                  "    description: selectedProduct.description, // Updating description\r",
                  "    brandName: pm.environment.get(\"brandName\") || \"DefaultBrand\",\r",
                  "    model: pm.environment.get(\"model\") || `M${getRandomNumber(1000, 9999)}`,\r",
                  "    expiryDate: pm.environment.get(\"expiryDate\") || \"2026-12-31T00:00:00.000Z\",\r",
                  "    manufactureDate: pm.environment.get(\"manufactureDate\") || \"2024-01-01T00:00:00.000Z\",\r",
                  "    isoNumber: pm.environment.get(\"isoNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                  "    nafdacNumber: pm.environment.get(\"nafdacNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                  "    quantity: pm.environment.get(\"quantity\") || getRandomNumber(1, 100),\r",
                  "    costPrice: costPrice.toString(), // Updating cost price\r",
                  "    sellingPrice: sellingPrice.toString(), // Updating selling price\r",
                  "    eanNumber: pm.environment.get(\"eanNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                  "    categoryId: pm.environment.get(\"categoryId4p\"),\r",
                  "    saleStart: pm.environment.get(\"saleStart\") || \"2025-01-01T00:00:00.000Z\",\r",
                  "    saleEnd: pm.environment.get(\"saleEnd\") || \"2026-12-31T00:00:00.000Z\"\r",
                  "};\r",
                  "\r",
                  "// ✅ Update form-data in the request body (excluding images)\r",
                  "pm.request.body.update({\r",
                  "    mode: \"formdata\",\r",
                  "    formdata: Object.entries(productDetails).map(([key, value]) => ({\r",
                  "        key: key,\r",
                  "        value: value,\r",
                  "        type: \"text\"\r",
                  "    }))\r",
                  "});\r",
                  "\r",
                  "// ✅ Log generated data for debugging\r",
                  "console.log(\"🔹 Updated Product Details:\", productDetails);\r",
                  ""
                ],
                "_lastExecutionId": "4b89423d-5840-4106-a7ed-22222b02f904"
              }
            }
          ]
        },
        "parent": {
          "id": "8b64db53-a9fa-473b-8cc6-96423e861533",
          "name": "product",
          "item": [
            {
              "id": "d8af0e9c-aa87-4e73-8e74-f42001b0f625",
              "name": "valid Sign In",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "signin",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{currentPayload}}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cab83c48-571c-4902-b4e7-02acc12dd018",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = {\r",
                      "    \"valid_login\": {\r",
                      "     \"email\": \"testog@e-record.com\",\r",
                      "    \"password\": \"Pass@12345\"\r",
                      "},\r",
                      "    \"missing_email\": { \r",
                      "        \"email\": \"\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"missing_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"\" \r",
                      "    },\r",
                      "    \"invalid_email_format\": { \r",
                      "        \"email\": \"invalid-email\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"incorrect_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"WrongPass123\" \r",
                      "    },\r",
                      "    \"unregistered_email\": { \r",
                      "        \"email\": \"unregistered@mail.com\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "// Get the current test case (default: valid_login)\r",
                      "let testCase = pm.environment.get(\"testCase\") || \"valid_login\";\r",
                      "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                      "\r",
                      "// Set request headers for tracking\r",
                      "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3967611-823a-4c6e-9ee2-a0f9fea65d93"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a359d213-bdc7-46a4-8889-efa1f73cc962",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                      "\r",
                      "const expectedStatus = {\r",
                      "    \"valid_login\": 200,\r",
                      "    \"missing_email\": 400,\r",
                      "    \"missing_password\": 400,\r",
                      "    \"invalid_email_format\": 400,\r",
                      "    \"incorrect_password\": 401,\r",
                      "    \"unregistered_email\": 404\r",
                      "};\r",
                      "\r",
                      "// ✅ Test Case 1: Validate Status Code\r",
                      "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                      "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                      "});\r",
                      "\r",
                      "// Handle successful login response\r",
                      "if (pm.response.code === 200) {\r",
                      "    // ✅ Test Case 2: Verify Success Field Value\r",
                      "    pm.test(\"Verify that the success field is true\", function () {\r",
                      "        pm.expect(response.success).to.eql(true);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 3: Check Message Field Value\r",
                      "    pm.test(\"Check that the message field is 'User sign in successful'\", function () {\r",
                      "        pm.expect(response.message).to.eql(\"User sign in successful\");\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 4: Validate Token Field\r",
                      "    pm.test(\"Validate that the token field is present and not empty\", function () {\r",
                      "        pm.expect(response.data.token).to.be.a('string');\r",
                      "        pm.expect(response.data.token.length).to.be.greaterThan(0);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 5: Verify Expiration Timestamp Format\r",
                      "    pm.test(\"Verify that the expiration timestamp is in ISO 8601 format\", function () {\r",
                      "        let expiresIn = response.data.expiresIn;\r",
                      "        pm.expect(new Date(expiresIn).toISOString()).to.eql(expiresIn);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 6: Validate User Data Fields\r",
                      "    pm.test(\"Validate that the user data fields are correct\", function () {\r",
                      "        let user = response.data.user;\r",
                      "        \r",
                      "        pm.expect(user.id).to.not.eql(null);\r",
                      "        pm.expect(user.email).to.not.eql(null);\r",
                      "        pm.expect(user.fullName).to.not.eql(null);\r",
                      "        pm.expect(user.firstName).to.not.eql(null);\r",
                      "        pm.expect(user.lastName).to.not.eql(null);\r",
                      "    });\r",
                      "\r",
                      "    pm.environment.set(\"userId\", response.data.user.id)\r",
                      "\r",
                      "    // ✅ Test Case 7: Verify KYC Status\r",
                      "    pm.test(\"Verify that the KYC status is false\", function () {\r",
                      "        pm.expect(response.data.user.kycCompleted).to.eql(false);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 9: Check Token Format (JWT)\r",
                      "    pm.test(\"Check that the token is in a valid JWT format\", function () {\r",
                      "        let token = response.data.token;\r",
                      "        let tokenParts = token.split('.');\r",
                      "\r",
                      "        pm.expect(tokenParts).to.have.lengthOf(3);\r",
                      "        pm.expect(tokenParts[0]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[1]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[2]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 10: Validate Response Time\r",
                      "    pm.test(\"Validate that the response time is less than 500ms\", function () {\r",
                      "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Store Auth Token for Future Requests\r",
                      "    pm.environment.set(\"authToken\", response.data.token);\r",
                      "} \r",
                      "// Handle error cases\r",
                      "else {\r",
                      "    pm.test(\"Response contains error message\", function () {\r",
                      "        pm.expect(response).to.have.property(\"error\");\r",
                      "        pm.expect(response.error).to.be.a(\"string\");\r",
                      "    });\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "9ac9fcb0-f51a-42f3-a3c8-2ef6c123219e"
                  }
                }
              ]
            },
            {
              "id": "17690a3e-fa74-49f5-849f-3d412ec83d52",
              "name": "add product",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c810435d-b1e8-4cc8-a896-155e37f6b598",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set",
                      "if (!pm.environment.get(\"authToken\")) {",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");",
                      "}",
                      "",
                      "// ✅ Set Authorization Header",
                      "pm.request.headers.add({",
                      "    key: \"Authorization\",",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`",
                      "});",
                      "",
                      "// ✅ Function to generate a random number within a range",
                      "function getRandomNumber(min, max) {",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                      "}",
                      "",
                      "// ✅ Function to generate a random date within a range",
                      "function getRandomDate(start, end) {",
                      "    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))",
                      "        .toISOString()",
                      "        .split(\"T\")[0]; // Returns in YYYY-MM-DD format",
                      "}",
                      "",
                      "// ✅ Predefined list of real product names and descriptions",
                      "const products = [",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }",
                      "];",
                      "",
                      "// ✅ Predefined list of real brand names",
                      "const brands = [",
                      "    \"Nike\", \"Adidas\", \"Apple\", \"Samsung\", \"Nestlé\", \"L'Oréal\", \"LG\", \"Sony\", \"Coca-Cola\", \"Colgate\"",
                      "];",
                      "",
                      "// ✅ Select a random product and brand",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];",
                      "const selectedBrand = brands[Math.floor(Math.random() * brands.length)];",
                      "",
                      "// ✅ Append a random number to the product title to avoid duplication",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;",
                      "",
                      "// ✅ Generate dynamic product details",
                      "const costPrice = getRandomNumber(50, 500);",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice",
                      "",
                      "const productDetails = {",
                      "    title: uniqueTitle,  // Ensuring uniqueness",
                      "    description: selectedProduct.description,",
                      "    brandName: selectedBrand,",
                      "    model: `M${getRandomNumber(1000, 9999)}`,",
                      "    expiryDate: getRandomDate(new Date(2025, 0, 1), new Date(2030, 11, 31)), // Future date",
                      "    manufactureDate: getRandomDate(new Date(2023, 0, 1), new Date(2024, 11, 31)), // Past date",
                      "    isoNumber: getRandomNumber(1000, 9999).toString(),",
                      "    nafdacNumber: getRandomNumber(1000, 9999).toString(),",
                      "    quantity: getRandomNumber(1, 100),",
                      "    costPrice: costPrice,",
                      "    sellingPrice: sellingPrice, // Ensuring selling price is not less than cost price",
                      "    eanNumber: getRandomNumber(1000, 9999).toString(),",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),",
                      "    saleStart: getRandomDate(new Date(2024, 0, 1), new Date(2025, 11, 31)), // Future date",
                      "    saleEnd: getRandomDate(new Date(2025, 0, 1), new Date(2026, 11, 31)), // Future date",
                      "    imagePath: \"https://imagekit.io/tools/free-image-hosting/\" // Replace with dynamic upload if needed",
                      "};",
                      "",
                      "// ✅ Update form-data in the request body",
                      "pm.request.body.update({",
                      "    mode: \"formdata\",",
                      "    formdata: [",
                      "        { key: \"title\", value: productDetails.title, type: \"text\" },",
                      "        { key: \"description\", value: productDetails.description, type: \"text\" },",
                      "        { key: \"brandName\", value: productDetails.brandName, type: \"text\" },",
                      "        { key: \"model\", value: productDetails.model, type: \"text\" },",
                      "        { key: \"expiryDate\", value: productDetails.expiryDate, type: \"text\" },",
                      "        { key: \"manufactureDate\", value: productDetails.manufactureDate, type: \"text\" },",
                      "        { key: \"isoNumber\", value: productDetails.isoNumber, type: \"text\" },",
                      "        { key: \"nafdacNumber\", value: productDetails.nafdacNumber, type: \"text\" },",
                      "        { key: \"quantity\", value: productDetails.quantity.toString(), type: \"text\" },",
                      "        { key: \"costPrice\", value: productDetails.costPrice.toString(), type: \"text\" },",
                      "        { key: \"sellingPrice\", value: productDetails.sellingPrice.toString(), type: \"text\" },",
                      "        { key: \"eanNumber\", value: productDetails.eanNumber, type: \"text\" },",
                      "        { key: \"categoryId\", value: productDetails.categoryId, type: \"text\" },",
                      "        { key: \"saleStart\", value: productDetails.saleStart, type: \"text\" },",
                      "        { key: \"saleEnd\", value: productDetails.saleEnd, type: \"text\" },",
                      "        { key: \"images\", src: productDetails.imagePath, type: \"file\" }",
                      "    ]",
                      "});",
                      "",
                      "// ✅ Log generated data for debugging",
                      "console.log(\"🔹 Generated product details:\", productDetails);",
                      ""
                    ],
                    "_lastExecutionId": "00e3dc30-3389-43bf-b49f-67a7b839840d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "427614b5-9354-458b-bd1e-f7a3fc0dced7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response exists\r",
                      "pm.test(\"Response should be present\", function () {\r",
                      "    pm.response.to.have.status(200); // Corrected the expected status code\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse the response body\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// ✅ Define required fields\r",
                      "const requiredFields = [\r",
                      "    \"id\", \"title\", \"description\", \"brandName\", \"model\",\r",
                      "    \"expiryDate\", \"manufactureDate\", \"isoNumber\", \"nafdacNumber\",\r",
                      "    \"quantity\", \"costPrice\", \"sellingPrice\", \"eanNumber\", \"categoryId\",\r",
                      "    \"saleStart\", \"saleEnd\"\r",
                      "];\r",
                      "\r",
                      "// ✅ Check that required fields exist and are not empty\r",
                      "pm.test(\"Required fields should not be empty\", function () {\r",
                      "    requiredFields.forEach(field => {\r",
                      "        pm.expect(response.data).to.have.property(field);\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response.data[field]).to.not.be.null;\r",
                      "            pm.expect(response.data[field]).to.not.be.undefined;\r",
                      "\r",
                      "            // ✅ Check if string fields are not empty\r",
                      "            if (typeof response.data[field] === \"string\") {\r",
                      "                pm.expect(response.data[field].trim()).to.not.equal(\"\");\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if array fields are not empty\r",
                      "            if (Array.isArray(response.data[field])) {\r",
                      "                pm.expect(response.data[field].length).to.be.greaterThan(0);\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if numeric fields are valid\r",
                      "            if ([\"quantity\", \"costPrice\", \"sellingPrice\"].includes(field)) {\r",
                      "                pm.expect(response.data[field]).to.be.a(\"number\");\r",
                      "                pm.expect(response.data[field]).to.be.greaterThan(0);\r",
                      "            }\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate the response contains a success message\r",
                      "pm.test(\"Response should contain a success message\", function () {\r",
                      "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(response.message.toLowerCase()).to.include(\"success\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate that selling price is not lower than cost price\r",
                      "pm.test(\"Selling price should be greater than or equal to cost price\", function () {\r",
                      "    if (response.sellingPrice && response.costPrice) {\r",
                      "        pm.expect(response.sellingPrice).to.be.at.least(response.costPrice);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate dates are in YYYY-MM-DD format\r",
                      "pm.test(\"Dates should be in valid format\", function () {\r",
                      "    [\"expiryDate\", \"manufactureDate\", \"saleStart\", \"saleEnd\"].forEach(field => {\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Log response for debugging\r",
                      "console.log(\"🔹 Response Body:\", response);\r",
                      "\r",
                      "pm.environment.set(\"productId\", response?.data?.id); // Fixed the TypeError by using optional chaining\r",
                      ""
                    ],
                    "_lastExecutionId": "7fdcbba5-51d6-422a-9b89-b13427c00d13"
                  }
                }
              ]
            },
            {
              "id": "1558af38-c792-4986-9265-3a05664909f7",
              "name": "get products",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5acdbd07-8bbd-4e88-9ea6-c89fee8db72e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure\r",
                      "pm.test(\"Response contains an array of products\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"result\").that.is.an(\"array\");\r",
                      "\r",
                      "    let products = jsonData.data.result;\r",
                      "    \r",
                      "    if (products.length > 0) {\r",
                      "        let product = products[0];\r",
                      "        pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\"); // Adjusted type based on response\r",
                      "        pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Extract and store all unique product IDs\r",
                      "let products = jsonData.data?.result || [];\r",
                      "let existingIds = pm.environment.get(\"product_ids\");\r",
                      "existingIds = existingIds ? JSON.parse(existingIds) : [];\r",
                      "\r",
                      "let newProductIds = products.map(product => product.id);\r",
                      "\r",
                      "// ✅ Merge new IDs with existing ones and remove duplicates\r",
                      "let uniqueProductIds = [...new Set([...existingIds, ...newProductIds])];\r",
                      "\r",
                      "// ✅ Store updated product IDs in environment variable\r",
                      "pm.environment.set(\"product_ids\", JSON.stringify(uniqueProductIds));\r",
                      "\r",
                      "// ✅ Store first product ID separately for quick access\r",
                      "if (products.length > 0) {\r",
                      "    pm.environment.set(\"firstProductId\", products[0].id);\r",
                      "    console.log(\"First product ID stored:\", products[0].id);\r",
                      "}\r",
                      "\r",
                      "// ✅ Log the unique extracted product IDs for debugging\r",
                      "console.log(\"Extracted Product IDs:\", uniqueProductIds);\r",
                      "\r",
                      "// ✅ Test that product IDs are correctly stored\r",
                      "pm.test(\"Product IDs should be extracted, stored, and unique\", function () {\r",
                      "    pm.expect(uniqueProductIds).to.be.an(\"array\").that.is.not.empty;\r",
                      "    uniqueProductIds.forEach(id => pm.expect(id).to.be.a(\"string\").that.has.lengthOf(36)); // UUID validation\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ec167e80-cfe3-4cc1-ae4c-3eb9273e706d"
                  }
                }
              ]
            },
            {
              "id": "e87e3c10-3383-4997-996a-4557c70e7107",
              "name": "get product by ID",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3928b7d-bb79-44ad-8b81-032f3d61c9b9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid product ID\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid product ID\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "if (jsonData.success && jsonData.data) {\r",
                      "    let product = jsonData.data;\r",
                      "\r",
                      "    // ✅ Store key product details as environment variables\r",
                      "    pm.environment.set(\"productId\", product.id);\r",
                      "    pm.environment.set(\"productTitle\", product.title);\r",
                      "    pm.environment.set(\"productDescription\", product.description);\r",
                      "    pm.environment.set(\"brandName\", product.brandName);\r",
                      "    pm.environment.set(\"model\", product.model);\r",
                      "    pm.environment.set(\"expiryDate\", product.expiryDate);\r",
                      "    pm.environment.set(\"manufactureDate\", product.manufactureDate);\r",
                      "    pm.environment.set(\"quantity\", product.quantity);\r",
                      "    pm.environment.set(\"sellingPrice\", product.sellingPrice);\r",
                      "    pm.environment.set(\"costPrice\", product.costPrice);\r",
                      "    pm.environment.set(\"sku\", product.sku);\r",
                      "    pm.environment.set(\"eanNumber\", product.eanNumber);\r",
                      "    pm.environment.set(\"categoryId\", product.category.id);\r",
                      "    pm.environment.set(\"categoryName\", product.category.name);\r",
                      "    pm.environment.set(\"sellerEmail\", product.seller.email);\r",
                      "    pm.environment.set(\"sellerFullName\", product.seller.fullName);\r",
                      "    \r",
                      "    console.log(\"✅ Stored product details as environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"model\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"expiryDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"manufactureDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"quantity\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"costPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sku\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"eanNumber\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"category\").that.is.an(\"object\");\r",
                      "    pm.expect(product.category).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product.category).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"seller\").that.is.an(\"object\");\r",
                      "    pm.expect(product.seller).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                      "    pm.expect(product.seller).to.have.property(\"email\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"reviews\").that.is.an(\"object\");\r",
                      "    pm.expect(product.reviews).to.have.property(\"data\").that.is.an(\"array\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate numerical values (quantity, price)\r",
                      "pm.test(\"TC_003 - Ensure numerical values are correct\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.quantity).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.sellingPrice)).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.costPrice)).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate seller email format\r",
                      "pm.test(\"TC_004 - Validate seller email format\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.seller.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_005 - API response time should be within 1000ms\r",
                      "pm.test(\"TC_005 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "337313f0-1a4e-48a3-81fa-bec5badf73dc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c3857aad-3a03-42df-a3e2-96403f7309b0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "288a0e0e-2153-4c7d-bf64-14ea8b598e58"
                  }
                }
              ]
            },
            {
              "id": "c8b7578a-c912-43b2-a8df-f584d1599230",
              "name": "update product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "PUT",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset:utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product updated successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate updated product structure\r",
                      "pm.test(\"Response contains updated product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"price\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\").and.includes(\"http\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d046e760-dc6a-44b9-a725-667194ab3e82",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set\r",
                      "if (!pm.environment.get(\"authToken\")) {\r",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ Set Authorization Header\r",
                      "pm.request.headers.add({\r",
                      "    key: \"Authorization\",\r",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
                      "});\r",
                      "\r",
                      "// ✅ Function to generate a random number within a range\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// ✅ Predefined list of real product names and descriptions\r",
                      "const products = [\r",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },\r",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },\r",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },\r",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },\r",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },\r",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },\r",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },\r",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },\r",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },\r",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }\r",
                      "];\r",
                      "\r",
                      "// ✅ Select a random product\r",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];\r",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;\r",
                      "\r",
                      "// ✅ Generate dynamic cost and selling prices\r",
                      "const costPrice = getRandomNumber(50, 500);\r",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice\r",
                      "\r",
                      "// ✅ Fetch existing product details from environment variables\r",
                      "const productDetails = {\r",
                      "    title: uniqueTitle,  // Updating title\r",
                      "    description: selectedProduct.description, // Updating description\r",
                      "    brandName: pm.environment.get(\"brandName\") || \"DefaultBrand\",\r",
                      "    model: pm.environment.get(\"model\") || `M${getRandomNumber(1000, 9999)}`,\r",
                      "    expiryDate: pm.environment.get(\"expiryDate\") || \"2026-12-31T00:00:00.000Z\",\r",
                      "    manufactureDate: pm.environment.get(\"manufactureDate\") || \"2024-01-01T00:00:00.000Z\",\r",
                      "    isoNumber: pm.environment.get(\"isoNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    nafdacNumber: pm.environment.get(\"nafdacNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    quantity: pm.environment.get(\"quantity\") || getRandomNumber(1, 100),\r",
                      "    costPrice: costPrice.toString(), // Updating cost price\r",
                      "    sellingPrice: sellingPrice.toString(), // Updating selling price\r",
                      "    eanNumber: pm.environment.get(\"eanNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),\r",
                      "    saleStart: pm.environment.get(\"saleStart\") || \"2025-01-01T00:00:00.000Z\",\r",
                      "    saleEnd: pm.environment.get(\"saleEnd\") || \"2026-12-31T00:00:00.000Z\"\r",
                      "};\r",
                      "\r",
                      "// ✅ Update form-data in the request body (excluding images)\r",
                      "pm.request.body.update({\r",
                      "    mode: \"formdata\",\r",
                      "    formdata: Object.entries(productDetails).map(([key, value]) => ({\r",
                      "        key: key,\r",
                      "        value: value,\r",
                      "        type: \"text\"\r",
                      "    }))\r",
                      "});\r",
                      "\r",
                      "// ✅ Log generated data for debugging\r",
                      "console.log(\"🔹 Updated Product Details:\", productDetails);\r",
                      ""
                    ],
                    "_lastExecutionId": "4b89423d-5840-4106-a7ed-22222b02f904"
                  }
                }
              ]
            },
            {
              "id": "83efae9e-6fdb-489c-a62b-ec39aa817070",
              "name": "delete product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2e3e38f-f2f4-45ca-9a31-67a7b8df002d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate product data structure\r",
                      "pm.test(\"Response contains valid product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    \r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e4cbd781-c87b-4533-b4b1-cb5d3b8b43ee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5bd1202c-89cc-4b06-b701-f4ef429f75e9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Retrieve stored product IDs from the environment\r",
                      "let storedProductIds = pm.environment.get(\"product_ids\");\r",
                      "storedProductIds = storedProductIds ? JSON.parse(storedProductIds) : [];\r",
                      "\r",
                      "// ✅ Select a random product ID and store it before the request runs\r",
                      "if (storedProductIds.length > 0) {\r",
                      "    let randomIndex = Math.floor(Math.random() * storedProductIds.length);\r",
                      "    let randomProductId = storedProductIds[randomIndex];\r",
                      "\r",
                      "    // ✅ Store the selected product ID for use in the request\r",
                      "    pm.environment.set(\"randomProductId\", randomProductId);\r",
                      "    console.log(\"Randomly selected Product ID:\", randomProductId);\r",
                      "} else {\r",
                      "    console.warn(\"No stored product IDs available! Ensure the previous request fetched product IDs correctly.\");\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "23bd7d97-e382-4214-b968-09ce1c0c2dfe"
                  }
                }
              ]
            },
            {
              "id": "e7c6f7cf-f1fb-425f-9c69-f9ea93232803",
              "name": "Top brands",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "brands"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83c0d520-e58c-413f-ab9a-6a86fce39f05",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product top brand fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure (Array of Brands)\r",
                      "pm.test(\"Response contains an array of top brands\", function () {\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "\r",
                      "    if (jsonData.data.length > 0) {\r",
                      "        let brand = jsonData.data[0];\r",
                      "\r",
                      "        pm.expect(brand).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "        pm.expect(brand).to.have.property(\"count\").that.is.a(\"number\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store brand names for future use\r",
                      "if (jsonData.data.length > 0) {\r",
                      "    let brandNames = jsonData.data.map(brand => brand.brandName);\r",
                      "    pm.environment.set(\"brand_names\", JSON.stringify(brandNames));\r",
                      "    console.log(\"Stored brand names:\", brandNames);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "4158cfe7-cb1b-4531-9629-d21d38d52ec4"
                  }
                }
              ]
            },
            {
              "id": "f1be75de-bb8e-4f8c-990d-f9230ed0fc7d",
              "name": "search products",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "search"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"q\": \"LG\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70e98749-492d-42fd-b924-96dcad8f7dd5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid search query\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid search\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    let jsonData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate search query response does not return 404 or empty result set\r",
                      "pm.test(\"TC_003 - Valid search should not return 404 or empty result set\", function () {\r",
                      "    let data = pm.response.json().data;\r",
                      "    \r",
                      "    pm.expect(pm.response.code).not.to.eql(404);\r",
                      "    pm.expect(data.result.length).to.be.above(0, \"Search query should return at least one result\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate response time (Performance)\r",
                      "pm.test(\"TC_004 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a2806663-5e06-423a-9899-7ec1f8034045"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "dd217f2b-f9e3-4a97-ba87-ccb856e7a792",
          "length": 40,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "38afc1d0-4cd8-43d4-bad9-a4525a281dd6",
          "scriptId": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
          "execution": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 500",
          "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:2:31)",
          "checksum": "874c22bb658246b047229d77c0e7dfbe",
          "id": "4d4bc19b-f11a-4f26-90d2-ec18977453c9",
          "timestamp": 1747063088878,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 31,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "c8b7578a-c912-43b2-a8df-f584d1599230",
          "name": "update product",
          "request": {
            "url": {
              "path": [
                "products",
                ":id"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "{{firstProductId}}",
                  "key": "id"
                }
              ]
            },
            "method": "PUT",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{authToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset:utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response message\r",
                  "pm.test(\"Response contains success message\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product updated successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate updated product structure\r",
                  "pm.test(\"Response contains updated product details\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"data\");\r",
                  "    let product = jsonData.data;\r",
                  "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"price\").that.is.a(\"number\");\r",
                  "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\").and.includes(\"http\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate authorization requirement\r",
                  "pm.test(\"Request requires authorization\", function () {\r",
                  "    pm.response.to.not.have.status(401);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d046e760-dc6a-44b9-a725-667194ab3e82",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure Authorization Token is Set\r",
                  "if (!pm.environment.get(\"authToken\")) {\r",
                  "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");\r",
                  "}\r",
                  "\r",
                  "// ✅ Set Authorization Header\r",
                  "pm.request.headers.add({\r",
                  "    key: \"Authorization\",\r",
                  "    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
                  "});\r",
                  "\r",
                  "// ✅ Function to generate a random number within a range\r",
                  "function getRandomNumber(min, max) {\r",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                  "}\r",
                  "\r",
                  "// ✅ Predefined list of real product names and descriptions\r",
                  "const products = [\r",
                  "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },\r",
                  "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },\r",
                  "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },\r",
                  "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },\r",
                  "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },\r",
                  "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },\r",
                  "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },\r",
                  "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },\r",
                  "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },\r",
                  "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }\r",
                  "];\r",
                  "\r",
                  "// ✅ Select a random product\r",
                  "const selectedProduct = products[Math.floor(Math.random() * products.length)];\r",
                  "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;\r",
                  "\r",
                  "// ✅ Generate dynamic cost and selling prices\r",
                  "const costPrice = getRandomNumber(50, 500);\r",
                  "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice\r",
                  "\r",
                  "// ✅ Fetch existing product details from environment variables\r",
                  "const productDetails = {\r",
                  "    title: uniqueTitle,  // Updating title\r",
                  "    description: selectedProduct.description, // Updating description\r",
                  "    brandName: pm.environment.get(\"brandName\") || \"DefaultBrand\",\r",
                  "    model: pm.environment.get(\"model\") || `M${getRandomNumber(1000, 9999)}`,\r",
                  "    expiryDate: pm.environment.get(\"expiryDate\") || \"2026-12-31T00:00:00.000Z\",\r",
                  "    manufactureDate: pm.environment.get(\"manufactureDate\") || \"2024-01-01T00:00:00.000Z\",\r",
                  "    isoNumber: pm.environment.get(\"isoNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                  "    nafdacNumber: pm.environment.get(\"nafdacNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                  "    quantity: pm.environment.get(\"quantity\") || getRandomNumber(1, 100),\r",
                  "    costPrice: costPrice.toString(), // Updating cost price\r",
                  "    sellingPrice: sellingPrice.toString(), // Updating selling price\r",
                  "    eanNumber: pm.environment.get(\"eanNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                  "    categoryId: pm.environment.get(\"categoryId4p\"),\r",
                  "    saleStart: pm.environment.get(\"saleStart\") || \"2025-01-01T00:00:00.000Z\",\r",
                  "    saleEnd: pm.environment.get(\"saleEnd\") || \"2026-12-31T00:00:00.000Z\"\r",
                  "};\r",
                  "\r",
                  "// ✅ Update form-data in the request body (excluding images)\r",
                  "pm.request.body.update({\r",
                  "    mode: \"formdata\",\r",
                  "    formdata: Object.entries(productDetails).map(([key, value]) => ({\r",
                  "        key: key,\r",
                  "        value: value,\r",
                  "        type: \"text\"\r",
                  "    }))\r",
                  "});\r",
                  "\r",
                  "// ✅ Log generated data for debugging\r",
                  "console.log(\"🔹 Updated Product Details:\", productDetails);\r",
                  ""
                ],
                "_lastExecutionId": "4b89423d-5840-4106-a7ed-22222b02f904"
              }
            }
          ]
        },
        "parent": {
          "id": "8b64db53-a9fa-473b-8cc6-96423e861533",
          "name": "product",
          "item": [
            {
              "id": "d8af0e9c-aa87-4e73-8e74-f42001b0f625",
              "name": "valid Sign In",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "signin",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{currentPayload}}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cab83c48-571c-4902-b4e7-02acc12dd018",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = {\r",
                      "    \"valid_login\": {\r",
                      "     \"email\": \"testog@e-record.com\",\r",
                      "    \"password\": \"Pass@12345\"\r",
                      "},\r",
                      "    \"missing_email\": { \r",
                      "        \"email\": \"\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"missing_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"\" \r",
                      "    },\r",
                      "    \"invalid_email_format\": { \r",
                      "        \"email\": \"invalid-email\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"incorrect_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"WrongPass123\" \r",
                      "    },\r",
                      "    \"unregistered_email\": { \r",
                      "        \"email\": \"unregistered@mail.com\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "// Get the current test case (default: valid_login)\r",
                      "let testCase = pm.environment.get(\"testCase\") || \"valid_login\";\r",
                      "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                      "\r",
                      "// Set request headers for tracking\r",
                      "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3967611-823a-4c6e-9ee2-a0f9fea65d93"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a359d213-bdc7-46a4-8889-efa1f73cc962",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                      "\r",
                      "const expectedStatus = {\r",
                      "    \"valid_login\": 200,\r",
                      "    \"missing_email\": 400,\r",
                      "    \"missing_password\": 400,\r",
                      "    \"invalid_email_format\": 400,\r",
                      "    \"incorrect_password\": 401,\r",
                      "    \"unregistered_email\": 404\r",
                      "};\r",
                      "\r",
                      "// ✅ Test Case 1: Validate Status Code\r",
                      "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                      "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                      "});\r",
                      "\r",
                      "// Handle successful login response\r",
                      "if (pm.response.code === 200) {\r",
                      "    // ✅ Test Case 2: Verify Success Field Value\r",
                      "    pm.test(\"Verify that the success field is true\", function () {\r",
                      "        pm.expect(response.success).to.eql(true);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 3: Check Message Field Value\r",
                      "    pm.test(\"Check that the message field is 'User sign in successful'\", function () {\r",
                      "        pm.expect(response.message).to.eql(\"User sign in successful\");\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 4: Validate Token Field\r",
                      "    pm.test(\"Validate that the token field is present and not empty\", function () {\r",
                      "        pm.expect(response.data.token).to.be.a('string');\r",
                      "        pm.expect(response.data.token.length).to.be.greaterThan(0);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 5: Verify Expiration Timestamp Format\r",
                      "    pm.test(\"Verify that the expiration timestamp is in ISO 8601 format\", function () {\r",
                      "        let expiresIn = response.data.expiresIn;\r",
                      "        pm.expect(new Date(expiresIn).toISOString()).to.eql(expiresIn);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 6: Validate User Data Fields\r",
                      "    pm.test(\"Validate that the user data fields are correct\", function () {\r",
                      "        let user = response.data.user;\r",
                      "        \r",
                      "        pm.expect(user.id).to.not.eql(null);\r",
                      "        pm.expect(user.email).to.not.eql(null);\r",
                      "        pm.expect(user.fullName).to.not.eql(null);\r",
                      "        pm.expect(user.firstName).to.not.eql(null);\r",
                      "        pm.expect(user.lastName).to.not.eql(null);\r",
                      "    });\r",
                      "\r",
                      "    pm.environment.set(\"userId\", response.data.user.id)\r",
                      "\r",
                      "    // ✅ Test Case 7: Verify KYC Status\r",
                      "    pm.test(\"Verify that the KYC status is false\", function () {\r",
                      "        pm.expect(response.data.user.kycCompleted).to.eql(false);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 9: Check Token Format (JWT)\r",
                      "    pm.test(\"Check that the token is in a valid JWT format\", function () {\r",
                      "        let token = response.data.token;\r",
                      "        let tokenParts = token.split('.');\r",
                      "\r",
                      "        pm.expect(tokenParts).to.have.lengthOf(3);\r",
                      "        pm.expect(tokenParts[0]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[1]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[2]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 10: Validate Response Time\r",
                      "    pm.test(\"Validate that the response time is less than 500ms\", function () {\r",
                      "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Store Auth Token for Future Requests\r",
                      "    pm.environment.set(\"authToken\", response.data.token);\r",
                      "} \r",
                      "// Handle error cases\r",
                      "else {\r",
                      "    pm.test(\"Response contains error message\", function () {\r",
                      "        pm.expect(response).to.have.property(\"error\");\r",
                      "        pm.expect(response.error).to.be.a(\"string\");\r",
                      "    });\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "9ac9fcb0-f51a-42f3-a3c8-2ef6c123219e"
                  }
                }
              ]
            },
            {
              "id": "17690a3e-fa74-49f5-849f-3d412ec83d52",
              "name": "add product",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c810435d-b1e8-4cc8-a896-155e37f6b598",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set",
                      "if (!pm.environment.get(\"authToken\")) {",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");",
                      "}",
                      "",
                      "// ✅ Set Authorization Header",
                      "pm.request.headers.add({",
                      "    key: \"Authorization\",",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`",
                      "});",
                      "",
                      "// ✅ Function to generate a random number within a range",
                      "function getRandomNumber(min, max) {",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                      "}",
                      "",
                      "// ✅ Function to generate a random date within a range",
                      "function getRandomDate(start, end) {",
                      "    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))",
                      "        .toISOString()",
                      "        .split(\"T\")[0]; // Returns in YYYY-MM-DD format",
                      "}",
                      "",
                      "// ✅ Predefined list of real product names and descriptions",
                      "const products = [",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }",
                      "];",
                      "",
                      "// ✅ Predefined list of real brand names",
                      "const brands = [",
                      "    \"Nike\", \"Adidas\", \"Apple\", \"Samsung\", \"Nestlé\", \"L'Oréal\", \"LG\", \"Sony\", \"Coca-Cola\", \"Colgate\"",
                      "];",
                      "",
                      "// ✅ Select a random product and brand",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];",
                      "const selectedBrand = brands[Math.floor(Math.random() * brands.length)];",
                      "",
                      "// ✅ Append a random number to the product title to avoid duplication",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;",
                      "",
                      "// ✅ Generate dynamic product details",
                      "const costPrice = getRandomNumber(50, 500);",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice",
                      "",
                      "const productDetails = {",
                      "    title: uniqueTitle,  // Ensuring uniqueness",
                      "    description: selectedProduct.description,",
                      "    brandName: selectedBrand,",
                      "    model: `M${getRandomNumber(1000, 9999)}`,",
                      "    expiryDate: getRandomDate(new Date(2025, 0, 1), new Date(2030, 11, 31)), // Future date",
                      "    manufactureDate: getRandomDate(new Date(2023, 0, 1), new Date(2024, 11, 31)), // Past date",
                      "    isoNumber: getRandomNumber(1000, 9999).toString(),",
                      "    nafdacNumber: getRandomNumber(1000, 9999).toString(),",
                      "    quantity: getRandomNumber(1, 100),",
                      "    costPrice: costPrice,",
                      "    sellingPrice: sellingPrice, // Ensuring selling price is not less than cost price",
                      "    eanNumber: getRandomNumber(1000, 9999).toString(),",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),",
                      "    saleStart: getRandomDate(new Date(2024, 0, 1), new Date(2025, 11, 31)), // Future date",
                      "    saleEnd: getRandomDate(new Date(2025, 0, 1), new Date(2026, 11, 31)), // Future date",
                      "    imagePath: \"https://imagekit.io/tools/free-image-hosting/\" // Replace with dynamic upload if needed",
                      "};",
                      "",
                      "// ✅ Update form-data in the request body",
                      "pm.request.body.update({",
                      "    mode: \"formdata\",",
                      "    formdata: [",
                      "        { key: \"title\", value: productDetails.title, type: \"text\" },",
                      "        { key: \"description\", value: productDetails.description, type: \"text\" },",
                      "        { key: \"brandName\", value: productDetails.brandName, type: \"text\" },",
                      "        { key: \"model\", value: productDetails.model, type: \"text\" },",
                      "        { key: \"expiryDate\", value: productDetails.expiryDate, type: \"text\" },",
                      "        { key: \"manufactureDate\", value: productDetails.manufactureDate, type: \"text\" },",
                      "        { key: \"isoNumber\", value: productDetails.isoNumber, type: \"text\" },",
                      "        { key: \"nafdacNumber\", value: productDetails.nafdacNumber, type: \"text\" },",
                      "        { key: \"quantity\", value: productDetails.quantity.toString(), type: \"text\" },",
                      "        { key: \"costPrice\", value: productDetails.costPrice.toString(), type: \"text\" },",
                      "        { key: \"sellingPrice\", value: productDetails.sellingPrice.toString(), type: \"text\" },",
                      "        { key: \"eanNumber\", value: productDetails.eanNumber, type: \"text\" },",
                      "        { key: \"categoryId\", value: productDetails.categoryId, type: \"text\" },",
                      "        { key: \"saleStart\", value: productDetails.saleStart, type: \"text\" },",
                      "        { key: \"saleEnd\", value: productDetails.saleEnd, type: \"text\" },",
                      "        { key: \"images\", src: productDetails.imagePath, type: \"file\" }",
                      "    ]",
                      "});",
                      "",
                      "// ✅ Log generated data for debugging",
                      "console.log(\"🔹 Generated product details:\", productDetails);",
                      ""
                    ],
                    "_lastExecutionId": "00e3dc30-3389-43bf-b49f-67a7b839840d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "427614b5-9354-458b-bd1e-f7a3fc0dced7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response exists\r",
                      "pm.test(\"Response should be present\", function () {\r",
                      "    pm.response.to.have.status(200); // Corrected the expected status code\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse the response body\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// ✅ Define required fields\r",
                      "const requiredFields = [\r",
                      "    \"id\", \"title\", \"description\", \"brandName\", \"model\",\r",
                      "    \"expiryDate\", \"manufactureDate\", \"isoNumber\", \"nafdacNumber\",\r",
                      "    \"quantity\", \"costPrice\", \"sellingPrice\", \"eanNumber\", \"categoryId\",\r",
                      "    \"saleStart\", \"saleEnd\"\r",
                      "];\r",
                      "\r",
                      "// ✅ Check that required fields exist and are not empty\r",
                      "pm.test(\"Required fields should not be empty\", function () {\r",
                      "    requiredFields.forEach(field => {\r",
                      "        pm.expect(response.data).to.have.property(field);\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response.data[field]).to.not.be.null;\r",
                      "            pm.expect(response.data[field]).to.not.be.undefined;\r",
                      "\r",
                      "            // ✅ Check if string fields are not empty\r",
                      "            if (typeof response.data[field] === \"string\") {\r",
                      "                pm.expect(response.data[field].trim()).to.not.equal(\"\");\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if array fields are not empty\r",
                      "            if (Array.isArray(response.data[field])) {\r",
                      "                pm.expect(response.data[field].length).to.be.greaterThan(0);\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if numeric fields are valid\r",
                      "            if ([\"quantity\", \"costPrice\", \"sellingPrice\"].includes(field)) {\r",
                      "                pm.expect(response.data[field]).to.be.a(\"number\");\r",
                      "                pm.expect(response.data[field]).to.be.greaterThan(0);\r",
                      "            }\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate the response contains a success message\r",
                      "pm.test(\"Response should contain a success message\", function () {\r",
                      "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(response.message.toLowerCase()).to.include(\"success\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate that selling price is not lower than cost price\r",
                      "pm.test(\"Selling price should be greater than or equal to cost price\", function () {\r",
                      "    if (response.sellingPrice && response.costPrice) {\r",
                      "        pm.expect(response.sellingPrice).to.be.at.least(response.costPrice);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate dates are in YYYY-MM-DD format\r",
                      "pm.test(\"Dates should be in valid format\", function () {\r",
                      "    [\"expiryDate\", \"manufactureDate\", \"saleStart\", \"saleEnd\"].forEach(field => {\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Log response for debugging\r",
                      "console.log(\"🔹 Response Body:\", response);\r",
                      "\r",
                      "pm.environment.set(\"productId\", response?.data?.id); // Fixed the TypeError by using optional chaining\r",
                      ""
                    ],
                    "_lastExecutionId": "7fdcbba5-51d6-422a-9b89-b13427c00d13"
                  }
                }
              ]
            },
            {
              "id": "1558af38-c792-4986-9265-3a05664909f7",
              "name": "get products",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5acdbd07-8bbd-4e88-9ea6-c89fee8db72e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure\r",
                      "pm.test(\"Response contains an array of products\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"result\").that.is.an(\"array\");\r",
                      "\r",
                      "    let products = jsonData.data.result;\r",
                      "    \r",
                      "    if (products.length > 0) {\r",
                      "        let product = products[0];\r",
                      "        pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\"); // Adjusted type based on response\r",
                      "        pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Extract and store all unique product IDs\r",
                      "let products = jsonData.data?.result || [];\r",
                      "let existingIds = pm.environment.get(\"product_ids\");\r",
                      "existingIds = existingIds ? JSON.parse(existingIds) : [];\r",
                      "\r",
                      "let newProductIds = products.map(product => product.id);\r",
                      "\r",
                      "// ✅ Merge new IDs with existing ones and remove duplicates\r",
                      "let uniqueProductIds = [...new Set([...existingIds, ...newProductIds])];\r",
                      "\r",
                      "// ✅ Store updated product IDs in environment variable\r",
                      "pm.environment.set(\"product_ids\", JSON.stringify(uniqueProductIds));\r",
                      "\r",
                      "// ✅ Store first product ID separately for quick access\r",
                      "if (products.length > 0) {\r",
                      "    pm.environment.set(\"firstProductId\", products[0].id);\r",
                      "    console.log(\"First product ID stored:\", products[0].id);\r",
                      "}\r",
                      "\r",
                      "// ✅ Log the unique extracted product IDs for debugging\r",
                      "console.log(\"Extracted Product IDs:\", uniqueProductIds);\r",
                      "\r",
                      "// ✅ Test that product IDs are correctly stored\r",
                      "pm.test(\"Product IDs should be extracted, stored, and unique\", function () {\r",
                      "    pm.expect(uniqueProductIds).to.be.an(\"array\").that.is.not.empty;\r",
                      "    uniqueProductIds.forEach(id => pm.expect(id).to.be.a(\"string\").that.has.lengthOf(36)); // UUID validation\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ec167e80-cfe3-4cc1-ae4c-3eb9273e706d"
                  }
                }
              ]
            },
            {
              "id": "e87e3c10-3383-4997-996a-4557c70e7107",
              "name": "get product by ID",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3928b7d-bb79-44ad-8b81-032f3d61c9b9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid product ID\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid product ID\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "if (jsonData.success && jsonData.data) {\r",
                      "    let product = jsonData.data;\r",
                      "\r",
                      "    // ✅ Store key product details as environment variables\r",
                      "    pm.environment.set(\"productId\", product.id);\r",
                      "    pm.environment.set(\"productTitle\", product.title);\r",
                      "    pm.environment.set(\"productDescription\", product.description);\r",
                      "    pm.environment.set(\"brandName\", product.brandName);\r",
                      "    pm.environment.set(\"model\", product.model);\r",
                      "    pm.environment.set(\"expiryDate\", product.expiryDate);\r",
                      "    pm.environment.set(\"manufactureDate\", product.manufactureDate);\r",
                      "    pm.environment.set(\"quantity\", product.quantity);\r",
                      "    pm.environment.set(\"sellingPrice\", product.sellingPrice);\r",
                      "    pm.environment.set(\"costPrice\", product.costPrice);\r",
                      "    pm.environment.set(\"sku\", product.sku);\r",
                      "    pm.environment.set(\"eanNumber\", product.eanNumber);\r",
                      "    pm.environment.set(\"categoryId\", product.category.id);\r",
                      "    pm.environment.set(\"categoryName\", product.category.name);\r",
                      "    pm.environment.set(\"sellerEmail\", product.seller.email);\r",
                      "    pm.environment.set(\"sellerFullName\", product.seller.fullName);\r",
                      "    \r",
                      "    console.log(\"✅ Stored product details as environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"model\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"expiryDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"manufactureDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"quantity\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"costPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sku\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"eanNumber\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"category\").that.is.an(\"object\");\r",
                      "    pm.expect(product.category).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product.category).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"seller\").that.is.an(\"object\");\r",
                      "    pm.expect(product.seller).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                      "    pm.expect(product.seller).to.have.property(\"email\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"reviews\").that.is.an(\"object\");\r",
                      "    pm.expect(product.reviews).to.have.property(\"data\").that.is.an(\"array\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate numerical values (quantity, price)\r",
                      "pm.test(\"TC_003 - Ensure numerical values are correct\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.quantity).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.sellingPrice)).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.costPrice)).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate seller email format\r",
                      "pm.test(\"TC_004 - Validate seller email format\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.seller.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_005 - API response time should be within 1000ms\r",
                      "pm.test(\"TC_005 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "337313f0-1a4e-48a3-81fa-bec5badf73dc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c3857aad-3a03-42df-a3e2-96403f7309b0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "288a0e0e-2153-4c7d-bf64-14ea8b598e58"
                  }
                }
              ]
            },
            {
              "id": "c8b7578a-c912-43b2-a8df-f584d1599230",
              "name": "update product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "PUT",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset:utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product updated successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate updated product structure\r",
                      "pm.test(\"Response contains updated product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"price\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\").and.includes(\"http\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d046e760-dc6a-44b9-a725-667194ab3e82",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set\r",
                      "if (!pm.environment.get(\"authToken\")) {\r",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ Set Authorization Header\r",
                      "pm.request.headers.add({\r",
                      "    key: \"Authorization\",\r",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
                      "});\r",
                      "\r",
                      "// ✅ Function to generate a random number within a range\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// ✅ Predefined list of real product names and descriptions\r",
                      "const products = [\r",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },\r",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },\r",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },\r",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },\r",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },\r",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },\r",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },\r",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },\r",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },\r",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }\r",
                      "];\r",
                      "\r",
                      "// ✅ Select a random product\r",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];\r",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;\r",
                      "\r",
                      "// ✅ Generate dynamic cost and selling prices\r",
                      "const costPrice = getRandomNumber(50, 500);\r",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice\r",
                      "\r",
                      "// ✅ Fetch existing product details from environment variables\r",
                      "const productDetails = {\r",
                      "    title: uniqueTitle,  // Updating title\r",
                      "    description: selectedProduct.description, // Updating description\r",
                      "    brandName: pm.environment.get(\"brandName\") || \"DefaultBrand\",\r",
                      "    model: pm.environment.get(\"model\") || `M${getRandomNumber(1000, 9999)}`,\r",
                      "    expiryDate: pm.environment.get(\"expiryDate\") || \"2026-12-31T00:00:00.000Z\",\r",
                      "    manufactureDate: pm.environment.get(\"manufactureDate\") || \"2024-01-01T00:00:00.000Z\",\r",
                      "    isoNumber: pm.environment.get(\"isoNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    nafdacNumber: pm.environment.get(\"nafdacNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    quantity: pm.environment.get(\"quantity\") || getRandomNumber(1, 100),\r",
                      "    costPrice: costPrice.toString(), // Updating cost price\r",
                      "    sellingPrice: sellingPrice.toString(), // Updating selling price\r",
                      "    eanNumber: pm.environment.get(\"eanNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),\r",
                      "    saleStart: pm.environment.get(\"saleStart\") || \"2025-01-01T00:00:00.000Z\",\r",
                      "    saleEnd: pm.environment.get(\"saleEnd\") || \"2026-12-31T00:00:00.000Z\"\r",
                      "};\r",
                      "\r",
                      "// ✅ Update form-data in the request body (excluding images)\r",
                      "pm.request.body.update({\r",
                      "    mode: \"formdata\",\r",
                      "    formdata: Object.entries(productDetails).map(([key, value]) => ({\r",
                      "        key: key,\r",
                      "        value: value,\r",
                      "        type: \"text\"\r",
                      "    }))\r",
                      "});\r",
                      "\r",
                      "// ✅ Log generated data for debugging\r",
                      "console.log(\"🔹 Updated Product Details:\", productDetails);\r",
                      ""
                    ],
                    "_lastExecutionId": "4b89423d-5840-4106-a7ed-22222b02f904"
                  }
                }
              ]
            },
            {
              "id": "83efae9e-6fdb-489c-a62b-ec39aa817070",
              "name": "delete product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2e3e38f-f2f4-45ca-9a31-67a7b8df002d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate product data structure\r",
                      "pm.test(\"Response contains valid product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    \r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e4cbd781-c87b-4533-b4b1-cb5d3b8b43ee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5bd1202c-89cc-4b06-b701-f4ef429f75e9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Retrieve stored product IDs from the environment\r",
                      "let storedProductIds = pm.environment.get(\"product_ids\");\r",
                      "storedProductIds = storedProductIds ? JSON.parse(storedProductIds) : [];\r",
                      "\r",
                      "// ✅ Select a random product ID and store it before the request runs\r",
                      "if (storedProductIds.length > 0) {\r",
                      "    let randomIndex = Math.floor(Math.random() * storedProductIds.length);\r",
                      "    let randomProductId = storedProductIds[randomIndex];\r",
                      "\r",
                      "    // ✅ Store the selected product ID for use in the request\r",
                      "    pm.environment.set(\"randomProductId\", randomProductId);\r",
                      "    console.log(\"Randomly selected Product ID:\", randomProductId);\r",
                      "} else {\r",
                      "    console.warn(\"No stored product IDs available! Ensure the previous request fetched product IDs correctly.\");\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "23bd7d97-e382-4214-b968-09ce1c0c2dfe"
                  }
                }
              ]
            },
            {
              "id": "e7c6f7cf-f1fb-425f-9c69-f9ea93232803",
              "name": "Top brands",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "brands"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83c0d520-e58c-413f-ab9a-6a86fce39f05",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product top brand fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure (Array of Brands)\r",
                      "pm.test(\"Response contains an array of top brands\", function () {\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "\r",
                      "    if (jsonData.data.length > 0) {\r",
                      "        let brand = jsonData.data[0];\r",
                      "\r",
                      "        pm.expect(brand).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "        pm.expect(brand).to.have.property(\"count\").that.is.a(\"number\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store brand names for future use\r",
                      "if (jsonData.data.length > 0) {\r",
                      "    let brandNames = jsonData.data.map(brand => brand.brandName);\r",
                      "    pm.environment.set(\"brand_names\", JSON.stringify(brandNames));\r",
                      "    console.log(\"Stored brand names:\", brandNames);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "4158cfe7-cb1b-4531-9629-d21d38d52ec4"
                  }
                }
              ]
            },
            {
              "id": "f1be75de-bb8e-4f8c-990d-f9230ed0fc7d",
              "name": "search products",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "search"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"q\": \"LG\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70e98749-492d-42fd-b924-96dcad8f7dd5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid search query\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid search\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    let jsonData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate search query response does not return 404 or empty result set\r",
                      "pm.test(\"TC_003 - Valid search should not return 404 or empty result set\", function () {\r",
                      "    let data = pm.response.json().data;\r",
                      "    \r",
                      "    pm.expect(pm.response.code).not.to.eql(404);\r",
                      "    pm.expect(data.result.length).to.be.above(0, \"Search query should return at least one result\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate response time (Performance)\r",
                      "pm.test(\"TC_004 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a2806663-5e06-423a-9899-7ec1f8034045"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "dd217f2b-f9e3-4a97-ba87-ccb856e7a792",
          "length": 40,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "38afc1d0-4cd8-43d4-bad9-a4525a281dd6",
          "scriptId": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
          "execution": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response contains success flag",
          "message": "expected { success: false, …(1) } to have property 'success' of true, but got false",
          "stack": "AssertionError: expected { success: false, …(1) } to have property 'success' of true, but got false\n   at Object.eval sandbox-script.js:3:31)",
          "checksum": "96e5d740d9c29433652dce28b26126fe",
          "id": "b51bc143-ab42-41d9-abd6-5bea9dbbc902",
          "timestamp": 1747063088879,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 31,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "c8b7578a-c912-43b2-a8df-f584d1599230",
          "name": "update product",
          "request": {
            "url": {
              "path": [
                "products",
                ":id"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "{{firstProductId}}",
                  "key": "id"
                }
              ]
            },
            "method": "PUT",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{authToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset:utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response message\r",
                  "pm.test(\"Response contains success message\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product updated successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate updated product structure\r",
                  "pm.test(\"Response contains updated product details\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"data\");\r",
                  "    let product = jsonData.data;\r",
                  "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"price\").that.is.a(\"number\");\r",
                  "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\").and.includes(\"http\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate authorization requirement\r",
                  "pm.test(\"Request requires authorization\", function () {\r",
                  "    pm.response.to.not.have.status(401);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d046e760-dc6a-44b9-a725-667194ab3e82",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure Authorization Token is Set\r",
                  "if (!pm.environment.get(\"authToken\")) {\r",
                  "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");\r",
                  "}\r",
                  "\r",
                  "// ✅ Set Authorization Header\r",
                  "pm.request.headers.add({\r",
                  "    key: \"Authorization\",\r",
                  "    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
                  "});\r",
                  "\r",
                  "// ✅ Function to generate a random number within a range\r",
                  "function getRandomNumber(min, max) {\r",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                  "}\r",
                  "\r",
                  "// ✅ Predefined list of real product names and descriptions\r",
                  "const products = [\r",
                  "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },\r",
                  "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },\r",
                  "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },\r",
                  "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },\r",
                  "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },\r",
                  "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },\r",
                  "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },\r",
                  "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },\r",
                  "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },\r",
                  "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }\r",
                  "];\r",
                  "\r",
                  "// ✅ Select a random product\r",
                  "const selectedProduct = products[Math.floor(Math.random() * products.length)];\r",
                  "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;\r",
                  "\r",
                  "// ✅ Generate dynamic cost and selling prices\r",
                  "const costPrice = getRandomNumber(50, 500);\r",
                  "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice\r",
                  "\r",
                  "// ✅ Fetch existing product details from environment variables\r",
                  "const productDetails = {\r",
                  "    title: uniqueTitle,  // Updating title\r",
                  "    description: selectedProduct.description, // Updating description\r",
                  "    brandName: pm.environment.get(\"brandName\") || \"DefaultBrand\",\r",
                  "    model: pm.environment.get(\"model\") || `M${getRandomNumber(1000, 9999)}`,\r",
                  "    expiryDate: pm.environment.get(\"expiryDate\") || \"2026-12-31T00:00:00.000Z\",\r",
                  "    manufactureDate: pm.environment.get(\"manufactureDate\") || \"2024-01-01T00:00:00.000Z\",\r",
                  "    isoNumber: pm.environment.get(\"isoNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                  "    nafdacNumber: pm.environment.get(\"nafdacNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                  "    quantity: pm.environment.get(\"quantity\") || getRandomNumber(1, 100),\r",
                  "    costPrice: costPrice.toString(), // Updating cost price\r",
                  "    sellingPrice: sellingPrice.toString(), // Updating selling price\r",
                  "    eanNumber: pm.environment.get(\"eanNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                  "    categoryId: pm.environment.get(\"categoryId4p\"),\r",
                  "    saleStart: pm.environment.get(\"saleStart\") || \"2025-01-01T00:00:00.000Z\",\r",
                  "    saleEnd: pm.environment.get(\"saleEnd\") || \"2026-12-31T00:00:00.000Z\"\r",
                  "};\r",
                  "\r",
                  "// ✅ Update form-data in the request body (excluding images)\r",
                  "pm.request.body.update({\r",
                  "    mode: \"formdata\",\r",
                  "    formdata: Object.entries(productDetails).map(([key, value]) => ({\r",
                  "        key: key,\r",
                  "        value: value,\r",
                  "        type: \"text\"\r",
                  "    }))\r",
                  "});\r",
                  "\r",
                  "// ✅ Log generated data for debugging\r",
                  "console.log(\"🔹 Updated Product Details:\", productDetails);\r",
                  ""
                ],
                "_lastExecutionId": "4b89423d-5840-4106-a7ed-22222b02f904"
              }
            }
          ]
        },
        "parent": {
          "id": "8b64db53-a9fa-473b-8cc6-96423e861533",
          "name": "product",
          "item": [
            {
              "id": "d8af0e9c-aa87-4e73-8e74-f42001b0f625",
              "name": "valid Sign In",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "signin",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{currentPayload}}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cab83c48-571c-4902-b4e7-02acc12dd018",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = {\r",
                      "    \"valid_login\": {\r",
                      "     \"email\": \"testog@e-record.com\",\r",
                      "    \"password\": \"Pass@12345\"\r",
                      "},\r",
                      "    \"missing_email\": { \r",
                      "        \"email\": \"\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"missing_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"\" \r",
                      "    },\r",
                      "    \"invalid_email_format\": { \r",
                      "        \"email\": \"invalid-email\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"incorrect_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"WrongPass123\" \r",
                      "    },\r",
                      "    \"unregistered_email\": { \r",
                      "        \"email\": \"unregistered@mail.com\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "// Get the current test case (default: valid_login)\r",
                      "let testCase = pm.environment.get(\"testCase\") || \"valid_login\";\r",
                      "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                      "\r",
                      "// Set request headers for tracking\r",
                      "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3967611-823a-4c6e-9ee2-a0f9fea65d93"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a359d213-bdc7-46a4-8889-efa1f73cc962",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                      "\r",
                      "const expectedStatus = {\r",
                      "    \"valid_login\": 200,\r",
                      "    \"missing_email\": 400,\r",
                      "    \"missing_password\": 400,\r",
                      "    \"invalid_email_format\": 400,\r",
                      "    \"incorrect_password\": 401,\r",
                      "    \"unregistered_email\": 404\r",
                      "};\r",
                      "\r",
                      "// ✅ Test Case 1: Validate Status Code\r",
                      "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                      "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                      "});\r",
                      "\r",
                      "// Handle successful login response\r",
                      "if (pm.response.code === 200) {\r",
                      "    // ✅ Test Case 2: Verify Success Field Value\r",
                      "    pm.test(\"Verify that the success field is true\", function () {\r",
                      "        pm.expect(response.success).to.eql(true);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 3: Check Message Field Value\r",
                      "    pm.test(\"Check that the message field is 'User sign in successful'\", function () {\r",
                      "        pm.expect(response.message).to.eql(\"User sign in successful\");\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 4: Validate Token Field\r",
                      "    pm.test(\"Validate that the token field is present and not empty\", function () {\r",
                      "        pm.expect(response.data.token).to.be.a('string');\r",
                      "        pm.expect(response.data.token.length).to.be.greaterThan(0);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 5: Verify Expiration Timestamp Format\r",
                      "    pm.test(\"Verify that the expiration timestamp is in ISO 8601 format\", function () {\r",
                      "        let expiresIn = response.data.expiresIn;\r",
                      "        pm.expect(new Date(expiresIn).toISOString()).to.eql(expiresIn);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 6: Validate User Data Fields\r",
                      "    pm.test(\"Validate that the user data fields are correct\", function () {\r",
                      "        let user = response.data.user;\r",
                      "        \r",
                      "        pm.expect(user.id).to.not.eql(null);\r",
                      "        pm.expect(user.email).to.not.eql(null);\r",
                      "        pm.expect(user.fullName).to.not.eql(null);\r",
                      "        pm.expect(user.firstName).to.not.eql(null);\r",
                      "        pm.expect(user.lastName).to.not.eql(null);\r",
                      "    });\r",
                      "\r",
                      "    pm.environment.set(\"userId\", response.data.user.id)\r",
                      "\r",
                      "    // ✅ Test Case 7: Verify KYC Status\r",
                      "    pm.test(\"Verify that the KYC status is false\", function () {\r",
                      "        pm.expect(response.data.user.kycCompleted).to.eql(false);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 9: Check Token Format (JWT)\r",
                      "    pm.test(\"Check that the token is in a valid JWT format\", function () {\r",
                      "        let token = response.data.token;\r",
                      "        let tokenParts = token.split('.');\r",
                      "\r",
                      "        pm.expect(tokenParts).to.have.lengthOf(3);\r",
                      "        pm.expect(tokenParts[0]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[1]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[2]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 10: Validate Response Time\r",
                      "    pm.test(\"Validate that the response time is less than 500ms\", function () {\r",
                      "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Store Auth Token for Future Requests\r",
                      "    pm.environment.set(\"authToken\", response.data.token);\r",
                      "} \r",
                      "// Handle error cases\r",
                      "else {\r",
                      "    pm.test(\"Response contains error message\", function () {\r",
                      "        pm.expect(response).to.have.property(\"error\");\r",
                      "        pm.expect(response.error).to.be.a(\"string\");\r",
                      "    });\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "9ac9fcb0-f51a-42f3-a3c8-2ef6c123219e"
                  }
                }
              ]
            },
            {
              "id": "17690a3e-fa74-49f5-849f-3d412ec83d52",
              "name": "add product",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c810435d-b1e8-4cc8-a896-155e37f6b598",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set",
                      "if (!pm.environment.get(\"authToken\")) {",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");",
                      "}",
                      "",
                      "// ✅ Set Authorization Header",
                      "pm.request.headers.add({",
                      "    key: \"Authorization\",",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`",
                      "});",
                      "",
                      "// ✅ Function to generate a random number within a range",
                      "function getRandomNumber(min, max) {",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                      "}",
                      "",
                      "// ✅ Function to generate a random date within a range",
                      "function getRandomDate(start, end) {",
                      "    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))",
                      "        .toISOString()",
                      "        .split(\"T\")[0]; // Returns in YYYY-MM-DD format",
                      "}",
                      "",
                      "// ✅ Predefined list of real product names and descriptions",
                      "const products = [",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }",
                      "];",
                      "",
                      "// ✅ Predefined list of real brand names",
                      "const brands = [",
                      "    \"Nike\", \"Adidas\", \"Apple\", \"Samsung\", \"Nestlé\", \"L'Oréal\", \"LG\", \"Sony\", \"Coca-Cola\", \"Colgate\"",
                      "];",
                      "",
                      "// ✅ Select a random product and brand",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];",
                      "const selectedBrand = brands[Math.floor(Math.random() * brands.length)];",
                      "",
                      "// ✅ Append a random number to the product title to avoid duplication",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;",
                      "",
                      "// ✅ Generate dynamic product details",
                      "const costPrice = getRandomNumber(50, 500);",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice",
                      "",
                      "const productDetails = {",
                      "    title: uniqueTitle,  // Ensuring uniqueness",
                      "    description: selectedProduct.description,",
                      "    brandName: selectedBrand,",
                      "    model: `M${getRandomNumber(1000, 9999)}`,",
                      "    expiryDate: getRandomDate(new Date(2025, 0, 1), new Date(2030, 11, 31)), // Future date",
                      "    manufactureDate: getRandomDate(new Date(2023, 0, 1), new Date(2024, 11, 31)), // Past date",
                      "    isoNumber: getRandomNumber(1000, 9999).toString(),",
                      "    nafdacNumber: getRandomNumber(1000, 9999).toString(),",
                      "    quantity: getRandomNumber(1, 100),",
                      "    costPrice: costPrice,",
                      "    sellingPrice: sellingPrice, // Ensuring selling price is not less than cost price",
                      "    eanNumber: getRandomNumber(1000, 9999).toString(),",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),",
                      "    saleStart: getRandomDate(new Date(2024, 0, 1), new Date(2025, 11, 31)), // Future date",
                      "    saleEnd: getRandomDate(new Date(2025, 0, 1), new Date(2026, 11, 31)), // Future date",
                      "    imagePath: \"https://imagekit.io/tools/free-image-hosting/\" // Replace with dynamic upload if needed",
                      "};",
                      "",
                      "// ✅ Update form-data in the request body",
                      "pm.request.body.update({",
                      "    mode: \"formdata\",",
                      "    formdata: [",
                      "        { key: \"title\", value: productDetails.title, type: \"text\" },",
                      "        { key: \"description\", value: productDetails.description, type: \"text\" },",
                      "        { key: \"brandName\", value: productDetails.brandName, type: \"text\" },",
                      "        { key: \"model\", value: productDetails.model, type: \"text\" },",
                      "        { key: \"expiryDate\", value: productDetails.expiryDate, type: \"text\" },",
                      "        { key: \"manufactureDate\", value: productDetails.manufactureDate, type: \"text\" },",
                      "        { key: \"isoNumber\", value: productDetails.isoNumber, type: \"text\" },",
                      "        { key: \"nafdacNumber\", value: productDetails.nafdacNumber, type: \"text\" },",
                      "        { key: \"quantity\", value: productDetails.quantity.toString(), type: \"text\" },",
                      "        { key: \"costPrice\", value: productDetails.costPrice.toString(), type: \"text\" },",
                      "        { key: \"sellingPrice\", value: productDetails.sellingPrice.toString(), type: \"text\" },",
                      "        { key: \"eanNumber\", value: productDetails.eanNumber, type: \"text\" },",
                      "        { key: \"categoryId\", value: productDetails.categoryId, type: \"text\" },",
                      "        { key: \"saleStart\", value: productDetails.saleStart, type: \"text\" },",
                      "        { key: \"saleEnd\", value: productDetails.saleEnd, type: \"text\" },",
                      "        { key: \"images\", src: productDetails.imagePath, type: \"file\" }",
                      "    ]",
                      "});",
                      "",
                      "// ✅ Log generated data for debugging",
                      "console.log(\"🔹 Generated product details:\", productDetails);",
                      ""
                    ],
                    "_lastExecutionId": "00e3dc30-3389-43bf-b49f-67a7b839840d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "427614b5-9354-458b-bd1e-f7a3fc0dced7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response exists\r",
                      "pm.test(\"Response should be present\", function () {\r",
                      "    pm.response.to.have.status(200); // Corrected the expected status code\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse the response body\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// ✅ Define required fields\r",
                      "const requiredFields = [\r",
                      "    \"id\", \"title\", \"description\", \"brandName\", \"model\",\r",
                      "    \"expiryDate\", \"manufactureDate\", \"isoNumber\", \"nafdacNumber\",\r",
                      "    \"quantity\", \"costPrice\", \"sellingPrice\", \"eanNumber\", \"categoryId\",\r",
                      "    \"saleStart\", \"saleEnd\"\r",
                      "];\r",
                      "\r",
                      "// ✅ Check that required fields exist and are not empty\r",
                      "pm.test(\"Required fields should not be empty\", function () {\r",
                      "    requiredFields.forEach(field => {\r",
                      "        pm.expect(response.data).to.have.property(field);\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response.data[field]).to.not.be.null;\r",
                      "            pm.expect(response.data[field]).to.not.be.undefined;\r",
                      "\r",
                      "            // ✅ Check if string fields are not empty\r",
                      "            if (typeof response.data[field] === \"string\") {\r",
                      "                pm.expect(response.data[field].trim()).to.not.equal(\"\");\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if array fields are not empty\r",
                      "            if (Array.isArray(response.data[field])) {\r",
                      "                pm.expect(response.data[field].length).to.be.greaterThan(0);\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if numeric fields are valid\r",
                      "            if ([\"quantity\", \"costPrice\", \"sellingPrice\"].includes(field)) {\r",
                      "                pm.expect(response.data[field]).to.be.a(\"number\");\r",
                      "                pm.expect(response.data[field]).to.be.greaterThan(0);\r",
                      "            }\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate the response contains a success message\r",
                      "pm.test(\"Response should contain a success message\", function () {\r",
                      "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(response.message.toLowerCase()).to.include(\"success\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate that selling price is not lower than cost price\r",
                      "pm.test(\"Selling price should be greater than or equal to cost price\", function () {\r",
                      "    if (response.sellingPrice && response.costPrice) {\r",
                      "        pm.expect(response.sellingPrice).to.be.at.least(response.costPrice);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate dates are in YYYY-MM-DD format\r",
                      "pm.test(\"Dates should be in valid format\", function () {\r",
                      "    [\"expiryDate\", \"manufactureDate\", \"saleStart\", \"saleEnd\"].forEach(field => {\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Log response for debugging\r",
                      "console.log(\"🔹 Response Body:\", response);\r",
                      "\r",
                      "pm.environment.set(\"productId\", response?.data?.id); // Fixed the TypeError by using optional chaining\r",
                      ""
                    ],
                    "_lastExecutionId": "7fdcbba5-51d6-422a-9b89-b13427c00d13"
                  }
                }
              ]
            },
            {
              "id": "1558af38-c792-4986-9265-3a05664909f7",
              "name": "get products",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5acdbd07-8bbd-4e88-9ea6-c89fee8db72e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure\r",
                      "pm.test(\"Response contains an array of products\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"result\").that.is.an(\"array\");\r",
                      "\r",
                      "    let products = jsonData.data.result;\r",
                      "    \r",
                      "    if (products.length > 0) {\r",
                      "        let product = products[0];\r",
                      "        pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\"); // Adjusted type based on response\r",
                      "        pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Extract and store all unique product IDs\r",
                      "let products = jsonData.data?.result || [];\r",
                      "let existingIds = pm.environment.get(\"product_ids\");\r",
                      "existingIds = existingIds ? JSON.parse(existingIds) : [];\r",
                      "\r",
                      "let newProductIds = products.map(product => product.id);\r",
                      "\r",
                      "// ✅ Merge new IDs with existing ones and remove duplicates\r",
                      "let uniqueProductIds = [...new Set([...existingIds, ...newProductIds])];\r",
                      "\r",
                      "// ✅ Store updated product IDs in environment variable\r",
                      "pm.environment.set(\"product_ids\", JSON.stringify(uniqueProductIds));\r",
                      "\r",
                      "// ✅ Store first product ID separately for quick access\r",
                      "if (products.length > 0) {\r",
                      "    pm.environment.set(\"firstProductId\", products[0].id);\r",
                      "    console.log(\"First product ID stored:\", products[0].id);\r",
                      "}\r",
                      "\r",
                      "// ✅ Log the unique extracted product IDs for debugging\r",
                      "console.log(\"Extracted Product IDs:\", uniqueProductIds);\r",
                      "\r",
                      "// ✅ Test that product IDs are correctly stored\r",
                      "pm.test(\"Product IDs should be extracted, stored, and unique\", function () {\r",
                      "    pm.expect(uniqueProductIds).to.be.an(\"array\").that.is.not.empty;\r",
                      "    uniqueProductIds.forEach(id => pm.expect(id).to.be.a(\"string\").that.has.lengthOf(36)); // UUID validation\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ec167e80-cfe3-4cc1-ae4c-3eb9273e706d"
                  }
                }
              ]
            },
            {
              "id": "e87e3c10-3383-4997-996a-4557c70e7107",
              "name": "get product by ID",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3928b7d-bb79-44ad-8b81-032f3d61c9b9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid product ID\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid product ID\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "if (jsonData.success && jsonData.data) {\r",
                      "    let product = jsonData.data;\r",
                      "\r",
                      "    // ✅ Store key product details as environment variables\r",
                      "    pm.environment.set(\"productId\", product.id);\r",
                      "    pm.environment.set(\"productTitle\", product.title);\r",
                      "    pm.environment.set(\"productDescription\", product.description);\r",
                      "    pm.environment.set(\"brandName\", product.brandName);\r",
                      "    pm.environment.set(\"model\", product.model);\r",
                      "    pm.environment.set(\"expiryDate\", product.expiryDate);\r",
                      "    pm.environment.set(\"manufactureDate\", product.manufactureDate);\r",
                      "    pm.environment.set(\"quantity\", product.quantity);\r",
                      "    pm.environment.set(\"sellingPrice\", product.sellingPrice);\r",
                      "    pm.environment.set(\"costPrice\", product.costPrice);\r",
                      "    pm.environment.set(\"sku\", product.sku);\r",
                      "    pm.environment.set(\"eanNumber\", product.eanNumber);\r",
                      "    pm.environment.set(\"categoryId\", product.category.id);\r",
                      "    pm.environment.set(\"categoryName\", product.category.name);\r",
                      "    pm.environment.set(\"sellerEmail\", product.seller.email);\r",
                      "    pm.environment.set(\"sellerFullName\", product.seller.fullName);\r",
                      "    \r",
                      "    console.log(\"✅ Stored product details as environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"model\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"expiryDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"manufactureDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"quantity\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"costPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sku\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"eanNumber\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"category\").that.is.an(\"object\");\r",
                      "    pm.expect(product.category).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product.category).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"seller\").that.is.an(\"object\");\r",
                      "    pm.expect(product.seller).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                      "    pm.expect(product.seller).to.have.property(\"email\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"reviews\").that.is.an(\"object\");\r",
                      "    pm.expect(product.reviews).to.have.property(\"data\").that.is.an(\"array\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate numerical values (quantity, price)\r",
                      "pm.test(\"TC_003 - Ensure numerical values are correct\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.quantity).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.sellingPrice)).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.costPrice)).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate seller email format\r",
                      "pm.test(\"TC_004 - Validate seller email format\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.seller.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_005 - API response time should be within 1000ms\r",
                      "pm.test(\"TC_005 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "337313f0-1a4e-48a3-81fa-bec5badf73dc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c3857aad-3a03-42df-a3e2-96403f7309b0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "288a0e0e-2153-4c7d-bf64-14ea8b598e58"
                  }
                }
              ]
            },
            {
              "id": "c8b7578a-c912-43b2-a8df-f584d1599230",
              "name": "update product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "PUT",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset:utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product updated successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate updated product structure\r",
                      "pm.test(\"Response contains updated product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"price\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\").and.includes(\"http\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d046e760-dc6a-44b9-a725-667194ab3e82",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set\r",
                      "if (!pm.environment.get(\"authToken\")) {\r",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ Set Authorization Header\r",
                      "pm.request.headers.add({\r",
                      "    key: \"Authorization\",\r",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
                      "});\r",
                      "\r",
                      "// ✅ Function to generate a random number within a range\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// ✅ Predefined list of real product names and descriptions\r",
                      "const products = [\r",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },\r",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },\r",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },\r",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },\r",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },\r",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },\r",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },\r",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },\r",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },\r",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }\r",
                      "];\r",
                      "\r",
                      "// ✅ Select a random product\r",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];\r",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;\r",
                      "\r",
                      "// ✅ Generate dynamic cost and selling prices\r",
                      "const costPrice = getRandomNumber(50, 500);\r",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice\r",
                      "\r",
                      "// ✅ Fetch existing product details from environment variables\r",
                      "const productDetails = {\r",
                      "    title: uniqueTitle,  // Updating title\r",
                      "    description: selectedProduct.description, // Updating description\r",
                      "    brandName: pm.environment.get(\"brandName\") || \"DefaultBrand\",\r",
                      "    model: pm.environment.get(\"model\") || `M${getRandomNumber(1000, 9999)}`,\r",
                      "    expiryDate: pm.environment.get(\"expiryDate\") || \"2026-12-31T00:00:00.000Z\",\r",
                      "    manufactureDate: pm.environment.get(\"manufactureDate\") || \"2024-01-01T00:00:00.000Z\",\r",
                      "    isoNumber: pm.environment.get(\"isoNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    nafdacNumber: pm.environment.get(\"nafdacNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    quantity: pm.environment.get(\"quantity\") || getRandomNumber(1, 100),\r",
                      "    costPrice: costPrice.toString(), // Updating cost price\r",
                      "    sellingPrice: sellingPrice.toString(), // Updating selling price\r",
                      "    eanNumber: pm.environment.get(\"eanNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),\r",
                      "    saleStart: pm.environment.get(\"saleStart\") || \"2025-01-01T00:00:00.000Z\",\r",
                      "    saleEnd: pm.environment.get(\"saleEnd\") || \"2026-12-31T00:00:00.000Z\"\r",
                      "};\r",
                      "\r",
                      "// ✅ Update form-data in the request body (excluding images)\r",
                      "pm.request.body.update({\r",
                      "    mode: \"formdata\",\r",
                      "    formdata: Object.entries(productDetails).map(([key, value]) => ({\r",
                      "        key: key,\r",
                      "        value: value,\r",
                      "        type: \"text\"\r",
                      "    }))\r",
                      "});\r",
                      "\r",
                      "// ✅ Log generated data for debugging\r",
                      "console.log(\"🔹 Updated Product Details:\", productDetails);\r",
                      ""
                    ],
                    "_lastExecutionId": "4b89423d-5840-4106-a7ed-22222b02f904"
                  }
                }
              ]
            },
            {
              "id": "83efae9e-6fdb-489c-a62b-ec39aa817070",
              "name": "delete product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2e3e38f-f2f4-45ca-9a31-67a7b8df002d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate product data structure\r",
                      "pm.test(\"Response contains valid product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    \r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e4cbd781-c87b-4533-b4b1-cb5d3b8b43ee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5bd1202c-89cc-4b06-b701-f4ef429f75e9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Retrieve stored product IDs from the environment\r",
                      "let storedProductIds = pm.environment.get(\"product_ids\");\r",
                      "storedProductIds = storedProductIds ? JSON.parse(storedProductIds) : [];\r",
                      "\r",
                      "// ✅ Select a random product ID and store it before the request runs\r",
                      "if (storedProductIds.length > 0) {\r",
                      "    let randomIndex = Math.floor(Math.random() * storedProductIds.length);\r",
                      "    let randomProductId = storedProductIds[randomIndex];\r",
                      "\r",
                      "    // ✅ Store the selected product ID for use in the request\r",
                      "    pm.environment.set(\"randomProductId\", randomProductId);\r",
                      "    console.log(\"Randomly selected Product ID:\", randomProductId);\r",
                      "} else {\r",
                      "    console.warn(\"No stored product IDs available! Ensure the previous request fetched product IDs correctly.\");\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "23bd7d97-e382-4214-b968-09ce1c0c2dfe"
                  }
                }
              ]
            },
            {
              "id": "e7c6f7cf-f1fb-425f-9c69-f9ea93232803",
              "name": "Top brands",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "brands"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83c0d520-e58c-413f-ab9a-6a86fce39f05",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product top brand fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure (Array of Brands)\r",
                      "pm.test(\"Response contains an array of top brands\", function () {\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "\r",
                      "    if (jsonData.data.length > 0) {\r",
                      "        let brand = jsonData.data[0];\r",
                      "\r",
                      "        pm.expect(brand).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "        pm.expect(brand).to.have.property(\"count\").that.is.a(\"number\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store brand names for future use\r",
                      "if (jsonData.data.length > 0) {\r",
                      "    let brandNames = jsonData.data.map(brand => brand.brandName);\r",
                      "    pm.environment.set(\"brand_names\", JSON.stringify(brandNames));\r",
                      "    console.log(\"Stored brand names:\", brandNames);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "4158cfe7-cb1b-4531-9629-d21d38d52ec4"
                  }
                }
              ]
            },
            {
              "id": "f1be75de-bb8e-4f8c-990d-f9230ed0fc7d",
              "name": "search products",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "search"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"q\": \"LG\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70e98749-492d-42fd-b924-96dcad8f7dd5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid search query\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid search\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    let jsonData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate search query response does not return 404 or empty result set\r",
                      "pm.test(\"TC_003 - Valid search should not return 404 or empty result set\", function () {\r",
                      "    let data = pm.response.json().data;\r",
                      "    \r",
                      "    pm.expect(pm.response.code).not.to.eql(404);\r",
                      "    pm.expect(data.result.length).to.be.above(0, \"Search query should return at least one result\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate response time (Performance)\r",
                      "pm.test(\"TC_004 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a2806663-5e06-423a-9899-7ec1f8034045"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "dd217f2b-f9e3-4a97-ba87-ccb856e7a792",
          "length": 40,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "38afc1d0-4cd8-43d4-bad9-a4525a281dd6",
          "scriptId": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
          "execution": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Response contains success message",
          "message": "expected 'An internal server error occurred' to include 'Product updated successfully'",
          "stack": "AssertionError: expected 'An internal server error occurred' to include 'Product updated successfully'\n   at Object.eval sandbox-script.js:4:31)",
          "checksum": "bddce14c492458ed1bd1048c6359dffc",
          "id": "ccd7c590-4645-47c3-a521-6e29cc97f72a",
          "timestamp": 1747063088880,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 31,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "c8b7578a-c912-43b2-a8df-f584d1599230",
          "name": "update product",
          "request": {
            "url": {
              "path": [
                "products",
                ":id"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "{{firstProductId}}",
                  "key": "id"
                }
              ]
            },
            "method": "PUT",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{authToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset:utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response message\r",
                  "pm.test(\"Response contains success message\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product updated successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate updated product structure\r",
                  "pm.test(\"Response contains updated product details\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"data\");\r",
                  "    let product = jsonData.data;\r",
                  "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"price\").that.is.a(\"number\");\r",
                  "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\").and.includes(\"http\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate authorization requirement\r",
                  "pm.test(\"Request requires authorization\", function () {\r",
                  "    pm.response.to.not.have.status(401);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d046e760-dc6a-44b9-a725-667194ab3e82",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure Authorization Token is Set\r",
                  "if (!pm.environment.get(\"authToken\")) {\r",
                  "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");\r",
                  "}\r",
                  "\r",
                  "// ✅ Set Authorization Header\r",
                  "pm.request.headers.add({\r",
                  "    key: \"Authorization\",\r",
                  "    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
                  "});\r",
                  "\r",
                  "// ✅ Function to generate a random number within a range\r",
                  "function getRandomNumber(min, max) {\r",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                  "}\r",
                  "\r",
                  "// ✅ Predefined list of real product names and descriptions\r",
                  "const products = [\r",
                  "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },\r",
                  "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },\r",
                  "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },\r",
                  "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },\r",
                  "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },\r",
                  "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },\r",
                  "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },\r",
                  "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },\r",
                  "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },\r",
                  "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }\r",
                  "];\r",
                  "\r",
                  "// ✅ Select a random product\r",
                  "const selectedProduct = products[Math.floor(Math.random() * products.length)];\r",
                  "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;\r",
                  "\r",
                  "// ✅ Generate dynamic cost and selling prices\r",
                  "const costPrice = getRandomNumber(50, 500);\r",
                  "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice\r",
                  "\r",
                  "// ✅ Fetch existing product details from environment variables\r",
                  "const productDetails = {\r",
                  "    title: uniqueTitle,  // Updating title\r",
                  "    description: selectedProduct.description, // Updating description\r",
                  "    brandName: pm.environment.get(\"brandName\") || \"DefaultBrand\",\r",
                  "    model: pm.environment.get(\"model\") || `M${getRandomNumber(1000, 9999)}`,\r",
                  "    expiryDate: pm.environment.get(\"expiryDate\") || \"2026-12-31T00:00:00.000Z\",\r",
                  "    manufactureDate: pm.environment.get(\"manufactureDate\") || \"2024-01-01T00:00:00.000Z\",\r",
                  "    isoNumber: pm.environment.get(\"isoNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                  "    nafdacNumber: pm.environment.get(\"nafdacNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                  "    quantity: pm.environment.get(\"quantity\") || getRandomNumber(1, 100),\r",
                  "    costPrice: costPrice.toString(), // Updating cost price\r",
                  "    sellingPrice: sellingPrice.toString(), // Updating selling price\r",
                  "    eanNumber: pm.environment.get(\"eanNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                  "    categoryId: pm.environment.get(\"categoryId4p\"),\r",
                  "    saleStart: pm.environment.get(\"saleStart\") || \"2025-01-01T00:00:00.000Z\",\r",
                  "    saleEnd: pm.environment.get(\"saleEnd\") || \"2026-12-31T00:00:00.000Z\"\r",
                  "};\r",
                  "\r",
                  "// ✅ Update form-data in the request body (excluding images)\r",
                  "pm.request.body.update({\r",
                  "    mode: \"formdata\",\r",
                  "    formdata: Object.entries(productDetails).map(([key, value]) => ({\r",
                  "        key: key,\r",
                  "        value: value,\r",
                  "        type: \"text\"\r",
                  "    }))\r",
                  "});\r",
                  "\r",
                  "// ✅ Log generated data for debugging\r",
                  "console.log(\"🔹 Updated Product Details:\", productDetails);\r",
                  ""
                ],
                "_lastExecutionId": "4b89423d-5840-4106-a7ed-22222b02f904"
              }
            }
          ]
        },
        "parent": {
          "id": "8b64db53-a9fa-473b-8cc6-96423e861533",
          "name": "product",
          "item": [
            {
              "id": "d8af0e9c-aa87-4e73-8e74-f42001b0f625",
              "name": "valid Sign In",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "signin",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{currentPayload}}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cab83c48-571c-4902-b4e7-02acc12dd018",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = {\r",
                      "    \"valid_login\": {\r",
                      "     \"email\": \"testog@e-record.com\",\r",
                      "    \"password\": \"Pass@12345\"\r",
                      "},\r",
                      "    \"missing_email\": { \r",
                      "        \"email\": \"\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"missing_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"\" \r",
                      "    },\r",
                      "    \"invalid_email_format\": { \r",
                      "        \"email\": \"invalid-email\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"incorrect_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"WrongPass123\" \r",
                      "    },\r",
                      "    \"unregistered_email\": { \r",
                      "        \"email\": \"unregistered@mail.com\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "// Get the current test case (default: valid_login)\r",
                      "let testCase = pm.environment.get(\"testCase\") || \"valid_login\";\r",
                      "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                      "\r",
                      "// Set request headers for tracking\r",
                      "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3967611-823a-4c6e-9ee2-a0f9fea65d93"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a359d213-bdc7-46a4-8889-efa1f73cc962",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                      "\r",
                      "const expectedStatus = {\r",
                      "    \"valid_login\": 200,\r",
                      "    \"missing_email\": 400,\r",
                      "    \"missing_password\": 400,\r",
                      "    \"invalid_email_format\": 400,\r",
                      "    \"incorrect_password\": 401,\r",
                      "    \"unregistered_email\": 404\r",
                      "};\r",
                      "\r",
                      "// ✅ Test Case 1: Validate Status Code\r",
                      "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                      "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                      "});\r",
                      "\r",
                      "// Handle successful login response\r",
                      "if (pm.response.code === 200) {\r",
                      "    // ✅ Test Case 2: Verify Success Field Value\r",
                      "    pm.test(\"Verify that the success field is true\", function () {\r",
                      "        pm.expect(response.success).to.eql(true);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 3: Check Message Field Value\r",
                      "    pm.test(\"Check that the message field is 'User sign in successful'\", function () {\r",
                      "        pm.expect(response.message).to.eql(\"User sign in successful\");\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 4: Validate Token Field\r",
                      "    pm.test(\"Validate that the token field is present and not empty\", function () {\r",
                      "        pm.expect(response.data.token).to.be.a('string');\r",
                      "        pm.expect(response.data.token.length).to.be.greaterThan(0);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 5: Verify Expiration Timestamp Format\r",
                      "    pm.test(\"Verify that the expiration timestamp is in ISO 8601 format\", function () {\r",
                      "        let expiresIn = response.data.expiresIn;\r",
                      "        pm.expect(new Date(expiresIn).toISOString()).to.eql(expiresIn);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 6: Validate User Data Fields\r",
                      "    pm.test(\"Validate that the user data fields are correct\", function () {\r",
                      "        let user = response.data.user;\r",
                      "        \r",
                      "        pm.expect(user.id).to.not.eql(null);\r",
                      "        pm.expect(user.email).to.not.eql(null);\r",
                      "        pm.expect(user.fullName).to.not.eql(null);\r",
                      "        pm.expect(user.firstName).to.not.eql(null);\r",
                      "        pm.expect(user.lastName).to.not.eql(null);\r",
                      "    });\r",
                      "\r",
                      "    pm.environment.set(\"userId\", response.data.user.id)\r",
                      "\r",
                      "    // ✅ Test Case 7: Verify KYC Status\r",
                      "    pm.test(\"Verify that the KYC status is false\", function () {\r",
                      "        pm.expect(response.data.user.kycCompleted).to.eql(false);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 9: Check Token Format (JWT)\r",
                      "    pm.test(\"Check that the token is in a valid JWT format\", function () {\r",
                      "        let token = response.data.token;\r",
                      "        let tokenParts = token.split('.');\r",
                      "\r",
                      "        pm.expect(tokenParts).to.have.lengthOf(3);\r",
                      "        pm.expect(tokenParts[0]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[1]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[2]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 10: Validate Response Time\r",
                      "    pm.test(\"Validate that the response time is less than 500ms\", function () {\r",
                      "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Store Auth Token for Future Requests\r",
                      "    pm.environment.set(\"authToken\", response.data.token);\r",
                      "} \r",
                      "// Handle error cases\r",
                      "else {\r",
                      "    pm.test(\"Response contains error message\", function () {\r",
                      "        pm.expect(response).to.have.property(\"error\");\r",
                      "        pm.expect(response.error).to.be.a(\"string\");\r",
                      "    });\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "9ac9fcb0-f51a-42f3-a3c8-2ef6c123219e"
                  }
                }
              ]
            },
            {
              "id": "17690a3e-fa74-49f5-849f-3d412ec83d52",
              "name": "add product",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c810435d-b1e8-4cc8-a896-155e37f6b598",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set",
                      "if (!pm.environment.get(\"authToken\")) {",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");",
                      "}",
                      "",
                      "// ✅ Set Authorization Header",
                      "pm.request.headers.add({",
                      "    key: \"Authorization\",",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`",
                      "});",
                      "",
                      "// ✅ Function to generate a random number within a range",
                      "function getRandomNumber(min, max) {",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                      "}",
                      "",
                      "// ✅ Function to generate a random date within a range",
                      "function getRandomDate(start, end) {",
                      "    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))",
                      "        .toISOString()",
                      "        .split(\"T\")[0]; // Returns in YYYY-MM-DD format",
                      "}",
                      "",
                      "// ✅ Predefined list of real product names and descriptions",
                      "const products = [",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }",
                      "];",
                      "",
                      "// ✅ Predefined list of real brand names",
                      "const brands = [",
                      "    \"Nike\", \"Adidas\", \"Apple\", \"Samsung\", \"Nestlé\", \"L'Oréal\", \"LG\", \"Sony\", \"Coca-Cola\", \"Colgate\"",
                      "];",
                      "",
                      "// ✅ Select a random product and brand",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];",
                      "const selectedBrand = brands[Math.floor(Math.random() * brands.length)];",
                      "",
                      "// ✅ Append a random number to the product title to avoid duplication",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;",
                      "",
                      "// ✅ Generate dynamic product details",
                      "const costPrice = getRandomNumber(50, 500);",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice",
                      "",
                      "const productDetails = {",
                      "    title: uniqueTitle,  // Ensuring uniqueness",
                      "    description: selectedProduct.description,",
                      "    brandName: selectedBrand,",
                      "    model: `M${getRandomNumber(1000, 9999)}`,",
                      "    expiryDate: getRandomDate(new Date(2025, 0, 1), new Date(2030, 11, 31)), // Future date",
                      "    manufactureDate: getRandomDate(new Date(2023, 0, 1), new Date(2024, 11, 31)), // Past date",
                      "    isoNumber: getRandomNumber(1000, 9999).toString(),",
                      "    nafdacNumber: getRandomNumber(1000, 9999).toString(),",
                      "    quantity: getRandomNumber(1, 100),",
                      "    costPrice: costPrice,",
                      "    sellingPrice: sellingPrice, // Ensuring selling price is not less than cost price",
                      "    eanNumber: getRandomNumber(1000, 9999).toString(),",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),",
                      "    saleStart: getRandomDate(new Date(2024, 0, 1), new Date(2025, 11, 31)), // Future date",
                      "    saleEnd: getRandomDate(new Date(2025, 0, 1), new Date(2026, 11, 31)), // Future date",
                      "    imagePath: \"https://imagekit.io/tools/free-image-hosting/\" // Replace with dynamic upload if needed",
                      "};",
                      "",
                      "// ✅ Update form-data in the request body",
                      "pm.request.body.update({",
                      "    mode: \"formdata\",",
                      "    formdata: [",
                      "        { key: \"title\", value: productDetails.title, type: \"text\" },",
                      "        { key: \"description\", value: productDetails.description, type: \"text\" },",
                      "        { key: \"brandName\", value: productDetails.brandName, type: \"text\" },",
                      "        { key: \"model\", value: productDetails.model, type: \"text\" },",
                      "        { key: \"expiryDate\", value: productDetails.expiryDate, type: \"text\" },",
                      "        { key: \"manufactureDate\", value: productDetails.manufactureDate, type: \"text\" },",
                      "        { key: \"isoNumber\", value: productDetails.isoNumber, type: \"text\" },",
                      "        { key: \"nafdacNumber\", value: productDetails.nafdacNumber, type: \"text\" },",
                      "        { key: \"quantity\", value: productDetails.quantity.toString(), type: \"text\" },",
                      "        { key: \"costPrice\", value: productDetails.costPrice.toString(), type: \"text\" },",
                      "        { key: \"sellingPrice\", value: productDetails.sellingPrice.toString(), type: \"text\" },",
                      "        { key: \"eanNumber\", value: productDetails.eanNumber, type: \"text\" },",
                      "        { key: \"categoryId\", value: productDetails.categoryId, type: \"text\" },",
                      "        { key: \"saleStart\", value: productDetails.saleStart, type: \"text\" },",
                      "        { key: \"saleEnd\", value: productDetails.saleEnd, type: \"text\" },",
                      "        { key: \"images\", src: productDetails.imagePath, type: \"file\" }",
                      "    ]",
                      "});",
                      "",
                      "// ✅ Log generated data for debugging",
                      "console.log(\"🔹 Generated product details:\", productDetails);",
                      ""
                    ],
                    "_lastExecutionId": "00e3dc30-3389-43bf-b49f-67a7b839840d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "427614b5-9354-458b-bd1e-f7a3fc0dced7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response exists\r",
                      "pm.test(\"Response should be present\", function () {\r",
                      "    pm.response.to.have.status(200); // Corrected the expected status code\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse the response body\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// ✅ Define required fields\r",
                      "const requiredFields = [\r",
                      "    \"id\", \"title\", \"description\", \"brandName\", \"model\",\r",
                      "    \"expiryDate\", \"manufactureDate\", \"isoNumber\", \"nafdacNumber\",\r",
                      "    \"quantity\", \"costPrice\", \"sellingPrice\", \"eanNumber\", \"categoryId\",\r",
                      "    \"saleStart\", \"saleEnd\"\r",
                      "];\r",
                      "\r",
                      "// ✅ Check that required fields exist and are not empty\r",
                      "pm.test(\"Required fields should not be empty\", function () {\r",
                      "    requiredFields.forEach(field => {\r",
                      "        pm.expect(response.data).to.have.property(field);\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response.data[field]).to.not.be.null;\r",
                      "            pm.expect(response.data[field]).to.not.be.undefined;\r",
                      "\r",
                      "            // ✅ Check if string fields are not empty\r",
                      "            if (typeof response.data[field] === \"string\") {\r",
                      "                pm.expect(response.data[field].trim()).to.not.equal(\"\");\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if array fields are not empty\r",
                      "            if (Array.isArray(response.data[field])) {\r",
                      "                pm.expect(response.data[field].length).to.be.greaterThan(0);\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if numeric fields are valid\r",
                      "            if ([\"quantity\", \"costPrice\", \"sellingPrice\"].includes(field)) {\r",
                      "                pm.expect(response.data[field]).to.be.a(\"number\");\r",
                      "                pm.expect(response.data[field]).to.be.greaterThan(0);\r",
                      "            }\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate the response contains a success message\r",
                      "pm.test(\"Response should contain a success message\", function () {\r",
                      "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(response.message.toLowerCase()).to.include(\"success\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate that selling price is not lower than cost price\r",
                      "pm.test(\"Selling price should be greater than or equal to cost price\", function () {\r",
                      "    if (response.sellingPrice && response.costPrice) {\r",
                      "        pm.expect(response.sellingPrice).to.be.at.least(response.costPrice);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate dates are in YYYY-MM-DD format\r",
                      "pm.test(\"Dates should be in valid format\", function () {\r",
                      "    [\"expiryDate\", \"manufactureDate\", \"saleStart\", \"saleEnd\"].forEach(field => {\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Log response for debugging\r",
                      "console.log(\"🔹 Response Body:\", response);\r",
                      "\r",
                      "pm.environment.set(\"productId\", response?.data?.id); // Fixed the TypeError by using optional chaining\r",
                      ""
                    ],
                    "_lastExecutionId": "7fdcbba5-51d6-422a-9b89-b13427c00d13"
                  }
                }
              ]
            },
            {
              "id": "1558af38-c792-4986-9265-3a05664909f7",
              "name": "get products",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5acdbd07-8bbd-4e88-9ea6-c89fee8db72e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure\r",
                      "pm.test(\"Response contains an array of products\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"result\").that.is.an(\"array\");\r",
                      "\r",
                      "    let products = jsonData.data.result;\r",
                      "    \r",
                      "    if (products.length > 0) {\r",
                      "        let product = products[0];\r",
                      "        pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\"); // Adjusted type based on response\r",
                      "        pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Extract and store all unique product IDs\r",
                      "let products = jsonData.data?.result || [];\r",
                      "let existingIds = pm.environment.get(\"product_ids\");\r",
                      "existingIds = existingIds ? JSON.parse(existingIds) : [];\r",
                      "\r",
                      "let newProductIds = products.map(product => product.id);\r",
                      "\r",
                      "// ✅ Merge new IDs with existing ones and remove duplicates\r",
                      "let uniqueProductIds = [...new Set([...existingIds, ...newProductIds])];\r",
                      "\r",
                      "// ✅ Store updated product IDs in environment variable\r",
                      "pm.environment.set(\"product_ids\", JSON.stringify(uniqueProductIds));\r",
                      "\r",
                      "// ✅ Store first product ID separately for quick access\r",
                      "if (products.length > 0) {\r",
                      "    pm.environment.set(\"firstProductId\", products[0].id);\r",
                      "    console.log(\"First product ID stored:\", products[0].id);\r",
                      "}\r",
                      "\r",
                      "// ✅ Log the unique extracted product IDs for debugging\r",
                      "console.log(\"Extracted Product IDs:\", uniqueProductIds);\r",
                      "\r",
                      "// ✅ Test that product IDs are correctly stored\r",
                      "pm.test(\"Product IDs should be extracted, stored, and unique\", function () {\r",
                      "    pm.expect(uniqueProductIds).to.be.an(\"array\").that.is.not.empty;\r",
                      "    uniqueProductIds.forEach(id => pm.expect(id).to.be.a(\"string\").that.has.lengthOf(36)); // UUID validation\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ec167e80-cfe3-4cc1-ae4c-3eb9273e706d"
                  }
                }
              ]
            },
            {
              "id": "e87e3c10-3383-4997-996a-4557c70e7107",
              "name": "get product by ID",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3928b7d-bb79-44ad-8b81-032f3d61c9b9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid product ID\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid product ID\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "if (jsonData.success && jsonData.data) {\r",
                      "    let product = jsonData.data;\r",
                      "\r",
                      "    // ✅ Store key product details as environment variables\r",
                      "    pm.environment.set(\"productId\", product.id);\r",
                      "    pm.environment.set(\"productTitle\", product.title);\r",
                      "    pm.environment.set(\"productDescription\", product.description);\r",
                      "    pm.environment.set(\"brandName\", product.brandName);\r",
                      "    pm.environment.set(\"model\", product.model);\r",
                      "    pm.environment.set(\"expiryDate\", product.expiryDate);\r",
                      "    pm.environment.set(\"manufactureDate\", product.manufactureDate);\r",
                      "    pm.environment.set(\"quantity\", product.quantity);\r",
                      "    pm.environment.set(\"sellingPrice\", product.sellingPrice);\r",
                      "    pm.environment.set(\"costPrice\", product.costPrice);\r",
                      "    pm.environment.set(\"sku\", product.sku);\r",
                      "    pm.environment.set(\"eanNumber\", product.eanNumber);\r",
                      "    pm.environment.set(\"categoryId\", product.category.id);\r",
                      "    pm.environment.set(\"categoryName\", product.category.name);\r",
                      "    pm.environment.set(\"sellerEmail\", product.seller.email);\r",
                      "    pm.environment.set(\"sellerFullName\", product.seller.fullName);\r",
                      "    \r",
                      "    console.log(\"✅ Stored product details as environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"model\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"expiryDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"manufactureDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"quantity\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"costPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sku\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"eanNumber\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"category\").that.is.an(\"object\");\r",
                      "    pm.expect(product.category).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product.category).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"seller\").that.is.an(\"object\");\r",
                      "    pm.expect(product.seller).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                      "    pm.expect(product.seller).to.have.property(\"email\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"reviews\").that.is.an(\"object\");\r",
                      "    pm.expect(product.reviews).to.have.property(\"data\").that.is.an(\"array\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate numerical values (quantity, price)\r",
                      "pm.test(\"TC_003 - Ensure numerical values are correct\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.quantity).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.sellingPrice)).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.costPrice)).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate seller email format\r",
                      "pm.test(\"TC_004 - Validate seller email format\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.seller.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_005 - API response time should be within 1000ms\r",
                      "pm.test(\"TC_005 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "337313f0-1a4e-48a3-81fa-bec5badf73dc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c3857aad-3a03-42df-a3e2-96403f7309b0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "288a0e0e-2153-4c7d-bf64-14ea8b598e58"
                  }
                }
              ]
            },
            {
              "id": "c8b7578a-c912-43b2-a8df-f584d1599230",
              "name": "update product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "PUT",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset:utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product updated successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate updated product structure\r",
                      "pm.test(\"Response contains updated product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"price\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\").and.includes(\"http\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d046e760-dc6a-44b9-a725-667194ab3e82",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set\r",
                      "if (!pm.environment.get(\"authToken\")) {\r",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ Set Authorization Header\r",
                      "pm.request.headers.add({\r",
                      "    key: \"Authorization\",\r",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
                      "});\r",
                      "\r",
                      "// ✅ Function to generate a random number within a range\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// ✅ Predefined list of real product names and descriptions\r",
                      "const products = [\r",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },\r",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },\r",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },\r",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },\r",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },\r",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },\r",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },\r",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },\r",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },\r",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }\r",
                      "];\r",
                      "\r",
                      "// ✅ Select a random product\r",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];\r",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;\r",
                      "\r",
                      "// ✅ Generate dynamic cost and selling prices\r",
                      "const costPrice = getRandomNumber(50, 500);\r",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice\r",
                      "\r",
                      "// ✅ Fetch existing product details from environment variables\r",
                      "const productDetails = {\r",
                      "    title: uniqueTitle,  // Updating title\r",
                      "    description: selectedProduct.description, // Updating description\r",
                      "    brandName: pm.environment.get(\"brandName\") || \"DefaultBrand\",\r",
                      "    model: pm.environment.get(\"model\") || `M${getRandomNumber(1000, 9999)}`,\r",
                      "    expiryDate: pm.environment.get(\"expiryDate\") || \"2026-12-31T00:00:00.000Z\",\r",
                      "    manufactureDate: pm.environment.get(\"manufactureDate\") || \"2024-01-01T00:00:00.000Z\",\r",
                      "    isoNumber: pm.environment.get(\"isoNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    nafdacNumber: pm.environment.get(\"nafdacNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    quantity: pm.environment.get(\"quantity\") || getRandomNumber(1, 100),\r",
                      "    costPrice: costPrice.toString(), // Updating cost price\r",
                      "    sellingPrice: sellingPrice.toString(), // Updating selling price\r",
                      "    eanNumber: pm.environment.get(\"eanNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),\r",
                      "    saleStart: pm.environment.get(\"saleStart\") || \"2025-01-01T00:00:00.000Z\",\r",
                      "    saleEnd: pm.environment.get(\"saleEnd\") || \"2026-12-31T00:00:00.000Z\"\r",
                      "};\r",
                      "\r",
                      "// ✅ Update form-data in the request body (excluding images)\r",
                      "pm.request.body.update({\r",
                      "    mode: \"formdata\",\r",
                      "    formdata: Object.entries(productDetails).map(([key, value]) => ({\r",
                      "        key: key,\r",
                      "        value: value,\r",
                      "        type: \"text\"\r",
                      "    }))\r",
                      "});\r",
                      "\r",
                      "// ✅ Log generated data for debugging\r",
                      "console.log(\"🔹 Updated Product Details:\", productDetails);\r",
                      ""
                    ],
                    "_lastExecutionId": "4b89423d-5840-4106-a7ed-22222b02f904"
                  }
                }
              ]
            },
            {
              "id": "83efae9e-6fdb-489c-a62b-ec39aa817070",
              "name": "delete product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2e3e38f-f2f4-45ca-9a31-67a7b8df002d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate product data structure\r",
                      "pm.test(\"Response contains valid product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    \r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e4cbd781-c87b-4533-b4b1-cb5d3b8b43ee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5bd1202c-89cc-4b06-b701-f4ef429f75e9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Retrieve stored product IDs from the environment\r",
                      "let storedProductIds = pm.environment.get(\"product_ids\");\r",
                      "storedProductIds = storedProductIds ? JSON.parse(storedProductIds) : [];\r",
                      "\r",
                      "// ✅ Select a random product ID and store it before the request runs\r",
                      "if (storedProductIds.length > 0) {\r",
                      "    let randomIndex = Math.floor(Math.random() * storedProductIds.length);\r",
                      "    let randomProductId = storedProductIds[randomIndex];\r",
                      "\r",
                      "    // ✅ Store the selected product ID for use in the request\r",
                      "    pm.environment.set(\"randomProductId\", randomProductId);\r",
                      "    console.log(\"Randomly selected Product ID:\", randomProductId);\r",
                      "} else {\r",
                      "    console.warn(\"No stored product IDs available! Ensure the previous request fetched product IDs correctly.\");\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "23bd7d97-e382-4214-b968-09ce1c0c2dfe"
                  }
                }
              ]
            },
            {
              "id": "e7c6f7cf-f1fb-425f-9c69-f9ea93232803",
              "name": "Top brands",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "brands"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83c0d520-e58c-413f-ab9a-6a86fce39f05",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product top brand fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure (Array of Brands)\r",
                      "pm.test(\"Response contains an array of top brands\", function () {\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "\r",
                      "    if (jsonData.data.length > 0) {\r",
                      "        let brand = jsonData.data[0];\r",
                      "\r",
                      "        pm.expect(brand).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "        pm.expect(brand).to.have.property(\"count\").that.is.a(\"number\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store brand names for future use\r",
                      "if (jsonData.data.length > 0) {\r",
                      "    let brandNames = jsonData.data.map(brand => brand.brandName);\r",
                      "    pm.environment.set(\"brand_names\", JSON.stringify(brandNames));\r",
                      "    console.log(\"Stored brand names:\", brandNames);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "4158cfe7-cb1b-4531-9629-d21d38d52ec4"
                  }
                }
              ]
            },
            {
              "id": "f1be75de-bb8e-4f8c-990d-f9230ed0fc7d",
              "name": "search products",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "search"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"q\": \"LG\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70e98749-492d-42fd-b924-96dcad8f7dd5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid search query\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid search\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    let jsonData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate search query response does not return 404 or empty result set\r",
                      "pm.test(\"TC_003 - Valid search should not return 404 or empty result set\", function () {\r",
                      "    let data = pm.response.json().data;\r",
                      "    \r",
                      "    pm.expect(pm.response.code).not.to.eql(404);\r",
                      "    pm.expect(data.result.length).to.be.above(0, \"Search query should return at least one result\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate response time (Performance)\r",
                      "pm.test(\"TC_004 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a2806663-5e06-423a-9899-7ec1f8034045"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "dd217f2b-f9e3-4a97-ba87-ccb856e7a792",
          "length": 40,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "38afc1d0-4cd8-43d4-bad9-a4525a281dd6",
          "scriptId": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
          "execution": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 4,
          "test": "Response contains updated product details",
          "message": "expected { success: false, …(1) } to have property 'data'",
          "stack": "AssertionError: expected { success: false, …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:5:31)",
          "checksum": "0db9c30b800126660af020f8a0d274cd",
          "id": "44e0ad15-ab89-4eec-9131-654f6d7cae03",
          "timestamp": 1747063088881,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 31,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "c8b7578a-c912-43b2-a8df-f584d1599230",
          "name": "update product",
          "request": {
            "url": {
              "path": [
                "products",
                ":id"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": [
                {
                  "type": "any",
                  "value": "{{firstProductId}}",
                  "key": "id"
                }
              ]
            },
            "method": "PUT",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{authToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset:utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response message\r",
                  "pm.test(\"Response contains success message\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product updated successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate updated product structure\r",
                  "pm.test(\"Response contains updated product details\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"data\");\r",
                  "    let product = jsonData.data;\r",
                  "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"price\").that.is.a(\"number\");\r",
                  "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                  "    pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\").and.includes(\"http\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate authorization requirement\r",
                  "pm.test(\"Request requires authorization\", function () {\r",
                  "    pm.response.to.not.have.status(401);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "d046e760-dc6a-44b9-a725-667194ab3e82",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure Authorization Token is Set\r",
                  "if (!pm.environment.get(\"authToken\")) {\r",
                  "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");\r",
                  "}\r",
                  "\r",
                  "// ✅ Set Authorization Header\r",
                  "pm.request.headers.add({\r",
                  "    key: \"Authorization\",\r",
                  "    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
                  "});\r",
                  "\r",
                  "// ✅ Function to generate a random number within a range\r",
                  "function getRandomNumber(min, max) {\r",
                  "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                  "}\r",
                  "\r",
                  "// ✅ Predefined list of real product names and descriptions\r",
                  "const products = [\r",
                  "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },\r",
                  "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },\r",
                  "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },\r",
                  "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },\r",
                  "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },\r",
                  "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },\r",
                  "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },\r",
                  "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },\r",
                  "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },\r",
                  "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }\r",
                  "];\r",
                  "\r",
                  "// ✅ Select a random product\r",
                  "const selectedProduct = products[Math.floor(Math.random() * products.length)];\r",
                  "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;\r",
                  "\r",
                  "// ✅ Generate dynamic cost and selling prices\r",
                  "const costPrice = getRandomNumber(50, 500);\r",
                  "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice\r",
                  "\r",
                  "// ✅ Fetch existing product details from environment variables\r",
                  "const productDetails = {\r",
                  "    title: uniqueTitle,  // Updating title\r",
                  "    description: selectedProduct.description, // Updating description\r",
                  "    brandName: pm.environment.get(\"brandName\") || \"DefaultBrand\",\r",
                  "    model: pm.environment.get(\"model\") || `M${getRandomNumber(1000, 9999)}`,\r",
                  "    expiryDate: pm.environment.get(\"expiryDate\") || \"2026-12-31T00:00:00.000Z\",\r",
                  "    manufactureDate: pm.environment.get(\"manufactureDate\") || \"2024-01-01T00:00:00.000Z\",\r",
                  "    isoNumber: pm.environment.get(\"isoNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                  "    nafdacNumber: pm.environment.get(\"nafdacNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                  "    quantity: pm.environment.get(\"quantity\") || getRandomNumber(1, 100),\r",
                  "    costPrice: costPrice.toString(), // Updating cost price\r",
                  "    sellingPrice: sellingPrice.toString(), // Updating selling price\r",
                  "    eanNumber: pm.environment.get(\"eanNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                  "    categoryId: pm.environment.get(\"categoryId4p\"),\r",
                  "    saleStart: pm.environment.get(\"saleStart\") || \"2025-01-01T00:00:00.000Z\",\r",
                  "    saleEnd: pm.environment.get(\"saleEnd\") || \"2026-12-31T00:00:00.000Z\"\r",
                  "};\r",
                  "\r",
                  "// ✅ Update form-data in the request body (excluding images)\r",
                  "pm.request.body.update({\r",
                  "    mode: \"formdata\",\r",
                  "    formdata: Object.entries(productDetails).map(([key, value]) => ({\r",
                  "        key: key,\r",
                  "        value: value,\r",
                  "        type: \"text\"\r",
                  "    }))\r",
                  "});\r",
                  "\r",
                  "// ✅ Log generated data for debugging\r",
                  "console.log(\"🔹 Updated Product Details:\", productDetails);\r",
                  ""
                ],
                "_lastExecutionId": "4b89423d-5840-4106-a7ed-22222b02f904"
              }
            }
          ]
        },
        "parent": {
          "id": "8b64db53-a9fa-473b-8cc6-96423e861533",
          "name": "product",
          "item": [
            {
              "id": "d8af0e9c-aa87-4e73-8e74-f42001b0f625",
              "name": "valid Sign In",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "signin",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{currentPayload}}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cab83c48-571c-4902-b4e7-02acc12dd018",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = {\r",
                      "    \"valid_login\": {\r",
                      "     \"email\": \"testog@e-record.com\",\r",
                      "    \"password\": \"Pass@12345\"\r",
                      "},\r",
                      "    \"missing_email\": { \r",
                      "        \"email\": \"\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"missing_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"\" \r",
                      "    },\r",
                      "    \"invalid_email_format\": { \r",
                      "        \"email\": \"invalid-email\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"incorrect_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"WrongPass123\" \r",
                      "    },\r",
                      "    \"unregistered_email\": { \r",
                      "        \"email\": \"unregistered@mail.com\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "// Get the current test case (default: valid_login)\r",
                      "let testCase = pm.environment.get(\"testCase\") || \"valid_login\";\r",
                      "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                      "\r",
                      "// Set request headers for tracking\r",
                      "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3967611-823a-4c6e-9ee2-a0f9fea65d93"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a359d213-bdc7-46a4-8889-efa1f73cc962",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                      "\r",
                      "const expectedStatus = {\r",
                      "    \"valid_login\": 200,\r",
                      "    \"missing_email\": 400,\r",
                      "    \"missing_password\": 400,\r",
                      "    \"invalid_email_format\": 400,\r",
                      "    \"incorrect_password\": 401,\r",
                      "    \"unregistered_email\": 404\r",
                      "};\r",
                      "\r",
                      "// ✅ Test Case 1: Validate Status Code\r",
                      "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                      "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                      "});\r",
                      "\r",
                      "// Handle successful login response\r",
                      "if (pm.response.code === 200) {\r",
                      "    // ✅ Test Case 2: Verify Success Field Value\r",
                      "    pm.test(\"Verify that the success field is true\", function () {\r",
                      "        pm.expect(response.success).to.eql(true);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 3: Check Message Field Value\r",
                      "    pm.test(\"Check that the message field is 'User sign in successful'\", function () {\r",
                      "        pm.expect(response.message).to.eql(\"User sign in successful\");\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 4: Validate Token Field\r",
                      "    pm.test(\"Validate that the token field is present and not empty\", function () {\r",
                      "        pm.expect(response.data.token).to.be.a('string');\r",
                      "        pm.expect(response.data.token.length).to.be.greaterThan(0);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 5: Verify Expiration Timestamp Format\r",
                      "    pm.test(\"Verify that the expiration timestamp is in ISO 8601 format\", function () {\r",
                      "        let expiresIn = response.data.expiresIn;\r",
                      "        pm.expect(new Date(expiresIn).toISOString()).to.eql(expiresIn);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 6: Validate User Data Fields\r",
                      "    pm.test(\"Validate that the user data fields are correct\", function () {\r",
                      "        let user = response.data.user;\r",
                      "        \r",
                      "        pm.expect(user.id).to.not.eql(null);\r",
                      "        pm.expect(user.email).to.not.eql(null);\r",
                      "        pm.expect(user.fullName).to.not.eql(null);\r",
                      "        pm.expect(user.firstName).to.not.eql(null);\r",
                      "        pm.expect(user.lastName).to.not.eql(null);\r",
                      "    });\r",
                      "\r",
                      "    pm.environment.set(\"userId\", response.data.user.id)\r",
                      "\r",
                      "    // ✅ Test Case 7: Verify KYC Status\r",
                      "    pm.test(\"Verify that the KYC status is false\", function () {\r",
                      "        pm.expect(response.data.user.kycCompleted).to.eql(false);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 9: Check Token Format (JWT)\r",
                      "    pm.test(\"Check that the token is in a valid JWT format\", function () {\r",
                      "        let token = response.data.token;\r",
                      "        let tokenParts = token.split('.');\r",
                      "\r",
                      "        pm.expect(tokenParts).to.have.lengthOf(3);\r",
                      "        pm.expect(tokenParts[0]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[1]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[2]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 10: Validate Response Time\r",
                      "    pm.test(\"Validate that the response time is less than 500ms\", function () {\r",
                      "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Store Auth Token for Future Requests\r",
                      "    pm.environment.set(\"authToken\", response.data.token);\r",
                      "} \r",
                      "// Handle error cases\r",
                      "else {\r",
                      "    pm.test(\"Response contains error message\", function () {\r",
                      "        pm.expect(response).to.have.property(\"error\");\r",
                      "        pm.expect(response.error).to.be.a(\"string\");\r",
                      "    });\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "9ac9fcb0-f51a-42f3-a3c8-2ef6c123219e"
                  }
                }
              ]
            },
            {
              "id": "17690a3e-fa74-49f5-849f-3d412ec83d52",
              "name": "add product",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c810435d-b1e8-4cc8-a896-155e37f6b598",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set",
                      "if (!pm.environment.get(\"authToken\")) {",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");",
                      "}",
                      "",
                      "// ✅ Set Authorization Header",
                      "pm.request.headers.add({",
                      "    key: \"Authorization\",",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`",
                      "});",
                      "",
                      "// ✅ Function to generate a random number within a range",
                      "function getRandomNumber(min, max) {",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                      "}",
                      "",
                      "// ✅ Function to generate a random date within a range",
                      "function getRandomDate(start, end) {",
                      "    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))",
                      "        .toISOString()",
                      "        .split(\"T\")[0]; // Returns in YYYY-MM-DD format",
                      "}",
                      "",
                      "// ✅ Predefined list of real product names and descriptions",
                      "const products = [",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }",
                      "];",
                      "",
                      "// ✅ Predefined list of real brand names",
                      "const brands = [",
                      "    \"Nike\", \"Adidas\", \"Apple\", \"Samsung\", \"Nestlé\", \"L'Oréal\", \"LG\", \"Sony\", \"Coca-Cola\", \"Colgate\"",
                      "];",
                      "",
                      "// ✅ Select a random product and brand",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];",
                      "const selectedBrand = brands[Math.floor(Math.random() * brands.length)];",
                      "",
                      "// ✅ Append a random number to the product title to avoid duplication",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;",
                      "",
                      "// ✅ Generate dynamic product details",
                      "const costPrice = getRandomNumber(50, 500);",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice",
                      "",
                      "const productDetails = {",
                      "    title: uniqueTitle,  // Ensuring uniqueness",
                      "    description: selectedProduct.description,",
                      "    brandName: selectedBrand,",
                      "    model: `M${getRandomNumber(1000, 9999)}`,",
                      "    expiryDate: getRandomDate(new Date(2025, 0, 1), new Date(2030, 11, 31)), // Future date",
                      "    manufactureDate: getRandomDate(new Date(2023, 0, 1), new Date(2024, 11, 31)), // Past date",
                      "    isoNumber: getRandomNumber(1000, 9999).toString(),",
                      "    nafdacNumber: getRandomNumber(1000, 9999).toString(),",
                      "    quantity: getRandomNumber(1, 100),",
                      "    costPrice: costPrice,",
                      "    sellingPrice: sellingPrice, // Ensuring selling price is not less than cost price",
                      "    eanNumber: getRandomNumber(1000, 9999).toString(),",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),",
                      "    saleStart: getRandomDate(new Date(2024, 0, 1), new Date(2025, 11, 31)), // Future date",
                      "    saleEnd: getRandomDate(new Date(2025, 0, 1), new Date(2026, 11, 31)), // Future date",
                      "    imagePath: \"https://imagekit.io/tools/free-image-hosting/\" // Replace with dynamic upload if needed",
                      "};",
                      "",
                      "// ✅ Update form-data in the request body",
                      "pm.request.body.update({",
                      "    mode: \"formdata\",",
                      "    formdata: [",
                      "        { key: \"title\", value: productDetails.title, type: \"text\" },",
                      "        { key: \"description\", value: productDetails.description, type: \"text\" },",
                      "        { key: \"brandName\", value: productDetails.brandName, type: \"text\" },",
                      "        { key: \"model\", value: productDetails.model, type: \"text\" },",
                      "        { key: \"expiryDate\", value: productDetails.expiryDate, type: \"text\" },",
                      "        { key: \"manufactureDate\", value: productDetails.manufactureDate, type: \"text\" },",
                      "        { key: \"isoNumber\", value: productDetails.isoNumber, type: \"text\" },",
                      "        { key: \"nafdacNumber\", value: productDetails.nafdacNumber, type: \"text\" },",
                      "        { key: \"quantity\", value: productDetails.quantity.toString(), type: \"text\" },",
                      "        { key: \"costPrice\", value: productDetails.costPrice.toString(), type: \"text\" },",
                      "        { key: \"sellingPrice\", value: productDetails.sellingPrice.toString(), type: \"text\" },",
                      "        { key: \"eanNumber\", value: productDetails.eanNumber, type: \"text\" },",
                      "        { key: \"categoryId\", value: productDetails.categoryId, type: \"text\" },",
                      "        { key: \"saleStart\", value: productDetails.saleStart, type: \"text\" },",
                      "        { key: \"saleEnd\", value: productDetails.saleEnd, type: \"text\" },",
                      "        { key: \"images\", src: productDetails.imagePath, type: \"file\" }",
                      "    ]",
                      "});",
                      "",
                      "// ✅ Log generated data for debugging",
                      "console.log(\"🔹 Generated product details:\", productDetails);",
                      ""
                    ],
                    "_lastExecutionId": "00e3dc30-3389-43bf-b49f-67a7b839840d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "427614b5-9354-458b-bd1e-f7a3fc0dced7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response exists\r",
                      "pm.test(\"Response should be present\", function () {\r",
                      "    pm.response.to.have.status(200); // Corrected the expected status code\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse the response body\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// ✅ Define required fields\r",
                      "const requiredFields = [\r",
                      "    \"id\", \"title\", \"description\", \"brandName\", \"model\",\r",
                      "    \"expiryDate\", \"manufactureDate\", \"isoNumber\", \"nafdacNumber\",\r",
                      "    \"quantity\", \"costPrice\", \"sellingPrice\", \"eanNumber\", \"categoryId\",\r",
                      "    \"saleStart\", \"saleEnd\"\r",
                      "];\r",
                      "\r",
                      "// ✅ Check that required fields exist and are not empty\r",
                      "pm.test(\"Required fields should not be empty\", function () {\r",
                      "    requiredFields.forEach(field => {\r",
                      "        pm.expect(response.data).to.have.property(field);\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response.data[field]).to.not.be.null;\r",
                      "            pm.expect(response.data[field]).to.not.be.undefined;\r",
                      "\r",
                      "            // ✅ Check if string fields are not empty\r",
                      "            if (typeof response.data[field] === \"string\") {\r",
                      "                pm.expect(response.data[field].trim()).to.not.equal(\"\");\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if array fields are not empty\r",
                      "            if (Array.isArray(response.data[field])) {\r",
                      "                pm.expect(response.data[field].length).to.be.greaterThan(0);\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if numeric fields are valid\r",
                      "            if ([\"quantity\", \"costPrice\", \"sellingPrice\"].includes(field)) {\r",
                      "                pm.expect(response.data[field]).to.be.a(\"number\");\r",
                      "                pm.expect(response.data[field]).to.be.greaterThan(0);\r",
                      "            }\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate the response contains a success message\r",
                      "pm.test(\"Response should contain a success message\", function () {\r",
                      "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(response.message.toLowerCase()).to.include(\"success\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate that selling price is not lower than cost price\r",
                      "pm.test(\"Selling price should be greater than or equal to cost price\", function () {\r",
                      "    if (response.sellingPrice && response.costPrice) {\r",
                      "        pm.expect(response.sellingPrice).to.be.at.least(response.costPrice);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate dates are in YYYY-MM-DD format\r",
                      "pm.test(\"Dates should be in valid format\", function () {\r",
                      "    [\"expiryDate\", \"manufactureDate\", \"saleStart\", \"saleEnd\"].forEach(field => {\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Log response for debugging\r",
                      "console.log(\"🔹 Response Body:\", response);\r",
                      "\r",
                      "pm.environment.set(\"productId\", response?.data?.id); // Fixed the TypeError by using optional chaining\r",
                      ""
                    ],
                    "_lastExecutionId": "7fdcbba5-51d6-422a-9b89-b13427c00d13"
                  }
                }
              ]
            },
            {
              "id": "1558af38-c792-4986-9265-3a05664909f7",
              "name": "get products",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5acdbd07-8bbd-4e88-9ea6-c89fee8db72e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure\r",
                      "pm.test(\"Response contains an array of products\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"result\").that.is.an(\"array\");\r",
                      "\r",
                      "    let products = jsonData.data.result;\r",
                      "    \r",
                      "    if (products.length > 0) {\r",
                      "        let product = products[0];\r",
                      "        pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\"); // Adjusted type based on response\r",
                      "        pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Extract and store all unique product IDs\r",
                      "let products = jsonData.data?.result || [];\r",
                      "let existingIds = pm.environment.get(\"product_ids\");\r",
                      "existingIds = existingIds ? JSON.parse(existingIds) : [];\r",
                      "\r",
                      "let newProductIds = products.map(product => product.id);\r",
                      "\r",
                      "// ✅ Merge new IDs with existing ones and remove duplicates\r",
                      "let uniqueProductIds = [...new Set([...existingIds, ...newProductIds])];\r",
                      "\r",
                      "// ✅ Store updated product IDs in environment variable\r",
                      "pm.environment.set(\"product_ids\", JSON.stringify(uniqueProductIds));\r",
                      "\r",
                      "// ✅ Store first product ID separately for quick access\r",
                      "if (products.length > 0) {\r",
                      "    pm.environment.set(\"firstProductId\", products[0].id);\r",
                      "    console.log(\"First product ID stored:\", products[0].id);\r",
                      "}\r",
                      "\r",
                      "// ✅ Log the unique extracted product IDs for debugging\r",
                      "console.log(\"Extracted Product IDs:\", uniqueProductIds);\r",
                      "\r",
                      "// ✅ Test that product IDs are correctly stored\r",
                      "pm.test(\"Product IDs should be extracted, stored, and unique\", function () {\r",
                      "    pm.expect(uniqueProductIds).to.be.an(\"array\").that.is.not.empty;\r",
                      "    uniqueProductIds.forEach(id => pm.expect(id).to.be.a(\"string\").that.has.lengthOf(36)); // UUID validation\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ec167e80-cfe3-4cc1-ae4c-3eb9273e706d"
                  }
                }
              ]
            },
            {
              "id": "e87e3c10-3383-4997-996a-4557c70e7107",
              "name": "get product by ID",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3928b7d-bb79-44ad-8b81-032f3d61c9b9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid product ID\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid product ID\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "if (jsonData.success && jsonData.data) {\r",
                      "    let product = jsonData.data;\r",
                      "\r",
                      "    // ✅ Store key product details as environment variables\r",
                      "    pm.environment.set(\"productId\", product.id);\r",
                      "    pm.environment.set(\"productTitle\", product.title);\r",
                      "    pm.environment.set(\"productDescription\", product.description);\r",
                      "    pm.environment.set(\"brandName\", product.brandName);\r",
                      "    pm.environment.set(\"model\", product.model);\r",
                      "    pm.environment.set(\"expiryDate\", product.expiryDate);\r",
                      "    pm.environment.set(\"manufactureDate\", product.manufactureDate);\r",
                      "    pm.environment.set(\"quantity\", product.quantity);\r",
                      "    pm.environment.set(\"sellingPrice\", product.sellingPrice);\r",
                      "    pm.environment.set(\"costPrice\", product.costPrice);\r",
                      "    pm.environment.set(\"sku\", product.sku);\r",
                      "    pm.environment.set(\"eanNumber\", product.eanNumber);\r",
                      "    pm.environment.set(\"categoryId\", product.category.id);\r",
                      "    pm.environment.set(\"categoryName\", product.category.name);\r",
                      "    pm.environment.set(\"sellerEmail\", product.seller.email);\r",
                      "    pm.environment.set(\"sellerFullName\", product.seller.fullName);\r",
                      "    \r",
                      "    console.log(\"✅ Stored product details as environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"model\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"expiryDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"manufactureDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"quantity\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"costPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sku\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"eanNumber\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"category\").that.is.an(\"object\");\r",
                      "    pm.expect(product.category).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product.category).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"seller\").that.is.an(\"object\");\r",
                      "    pm.expect(product.seller).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                      "    pm.expect(product.seller).to.have.property(\"email\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"reviews\").that.is.an(\"object\");\r",
                      "    pm.expect(product.reviews).to.have.property(\"data\").that.is.an(\"array\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate numerical values (quantity, price)\r",
                      "pm.test(\"TC_003 - Ensure numerical values are correct\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.quantity).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.sellingPrice)).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.costPrice)).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate seller email format\r",
                      "pm.test(\"TC_004 - Validate seller email format\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.seller.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_005 - API response time should be within 1000ms\r",
                      "pm.test(\"TC_005 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "337313f0-1a4e-48a3-81fa-bec5badf73dc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c3857aad-3a03-42df-a3e2-96403f7309b0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "288a0e0e-2153-4c7d-bf64-14ea8b598e58"
                  }
                }
              ]
            },
            {
              "id": "c8b7578a-c912-43b2-a8df-f584d1599230",
              "name": "update product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "PUT",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset:utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product updated successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate updated product structure\r",
                      "pm.test(\"Response contains updated product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"price\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\").and.includes(\"http\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d046e760-dc6a-44b9-a725-667194ab3e82",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set\r",
                      "if (!pm.environment.get(\"authToken\")) {\r",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ Set Authorization Header\r",
                      "pm.request.headers.add({\r",
                      "    key: \"Authorization\",\r",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
                      "});\r",
                      "\r",
                      "// ✅ Function to generate a random number within a range\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// ✅ Predefined list of real product names and descriptions\r",
                      "const products = [\r",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },\r",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },\r",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },\r",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },\r",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },\r",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },\r",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },\r",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },\r",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },\r",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }\r",
                      "];\r",
                      "\r",
                      "// ✅ Select a random product\r",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];\r",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;\r",
                      "\r",
                      "// ✅ Generate dynamic cost and selling prices\r",
                      "const costPrice = getRandomNumber(50, 500);\r",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice\r",
                      "\r",
                      "// ✅ Fetch existing product details from environment variables\r",
                      "const productDetails = {\r",
                      "    title: uniqueTitle,  // Updating title\r",
                      "    description: selectedProduct.description, // Updating description\r",
                      "    brandName: pm.environment.get(\"brandName\") || \"DefaultBrand\",\r",
                      "    model: pm.environment.get(\"model\") || `M${getRandomNumber(1000, 9999)}`,\r",
                      "    expiryDate: pm.environment.get(\"expiryDate\") || \"2026-12-31T00:00:00.000Z\",\r",
                      "    manufactureDate: pm.environment.get(\"manufactureDate\") || \"2024-01-01T00:00:00.000Z\",\r",
                      "    isoNumber: pm.environment.get(\"isoNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    nafdacNumber: pm.environment.get(\"nafdacNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    quantity: pm.environment.get(\"quantity\") || getRandomNumber(1, 100),\r",
                      "    costPrice: costPrice.toString(), // Updating cost price\r",
                      "    sellingPrice: sellingPrice.toString(), // Updating selling price\r",
                      "    eanNumber: pm.environment.get(\"eanNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),\r",
                      "    saleStart: pm.environment.get(\"saleStart\") || \"2025-01-01T00:00:00.000Z\",\r",
                      "    saleEnd: pm.environment.get(\"saleEnd\") || \"2026-12-31T00:00:00.000Z\"\r",
                      "};\r",
                      "\r",
                      "// ✅ Update form-data in the request body (excluding images)\r",
                      "pm.request.body.update({\r",
                      "    mode: \"formdata\",\r",
                      "    formdata: Object.entries(productDetails).map(([key, value]) => ({\r",
                      "        key: key,\r",
                      "        value: value,\r",
                      "        type: \"text\"\r",
                      "    }))\r",
                      "});\r",
                      "\r",
                      "// ✅ Log generated data for debugging\r",
                      "console.log(\"🔹 Updated Product Details:\", productDetails);\r",
                      ""
                    ],
                    "_lastExecutionId": "4b89423d-5840-4106-a7ed-22222b02f904"
                  }
                }
              ]
            },
            {
              "id": "83efae9e-6fdb-489c-a62b-ec39aa817070",
              "name": "delete product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2e3e38f-f2f4-45ca-9a31-67a7b8df002d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate product data structure\r",
                      "pm.test(\"Response contains valid product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    \r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e4cbd781-c87b-4533-b4b1-cb5d3b8b43ee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5bd1202c-89cc-4b06-b701-f4ef429f75e9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Retrieve stored product IDs from the environment\r",
                      "let storedProductIds = pm.environment.get(\"product_ids\");\r",
                      "storedProductIds = storedProductIds ? JSON.parse(storedProductIds) : [];\r",
                      "\r",
                      "// ✅ Select a random product ID and store it before the request runs\r",
                      "if (storedProductIds.length > 0) {\r",
                      "    let randomIndex = Math.floor(Math.random() * storedProductIds.length);\r",
                      "    let randomProductId = storedProductIds[randomIndex];\r",
                      "\r",
                      "    // ✅ Store the selected product ID for use in the request\r",
                      "    pm.environment.set(\"randomProductId\", randomProductId);\r",
                      "    console.log(\"Randomly selected Product ID:\", randomProductId);\r",
                      "} else {\r",
                      "    console.warn(\"No stored product IDs available! Ensure the previous request fetched product IDs correctly.\");\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "23bd7d97-e382-4214-b968-09ce1c0c2dfe"
                  }
                }
              ]
            },
            {
              "id": "e7c6f7cf-f1fb-425f-9c69-f9ea93232803",
              "name": "Top brands",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "brands"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83c0d520-e58c-413f-ab9a-6a86fce39f05",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product top brand fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure (Array of Brands)\r",
                      "pm.test(\"Response contains an array of top brands\", function () {\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "\r",
                      "    if (jsonData.data.length > 0) {\r",
                      "        let brand = jsonData.data[0];\r",
                      "\r",
                      "        pm.expect(brand).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "        pm.expect(brand).to.have.property(\"count\").that.is.a(\"number\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store brand names for future use\r",
                      "if (jsonData.data.length > 0) {\r",
                      "    let brandNames = jsonData.data.map(brand => brand.brandName);\r",
                      "    pm.environment.set(\"brand_names\", JSON.stringify(brandNames));\r",
                      "    console.log(\"Stored brand names:\", brandNames);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "4158cfe7-cb1b-4531-9629-d21d38d52ec4"
                  }
                }
              ]
            },
            {
              "id": "f1be75de-bb8e-4f8c-990d-f9230ed0fc7d",
              "name": "search products",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "search"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"q\": \"LG\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70e98749-492d-42fd-b924-96dcad8f7dd5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid search query\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid search\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    let jsonData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate search query response does not return 404 or empty result set\r",
                      "pm.test(\"TC_003 - Valid search should not return 404 or empty result set\", function () {\r",
                      "    let data = pm.response.json().data;\r",
                      "    \r",
                      "    pm.expect(pm.response.code).not.to.eql(404);\r",
                      "    pm.expect(data.result.length).to.be.above(0, \"Search query should return at least one result\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate response time (Performance)\r",
                      "pm.test(\"TC_004 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a2806663-5e06-423a-9899-7ec1f8034045"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "dd217f2b-f9e3-4a97-ba87-ccb856e7a792",
          "length": 40,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "38afc1d0-4cd8-43d4-bad9-a4525a281dd6",
          "scriptId": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
          "execution": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "TC_003 - Valid search should not return 404 or empty result set",
          "message": "Search query should return at least one result: expected +0 to be above +0",
          "stack": "AssertionError: Search query should return at least one result: expected +0 to be above +0\n   at Object.eval sandbox-script.js:3:34)",
          "checksum": "1db72014af3eab14ac44247b3e9d4b75",
          "id": "fcf3100a-a1a6-4d44-ae9a-dc9c2ebc33ba",
          "timestamp": 1747063089250,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 34,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "f1be75de-bb8e-4f8c-990d-f9230ed0fc7d",
          "name": "search products",
          "request": {
            "url": {
              "path": [
                "products",
                "search"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"q\": \"LG\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "70e98749-492d-42fd-b924-96dcad8f7dd5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ TC_001 - Validate 200 OK response for a valid search query\r",
                  "pm.test(\"TC_001 - Status code is 200 for a valid search\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ TC_002 - Validate response structure\r",
                  "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                  "    let jsonData = pm.response.json();\r",
                  "    \r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                  "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                  "});\r",
                  "\r",
                  "// ✅ TC_003 - Validate search query response does not return 404 or empty result set\r",
                  "pm.test(\"TC_003 - Valid search should not return 404 or empty result set\", function () {\r",
                  "    let data = pm.response.json().data;\r",
                  "    \r",
                  "    pm.expect(pm.response.code).not.to.eql(404);\r",
                  "    pm.expect(data.result.length).to.be.above(0, \"Search query should return at least one result\");\r",
                  "});\r",
                  "\r",
                  "// ✅ TC_004 - Validate response time (Performance)\r",
                  "pm.test(\"TC_004 - API response time should be within 1000ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a2806663-5e06-423a-9899-7ec1f8034045"
              }
            }
          ]
        },
        "parent": {
          "id": "8b64db53-a9fa-473b-8cc6-96423e861533",
          "name": "product",
          "item": [
            {
              "id": "d8af0e9c-aa87-4e73-8e74-f42001b0f625",
              "name": "valid Sign In",
              "request": {
                "url": {
                  "path": [
                    "auth",
                    "signin",
                    ""
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{{currentPayload}}\r\n",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "cab83c48-571c-4902-b4e7-02acc12dd018",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = {\r",
                      "    \"valid_login\": {\r",
                      "     \"email\": \"testog@e-record.com\",\r",
                      "    \"password\": \"Pass@12345\"\r",
                      "},\r",
                      "    \"missing_email\": { \r",
                      "        \"email\": \"\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"missing_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"\" \r",
                      "    },\r",
                      "    \"invalid_email_format\": { \r",
                      "        \"email\": \"invalid-email\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    },\r",
                      "    \"incorrect_password\": { \r",
                      "        \"email\": \"existing@mail.com\", \r",
                      "        \"password\": \"WrongPass123\" \r",
                      "    },\r",
                      "    \"unregistered_email\": { \r",
                      "        \"email\": \"unregistered@mail.com\", \r",
                      "        \"password\": \"Pass$50000\" \r",
                      "    }\r",
                      "};\r",
                      "\r",
                      "// Get the current test case (default: valid_login)\r",
                      "let testCase = pm.environment.get(\"testCase\") || \"valid_login\";\r",
                      "pm.environment.set(\"currentPayload\", JSON.stringify(testCases[testCase]));\r",
                      "\r",
                      "// Set request headers for tracking\r",
                      "pm.request.headers.add({ key: \"Test-Case\", value: testCase });\r",
                      "\r",
                      ""
                    ],
                    "_lastExecutionId": "a3967611-823a-4c6e-9ee2-a0f9fea65d93"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a359d213-bdc7-46a4-8889-efa1f73cc962",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "let response = pm.response.json();\r",
                      "let testCase = pm.request.headers.get(\"Test-Case\");\r",
                      "\r",
                      "const expectedStatus = {\r",
                      "    \"valid_login\": 200,\r",
                      "    \"missing_email\": 400,\r",
                      "    \"missing_password\": 400,\r",
                      "    \"invalid_email_format\": 400,\r",
                      "    \"incorrect_password\": 401,\r",
                      "    \"unregistered_email\": 404\r",
                      "};\r",
                      "\r",
                      "// ✅ Test Case 1: Validate Status Code\r",
                      "pm.test(`[${testCase}] Status should be ${expectedStatus[testCase]}`, function () {\r",
                      "    pm.response.to.have.status(expectedStatus[testCase]);\r",
                      "});\r",
                      "\r",
                      "// Handle successful login response\r",
                      "if (pm.response.code === 200) {\r",
                      "    // ✅ Test Case 2: Verify Success Field Value\r",
                      "    pm.test(\"Verify that the success field is true\", function () {\r",
                      "        pm.expect(response.success).to.eql(true);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 3: Check Message Field Value\r",
                      "    pm.test(\"Check that the message field is 'User sign in successful'\", function () {\r",
                      "        pm.expect(response.message).to.eql(\"User sign in successful\");\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 4: Validate Token Field\r",
                      "    pm.test(\"Validate that the token field is present and not empty\", function () {\r",
                      "        pm.expect(response.data.token).to.be.a('string');\r",
                      "        pm.expect(response.data.token.length).to.be.greaterThan(0);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 5: Verify Expiration Timestamp Format\r",
                      "    pm.test(\"Verify that the expiration timestamp is in ISO 8601 format\", function () {\r",
                      "        let expiresIn = response.data.expiresIn;\r",
                      "        pm.expect(new Date(expiresIn).toISOString()).to.eql(expiresIn);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 6: Validate User Data Fields\r",
                      "    pm.test(\"Validate that the user data fields are correct\", function () {\r",
                      "        let user = response.data.user;\r",
                      "        \r",
                      "        pm.expect(user.id).to.not.eql(null);\r",
                      "        pm.expect(user.email).to.not.eql(null);\r",
                      "        pm.expect(user.fullName).to.not.eql(null);\r",
                      "        pm.expect(user.firstName).to.not.eql(null);\r",
                      "        pm.expect(user.lastName).to.not.eql(null);\r",
                      "    });\r",
                      "\r",
                      "    pm.environment.set(\"userId\", response.data.user.id)\r",
                      "\r",
                      "    // ✅ Test Case 7: Verify KYC Status\r",
                      "    pm.test(\"Verify that the KYC status is false\", function () {\r",
                      "        pm.expect(response.data.user.kycCompleted).to.eql(false);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 9: Check Token Format (JWT)\r",
                      "    pm.test(\"Check that the token is in a valid JWT format\", function () {\r",
                      "        let token = response.data.token;\r",
                      "        let tokenParts = token.split('.');\r",
                      "\r",
                      "        pm.expect(tokenParts).to.have.lengthOf(3);\r",
                      "        pm.expect(tokenParts[0]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[1]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "        pm.expect(tokenParts[2]).to.match(/^[A-Za-z0-9_-]+$/);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Test Case 10: Validate Response Time\r",
                      "    pm.test(\"Validate that the response time is less than 500ms\", function () {\r",
                      "        pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "    });\r",
                      "\r",
                      "    // ✅ Store Auth Token for Future Requests\r",
                      "    pm.environment.set(\"authToken\", response.data.token);\r",
                      "} \r",
                      "// Handle error cases\r",
                      "else {\r",
                      "    pm.test(\"Response contains error message\", function () {\r",
                      "        pm.expect(response).to.have.property(\"error\");\r",
                      "        pm.expect(response.error).to.be.a(\"string\");\r",
                      "    });\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "9ac9fcb0-f51a-42f3-a3c8-2ef6c123219e"
                  }
                }
              ]
            },
            {
              "id": "17690a3e-fa74-49f5-849f-3d412ec83d52",
              "name": "add product",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c810435d-b1e8-4cc8-a896-155e37f6b598",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set",
                      "if (!pm.environment.get(\"authToken\")) {",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");",
                      "}",
                      "",
                      "// ✅ Set Authorization Header",
                      "pm.request.headers.add({",
                      "    key: \"Authorization\",",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`",
                      "});",
                      "",
                      "// ✅ Function to generate a random number within a range",
                      "function getRandomNumber(min, max) {",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;",
                      "}",
                      "",
                      "// ✅ Function to generate a random date within a range",
                      "function getRandomDate(start, end) {",
                      "    return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()))",
                      "        .toISOString()",
                      "        .split(\"T\")[0]; // Returns in YYYY-MM-DD format",
                      "}",
                      "",
                      "// ✅ Predefined list of real product names and descriptions",
                      "const products = [",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }",
                      "];",
                      "",
                      "// ✅ Predefined list of real brand names",
                      "const brands = [",
                      "    \"Nike\", \"Adidas\", \"Apple\", \"Samsung\", \"Nestlé\", \"L'Oréal\", \"LG\", \"Sony\", \"Coca-Cola\", \"Colgate\"",
                      "];",
                      "",
                      "// ✅ Select a random product and brand",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];",
                      "const selectedBrand = brands[Math.floor(Math.random() * brands.length)];",
                      "",
                      "// ✅ Append a random number to the product title to avoid duplication",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;",
                      "",
                      "// ✅ Generate dynamic product details",
                      "const costPrice = getRandomNumber(50, 500);",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice",
                      "",
                      "const productDetails = {",
                      "    title: uniqueTitle,  // Ensuring uniqueness",
                      "    description: selectedProduct.description,",
                      "    brandName: selectedBrand,",
                      "    model: `M${getRandomNumber(1000, 9999)}`,",
                      "    expiryDate: getRandomDate(new Date(2025, 0, 1), new Date(2030, 11, 31)), // Future date",
                      "    manufactureDate: getRandomDate(new Date(2023, 0, 1), new Date(2024, 11, 31)), // Past date",
                      "    isoNumber: getRandomNumber(1000, 9999).toString(),",
                      "    nafdacNumber: getRandomNumber(1000, 9999).toString(),",
                      "    quantity: getRandomNumber(1, 100),",
                      "    costPrice: costPrice,",
                      "    sellingPrice: sellingPrice, // Ensuring selling price is not less than cost price",
                      "    eanNumber: getRandomNumber(1000, 9999).toString(),",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),",
                      "    saleStart: getRandomDate(new Date(2024, 0, 1), new Date(2025, 11, 31)), // Future date",
                      "    saleEnd: getRandomDate(new Date(2025, 0, 1), new Date(2026, 11, 31)), // Future date",
                      "    imagePath: \"https://imagekit.io/tools/free-image-hosting/\" // Replace with dynamic upload if needed",
                      "};",
                      "",
                      "// ✅ Update form-data in the request body",
                      "pm.request.body.update({",
                      "    mode: \"formdata\",",
                      "    formdata: [",
                      "        { key: \"title\", value: productDetails.title, type: \"text\" },",
                      "        { key: \"description\", value: productDetails.description, type: \"text\" },",
                      "        { key: \"brandName\", value: productDetails.brandName, type: \"text\" },",
                      "        { key: \"model\", value: productDetails.model, type: \"text\" },",
                      "        { key: \"expiryDate\", value: productDetails.expiryDate, type: \"text\" },",
                      "        { key: \"manufactureDate\", value: productDetails.manufactureDate, type: \"text\" },",
                      "        { key: \"isoNumber\", value: productDetails.isoNumber, type: \"text\" },",
                      "        { key: \"nafdacNumber\", value: productDetails.nafdacNumber, type: \"text\" },",
                      "        { key: \"quantity\", value: productDetails.quantity.toString(), type: \"text\" },",
                      "        { key: \"costPrice\", value: productDetails.costPrice.toString(), type: \"text\" },",
                      "        { key: \"sellingPrice\", value: productDetails.sellingPrice.toString(), type: \"text\" },",
                      "        { key: \"eanNumber\", value: productDetails.eanNumber, type: \"text\" },",
                      "        { key: \"categoryId\", value: productDetails.categoryId, type: \"text\" },",
                      "        { key: \"saleStart\", value: productDetails.saleStart, type: \"text\" },",
                      "        { key: \"saleEnd\", value: productDetails.saleEnd, type: \"text\" },",
                      "        { key: \"images\", src: productDetails.imagePath, type: \"file\" }",
                      "    ]",
                      "});",
                      "",
                      "// ✅ Log generated data for debugging",
                      "console.log(\"🔹 Generated product details:\", productDetails);",
                      ""
                    ],
                    "_lastExecutionId": "00e3dc30-3389-43bf-b49f-67a7b839840d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "427614b5-9354-458b-bd1e-f7a3fc0dced7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response exists\r",
                      "pm.test(\"Response should be present\", function () {\r",
                      "    pm.response.to.have.status(200); // Corrected the expected status code\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse the response body\r",
                      "let response = pm.response.json();\r",
                      "\r",
                      "// ✅ Define required fields\r",
                      "const requiredFields = [\r",
                      "    \"id\", \"title\", \"description\", \"brandName\", \"model\",\r",
                      "    \"expiryDate\", \"manufactureDate\", \"isoNumber\", \"nafdacNumber\",\r",
                      "    \"quantity\", \"costPrice\", \"sellingPrice\", \"eanNumber\", \"categoryId\",\r",
                      "    \"saleStart\", \"saleEnd\"\r",
                      "];\r",
                      "\r",
                      "// ✅ Check that required fields exist and are not empty\r",
                      "pm.test(\"Required fields should not be empty\", function () {\r",
                      "    requiredFields.forEach(field => {\r",
                      "        pm.expect(response.data).to.have.property(field);\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response.data[field]).to.not.be.null;\r",
                      "            pm.expect(response.data[field]).to.not.be.undefined;\r",
                      "\r",
                      "            // ✅ Check if string fields are not empty\r",
                      "            if (typeof response.data[field] === \"string\") {\r",
                      "                pm.expect(response.data[field].trim()).to.not.equal(\"\");\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if array fields are not empty\r",
                      "            if (Array.isArray(response.data[field])) {\r",
                      "                pm.expect(response.data[field].length).to.be.greaterThan(0);\r",
                      "            }\r",
                      "\r",
                      "            // ✅ Check if numeric fields are valid\r",
                      "            if ([\"quantity\", \"costPrice\", \"sellingPrice\"].includes(field)) {\r",
                      "                pm.expect(response.data[field]).to.be.a(\"number\");\r",
                      "                pm.expect(response.data[field]).to.be.greaterThan(0);\r",
                      "            }\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate the response contains a success message\r",
                      "pm.test(\"Response should contain a success message\", function () {\r",
                      "    pm.expect(response).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(response.message.toLowerCase()).to.include(\"success\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate that selling price is not lower than cost price\r",
                      "pm.test(\"Selling price should be greater than or equal to cost price\", function () {\r",
                      "    if (response.sellingPrice && response.costPrice) {\r",
                      "        pm.expect(response.sellingPrice).to.be.at.least(response.costPrice);\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate dates are in YYYY-MM-DD format\r",
                      "pm.test(\"Dates should be in valid format\", function () {\r",
                      "    [\"expiryDate\", \"manufactureDate\", \"saleStart\", \"saleEnd\"].forEach(field => {\r",
                      "        if (response[field]) {\r",
                      "            pm.expect(response[field]).to.match(/^\\d{4}-\\d{2}-\\d{2}$/);\r",
                      "        }\r",
                      "    });\r",
                      "});\r",
                      "\r",
                      "// ✅ Log response for debugging\r",
                      "console.log(\"🔹 Response Body:\", response);\r",
                      "\r",
                      "pm.environment.set(\"productId\", response?.data?.id); // Fixed the TypeError by using optional chaining\r",
                      ""
                    ],
                    "_lastExecutionId": "7fdcbba5-51d6-422a-9b89-b13427c00d13"
                  }
                }
              ]
            },
            {
              "id": "1558af38-c792-4986-9265-3a05664909f7",
              "name": "get products",
              "request": {
                "url": {
                  "path": [
                    "products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5acdbd07-8bbd-4e88-9ea6-c89fee8db72e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure\r",
                      "pm.test(\"Response contains an array of products\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"result\").that.is.an(\"array\");\r",
                      "\r",
                      "    let products = jsonData.data.result;\r",
                      "    \r",
                      "    if (products.length > 0) {\r",
                      "        let product = products[0];\r",
                      "        pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "        pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\"); // Adjusted type based on response\r",
                      "        pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Extract and store all unique product IDs\r",
                      "let products = jsonData.data?.result || [];\r",
                      "let existingIds = pm.environment.get(\"product_ids\");\r",
                      "existingIds = existingIds ? JSON.parse(existingIds) : [];\r",
                      "\r",
                      "let newProductIds = products.map(product => product.id);\r",
                      "\r",
                      "// ✅ Merge new IDs with existing ones and remove duplicates\r",
                      "let uniqueProductIds = [...new Set([...existingIds, ...newProductIds])];\r",
                      "\r",
                      "// ✅ Store updated product IDs in environment variable\r",
                      "pm.environment.set(\"product_ids\", JSON.stringify(uniqueProductIds));\r",
                      "\r",
                      "// ✅ Store first product ID separately for quick access\r",
                      "if (products.length > 0) {\r",
                      "    pm.environment.set(\"firstProductId\", products[0].id);\r",
                      "    console.log(\"First product ID stored:\", products[0].id);\r",
                      "}\r",
                      "\r",
                      "// ✅ Log the unique extracted product IDs for debugging\r",
                      "console.log(\"Extracted Product IDs:\", uniqueProductIds);\r",
                      "\r",
                      "// ✅ Test that product IDs are correctly stored\r",
                      "pm.test(\"Product IDs should be extracted, stored, and unique\", function () {\r",
                      "    pm.expect(uniqueProductIds).to.be.an(\"array\").that.is.not.empty;\r",
                      "    uniqueProductIds.forEach(id => pm.expect(id).to.be.a(\"string\").that.has.lengthOf(36)); // UUID validation\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "ec167e80-cfe3-4cc1-ae4c-3eb9273e706d"
                  }
                }
              ]
            },
            {
              "id": "e87e3c10-3383-4997-996a-4557c70e7107",
              "name": "get product by ID",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e3928b7d-bb79-44ad-8b81-032f3d61c9b9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid product ID\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid product ID\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "if (jsonData.success && jsonData.data) {\r",
                      "    let product = jsonData.data;\r",
                      "\r",
                      "    // ✅ Store key product details as environment variables\r",
                      "    pm.environment.set(\"productId\", product.id);\r",
                      "    pm.environment.set(\"productTitle\", product.title);\r",
                      "    pm.environment.set(\"productDescription\", product.description);\r",
                      "    pm.environment.set(\"brandName\", product.brandName);\r",
                      "    pm.environment.set(\"model\", product.model);\r",
                      "    pm.environment.set(\"expiryDate\", product.expiryDate);\r",
                      "    pm.environment.set(\"manufactureDate\", product.manufactureDate);\r",
                      "    pm.environment.set(\"quantity\", product.quantity);\r",
                      "    pm.environment.set(\"sellingPrice\", product.sellingPrice);\r",
                      "    pm.environment.set(\"costPrice\", product.costPrice);\r",
                      "    pm.environment.set(\"sku\", product.sku);\r",
                      "    pm.environment.set(\"eanNumber\", product.eanNumber);\r",
                      "    pm.environment.set(\"categoryId\", product.category.id);\r",
                      "    pm.environment.set(\"categoryName\", product.category.name);\r",
                      "    pm.environment.set(\"sellerEmail\", product.seller.email);\r",
                      "    pm.environment.set(\"sellerFullName\", product.seller.fullName);\r",
                      "    \r",
                      "    console.log(\"✅ Stored product details as environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"model\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"expiryDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"manufactureDate\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"quantity\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"costPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sku\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"eanNumber\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"category\").that.is.an(\"object\");\r",
                      "    pm.expect(product.category).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product.category).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"seller\").that.is.an(\"object\");\r",
                      "    pm.expect(product.seller).to.have.property(\"fullName\").that.is.a(\"string\");\r",
                      "    pm.expect(product.seller).to.have.property(\"email\").that.is.a(\"string\");\r",
                      "\r",
                      "    pm.expect(product).to.have.property(\"reviews\").that.is.an(\"object\");\r",
                      "    pm.expect(product.reviews).to.have.property(\"data\").that.is.an(\"array\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate numerical values (quantity, price)\r",
                      "pm.test(\"TC_003 - Ensure numerical values are correct\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.quantity).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.sellingPrice)).to.be.a(\"number\");\r",
                      "    pm.expect(parseFloat(product.costPrice)).to.be.a(\"number\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate seller email format\r",
                      "pm.test(\"TC_004 - Validate seller email format\", function () {\r",
                      "    let product = pm.response.json().data;\r",
                      "    pm.expect(product.seller.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_005 - API response time should be within 1000ms\r",
                      "pm.test(\"TC_005 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "337313f0-1a4e-48a3-81fa-bec5badf73dc"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c3857aad-3a03-42df-a3e2-96403f7309b0",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "288a0e0e-2153-4c7d-bf64-14ea8b598e58"
                  }
                }
              ]
            },
            {
              "id": "c8b7578a-c912-43b2-a8df-f584d1599230",
              "name": "update product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "PUT",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cf3a34b3-d612-4371-8dc8-b42b82af408f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset:utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product updated successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate updated product structure\r",
                      "pm.test(\"Response contains updated product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"price\").that.is.a(\"number\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"imageUrl\").that.is.a(\"string\").and.includes(\"http\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "17bf078c-6a74-4c00-9ac3-824c915e87bf"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d046e760-dc6a-44b9-a725-667194ab3e82",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure Authorization Token is Set\r",
                      "if (!pm.environment.get(\"authToken\")) {\r",
                      "    throw new Error(\"Authorization token is missing! Please log in and set the 'authToken' in environment variables.\");\r",
                      "}\r",
                      "\r",
                      "// ✅ Set Authorization Header\r",
                      "pm.request.headers.add({\r",
                      "    key: \"Authorization\",\r",
                      "    value: `Bearer ${pm.environment.get(\"authToken\")}`\r",
                      "});\r",
                      "\r",
                      "// ✅ Function to generate a random number within a range\r",
                      "function getRandomNumber(min, max) {\r",
                      "    return Math.floor(Math.random() * (max - min + 1)) + min;\r",
                      "}\r",
                      "\r",
                      "// ✅ Predefined list of real product names and descriptions\r",
                      "const products = [\r",
                      "    { title: \"Nestlé Pure Life Water\", description: \"Premium purified bottled water for daily hydration.\" },\r",
                      "    { title: \"Nike Air Max 270\", description: \"Lightweight sneakers with superior cushioning and style.\" },\r",
                      "    { title: \"Samsung Galaxy S23\", description: \"Flagship smartphone with high-end camera and performance.\" },\r",
                      "    { title: \"Apple MacBook Pro 14-inch\", description: \"Powerful laptop for professionals with M2 chip.\" },\r",
                      "    { title: \"Oreo Double Stuf Cookies\", description: \"Classic chocolate sandwich cookies with extra filling.\" },\r",
                      "    { title: \"Colgate Total Toothpaste\", description: \"Antibacterial fluoride toothpaste for strong teeth.\" },\r",
                      "    { title: \"Coca-Cola Zero Sugar\", description: \"Refreshing soft drink with zero sugar and great taste.\" },\r",
                      "    { title: \"L'Oréal Revitalift Cream\", description: \"Anti-aging face cream with hyaluronic acid.\" },\r",
                      "    { title: \"Samsung 55-inch Smart TV\", description: \"4K UHD LED Smart TV with AI-powered image processing.\" },\r",
                      "    { title: \"LG Side-by-Side Refrigerator\", description: \"Spacious fridge with inverter technology for energy saving.\" }\r",
                      "];\r",
                      "\r",
                      "// ✅ Select a random product\r",
                      "const selectedProduct = products[Math.floor(Math.random() * products.length)];\r",
                      "const uniqueTitle = `${selectedProduct.title} ${getRandomNumber(1000, 9999)}`;\r",
                      "\r",
                      "// ✅ Generate dynamic cost and selling prices\r",
                      "const costPrice = getRandomNumber(50, 500);\r",
                      "const sellingPrice = getRandomNumber(costPrice, costPrice + 500); // Ensures sellingPrice >= costPrice\r",
                      "\r",
                      "// ✅ Fetch existing product details from environment variables\r",
                      "const productDetails = {\r",
                      "    title: uniqueTitle,  // Updating title\r",
                      "    description: selectedProduct.description, // Updating description\r",
                      "    brandName: pm.environment.get(\"brandName\") || \"DefaultBrand\",\r",
                      "    model: pm.environment.get(\"model\") || `M${getRandomNumber(1000, 9999)}`,\r",
                      "    expiryDate: pm.environment.get(\"expiryDate\") || \"2026-12-31T00:00:00.000Z\",\r",
                      "    manufactureDate: pm.environment.get(\"manufactureDate\") || \"2024-01-01T00:00:00.000Z\",\r",
                      "    isoNumber: pm.environment.get(\"isoNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    nafdacNumber: pm.environment.get(\"nafdacNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    quantity: pm.environment.get(\"quantity\") || getRandomNumber(1, 100),\r",
                      "    costPrice: costPrice.toString(), // Updating cost price\r",
                      "    sellingPrice: sellingPrice.toString(), // Updating selling price\r",
                      "    eanNumber: pm.environment.get(\"eanNumber\") || getRandomNumber(1000, 9999).toString(),\r",
                      "    categoryId: pm.environment.get(\"categoryId4p\"),\r",
                      "    saleStart: pm.environment.get(\"saleStart\") || \"2025-01-01T00:00:00.000Z\",\r",
                      "    saleEnd: pm.environment.get(\"saleEnd\") || \"2026-12-31T00:00:00.000Z\"\r",
                      "};\r",
                      "\r",
                      "// ✅ Update form-data in the request body (excluding images)\r",
                      "pm.request.body.update({\r",
                      "    mode: \"formdata\",\r",
                      "    formdata: Object.entries(productDetails).map(([key, value]) => ({\r",
                      "        key: key,\r",
                      "        value: value,\r",
                      "        type: \"text\"\r",
                      "    }))\r",
                      "});\r",
                      "\r",
                      "// ✅ Log generated data for debugging\r",
                      "console.log(\"🔹 Updated Product Details:\", productDetails);\r",
                      ""
                    ],
                    "_lastExecutionId": "4b89423d-5840-4106-a7ed-22222b02f904"
                  }
                }
              ]
            },
            {
              "id": "83efae9e-6fdb-489c-a62b-ec39aa817070",
              "name": "delete product",
              "request": {
                "url": {
                  "path": [
                    "products",
                    ":id"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": [
                    {
                      "type": "any",
                      "value": "{{firstProductId}}",
                      "key": "id"
                    }
                  ]
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b2e3e38f-f2f4-45ca-9a31-67a7b8df002d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate product data structure\r",
                      "pm.test(\"Response contains valid product details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\");\r",
                      "    let product = jsonData.data;\r",
                      "    \r",
                      "    pm.expect(product).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"title\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"sellingPrice\").that.is.a(\"string\");\r",
                      "    pm.expect(product).to.have.property(\"description\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "e4cbd781-c87b-4533-b4b1-cb5d3b8b43ee"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5bd1202c-89cc-4b06-b701-f4ef429f75e9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Retrieve stored product IDs from the environment\r",
                      "let storedProductIds = pm.environment.get(\"product_ids\");\r",
                      "storedProductIds = storedProductIds ? JSON.parse(storedProductIds) : [];\r",
                      "\r",
                      "// ✅ Select a random product ID and store it before the request runs\r",
                      "if (storedProductIds.length > 0) {\r",
                      "    let randomIndex = Math.floor(Math.random() * storedProductIds.length);\r",
                      "    let randomProductId = storedProductIds[randomIndex];\r",
                      "\r",
                      "    // ✅ Store the selected product ID for use in the request\r",
                      "    pm.environment.set(\"randomProductId\", randomProductId);\r",
                      "    console.log(\"Randomly selected Product ID:\", randomProductId);\r",
                      "} else {\r",
                      "    console.warn(\"No stored product IDs available! Ensure the previous request fetched product IDs correctly.\");\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "23bd7d97-e382-4214-b968-09ce1c0c2dfe"
                  }
                }
              ]
            },
            {
              "id": "e7c6f7cf-f1fb-425f-9c69-f9ea93232803",
              "name": "Top brands",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "brands"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "83c0d520-e58c-413f-ab9a-6a86fce39f05",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Product top brand fetched successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure (Array of Brands)\r",
                      "pm.test(\"Response contains an array of top brands\", function () {\r",
                      "    pm.expect(jsonData.data).to.be.an(\"array\");\r",
                      "\r",
                      "    if (jsonData.data.length > 0) {\r",
                      "        let brand = jsonData.data[0];\r",
                      "\r",
                      "        pm.expect(brand).to.have.property(\"brandName\").that.is.a(\"string\");\r",
                      "        pm.expect(brand).to.have.property(\"count\").that.is.a(\"number\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store brand names for future use\r",
                      "if (jsonData.data.length > 0) {\r",
                      "    let brandNames = jsonData.data.map(brand => brand.brandName);\r",
                      "    pm.environment.set(\"brand_names\", JSON.stringify(brandNames));\r",
                      "    console.log(\"Stored brand names:\", brandNames);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "4158cfe7-cb1b-4531-9629-d21d38d52ec4"
                  }
                }
              ]
            },
            {
              "id": "f1be75de-bb8e-4f8c-990d-f9230ed0fc7d",
              "name": "search products",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "search"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"q\": \"LG\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "70e98749-492d-42fd-b924-96dcad8f7dd5",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ TC_001 - Validate 200 OK response for a valid search query\r",
                      "pm.test(\"TC_001 - Status code is 200 for a valid search\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_002 - Validate response structure\r",
                      "pm.test(\"TC_002 - Response contains all expected fields\", function () {\r",
                      "    let jsonData = pm.response.json();\r",
                      "    \r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.message).to.equal(\"Product fetched successfully.\");\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_003 - Validate search query response does not return 404 or empty result set\r",
                      "pm.test(\"TC_003 - Valid search should not return 404 or empty result set\", function () {\r",
                      "    let data = pm.response.json().data;\r",
                      "    \r",
                      "    pm.expect(pm.response.code).not.to.eql(404);\r",
                      "    pm.expect(data.result.length).to.be.above(0, \"Search query should return at least one result\");\r",
                      "});\r",
                      "\r",
                      "// ✅ TC_004 - Validate response time (Performance)\r",
                      "pm.test(\"TC_004 - API response time should be within 1000ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a2806663-5e06-423a-9899-7ec1f8034045"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "952bc681-fe45-49e5-bb64-9160f2020745",
          "length": 40,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "d2865f5d-1f1f-48dd-8633-af1da76fcdb2",
          "scriptId": "70e98749-492d-42fd-b924-96dcad8f7dd5",
          "execution": "a2806663-5e06-423a-9899-7ec1f8034045"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status code is 201 (Created)",
          "message": "expected response to have status code 201 but got 401",
          "stack": "AssertionError: expected response to have status code 201 but got 401\n   at Object.eval sandbox-script.js:2:35)",
          "checksum": "1e7a64d6fe2774b5afcf7083d42688f7",
          "id": "ae6e6dc0-da5a-4960-b9e1-bba668596517",
          "timestamp": 1747063089376,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 35,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "e07737be-bc80-4064-964b-d7b5fc400e57",
          "name": "create seller",
          "request": {
            "url": {
              "path": [
                "seller"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "managerFullName",
                  "value": "{{managerFullName}}",
                  "type": "text"
                },
                {
                  "key": "shopName",
                  "value": "{{shopName}}",
                  "type": "text"
                },
                {
                  "key": "cacNumber",
                  "value": "{{cacNumber}}",
                  "type": "text"
                },
                {
                  "key": "documentType",
                  "value": "NIN",
                  "type": "text"
                },
                {
                  "key": "documentNumber",
                  "value": "77280892822",
                  "type": "text"
                },
                {
                  "key": "phoneNumber",
                  "value": "08109642088",
                  "type": "text"
                },
                {
                  "disabled": true,
                  "key": "idNumber",
                  "value": "56254709617",
                  "type": "text"
                },
                {
                  "key": "firstName",
                  "value": "Fidelis",
                  "type": "text"
                },
                {
                  "key": "lastName",
                  "value": "Ogbeni",
                  "type": "text"
                },
                {
                  "key": "accountType",
                  "value": "INDIVIDUAL",
                  "type": "text"
                },
                {
                  "key": "bankCode",
                  "value": "50211",
                  "type": "text"
                },
                {
                  "key": "bankName",
                  "value": "FirstBank",
                  "type": "text"
                },
                {
                  "key": "accountNumber",
                  "value": "3066415171",
                  "type": "text"
                },
                {
                  "key": "documentImage",
                  "type": "file",
                  "src": "postman-cloud:///1f00bb20-a0aa-4780-95e0-d485a8c42125"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ebb38ccc-2e64-4b9e-bd2b-55d1c0ed269c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// // Function to generate a random Nigerian phone number\r",
                  "// function generatePhoneNumber() {\r",
                  "//     return \"081\" + Math.floor(10000000 + Math.random() * 90000000); // Generates 081xxxxxxx\r",
                  "// }\r",
                  "\r",
                  "// // Function to generate a random 11-digit NIN number\r",
                  "// function generateNIN() {\r",
                  "//     return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
                  "// }\r",
                  "\r",
                  "// // Function to generate a random shop name\r",
                  "// function generateShopName() {\r",
                  "//     const shopPrefixes = [\"Super\", \"Mega\", \"Classic\", \"Elite\", \"Premium\", \"Budget\"];\r",
                  "//     const shopSuffixes = [\"Mart\", \"Shop\", \"Store\", \"Bazaar\", \"Hub\", \"Outlet\"];\r",
                  "//     return (\r",
                  "//         shopPrefixes[Math.floor(Math.random() * shopPrefixes.length)] +\r",
                  "//         \" \" +\r",
                  "//         shopSuffixes[Math.floor(Math.random() * shopSuffixes.length)]\r",
                  "//     );\r",
                  "// }\r",
                  "\r",
                  "// // Function to generate a random Nigerian bank code\r",
                  "// function getRandomBank() {\r",
                  "//     const banks = [\r",
                  "//         { name: \"FirstBank\", code: \"50211\" },\r",
                  "//         { name: \"Access Bank\", code: \"044\" },\r",
                  "//         { name: \"Zenith Bank\", code: \"057\" },\r",
                  "//         { name: \"GTBank\", code: \"058\" },\r",
                  "//         { name: \"UBA\", code: \"033\" }\r",
                  "//     ];\r",
                  "//     return banks[Math.floor(Math.random() * banks.length)];\r",
                  "// }\r",
                  "\r",
                  "// // Generate random seller details\r",
                  "// let firstName = [\"John\", \"James\", \"Sarah\", \"Jane\", \"Michael\", \"Fidelis\"][Math.floor(Math.random() * 6)];\r",
                  "// let lastName = [\"Doe\", \"Smith\", \"Johnson\", \"Brown\", \"Ogbeni\", \"Adams\"][Math.floor(Math.random() * 6)];\r",
                  "// let managerFullName = firstName + \" \" + lastName;\r",
                  "// let shopName = generateShopName();\r",
                  "// let cacNumber = Math.floor(1000 + Math.random() * 9000).toString(); // 4-digit CAC Number\r",
                  "// let documentType = \"NIN\";\r",
                  "// let documentNumber = generateNIN();\r",
                  "// let phoneNumber = generatePhoneNumber();\r",
                  "// let accountType = \"INDIVIDUAL\";\r",
                  "// let bankDetails = getRandomBank();\r",
                  "// let accountNumber = Math.floor(1000000000 + Math.random() * 9000000000).toString();\r",
                  "// let documentImage = \"https://i.imgur.com/10V6mFc.jpeg\"; // Simulated file name\r",
                  "\r",
                  "// // Store variables in Postman environment\r",
                  "// pm.environment.set(\"managerFullName\", managerFullName);\r",
                  "// pm.environment.set(\"firstName\", firstName);\r",
                  "// pm.environment.set(\"lastName\", lastName);\r",
                  "// pm.environment.set(\"shopName\", shopName);\r",
                  "// pm.environment.set(\"cacNumber\", cacNumber);\r",
                  "// pm.environment.set(\"documentType\", documentType);\r",
                  "// pm.environment.set(\"documentNumber\", documentNumber);\r",
                  "// pm.environment.set(\"phoneNumber\", phoneNumber);\r",
                  "// pm.environment.set(\"accountType\", accountType);\r",
                  "// pm.environment.set(\"bankCode\", bankDetails.code);\r",
                  "// pm.environment.set(\"bankName\", bankDetails.name);\r",
                  "// pm.environment.set(\"accountNumber\", accountNumber);\r",
                  "// pm.environment.set(\"documentImage\", documentImage);\r",
                  "\r",
                  "// // Log generated values for debugging\r",
                  "// console.log(\"✅ Auto-Generated Seller Details:\");\r",
                  "// console.log({\r",
                  "//     managerFullName,\r",
                  "//     firstName,\r",
                  "//     lastName,\r",
                  "//     shopName,\r",
                  "//     cacNumber,\r",
                  "//     documentType,\r",
                  "//     documentNumber,\r",
                  "//     phoneNumber,\r",
                  "//     accountType,\r",
                  "//     bankCode: bankDetails.code,\r",
                  "//     bankName: bankDetails.name,\r",
                  "//     accountNumber,\r",
                  "//     documentImage\r",
                  "// });\r",
                  ""
                ],
                "_lastExecutionId": "b53e8786-454b-43da-954d-a48b0dc523cb"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate response status code\r",
                  "pm.test(\"Status code is 201 (Created)\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success message\r",
                  "pm.test(\"Response message is correct\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\", \"Seller created successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response data structure\r",
                  "pm.test(\"Response contains seller details\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"sellerId\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"managerFullName\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"shopName\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"phoneNumber\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"bankName\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"accountNumber\").that.is.a(\"string\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Store seller ID for future requests\r",
                  "// pm.environment.set(\"sellerId\", jsonData.data.sellerId);\r",
                  "// console.log(\"Seller ID stored:\", jsonData.data.sellerId);\r",
                  "\r",
                  "// ✅ Validate error response for invalid input\r",
                  "pm.test(\"Error response for invalid input\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Invalid input\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate error response for missing required fields\r",
                  "pm.test(\"Error response for missing fields\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Required fields are missing\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
              }
            }
          ]
        },
        "parent": {
          "id": "2b87c8e4-11a7-4c27-8f22-f017a7a60025",
          "name": "seller",
          "item": [
            {
              "id": "e07737be-bc80-4064-964b-d7b5fc400e57",
              "name": "create seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "managerFullName",
                      "value": "{{managerFullName}}",
                      "type": "text"
                    },
                    {
                      "key": "shopName",
                      "value": "{{shopName}}",
                      "type": "text"
                    },
                    {
                      "key": "cacNumber",
                      "value": "{{cacNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "documentType",
                      "value": "NIN",
                      "type": "text"
                    },
                    {
                      "key": "documentNumber",
                      "value": "77280892822",
                      "type": "text"
                    },
                    {
                      "key": "phoneNumber",
                      "value": "08109642088",
                      "type": "text"
                    },
                    {
                      "disabled": true,
                      "key": "idNumber",
                      "value": "56254709617",
                      "type": "text"
                    },
                    {
                      "key": "firstName",
                      "value": "Fidelis",
                      "type": "text"
                    },
                    {
                      "key": "lastName",
                      "value": "Ogbeni",
                      "type": "text"
                    },
                    {
                      "key": "accountType",
                      "value": "INDIVIDUAL",
                      "type": "text"
                    },
                    {
                      "key": "bankCode",
                      "value": "50211",
                      "type": "text"
                    },
                    {
                      "key": "bankName",
                      "value": "FirstBank",
                      "type": "text"
                    },
                    {
                      "key": "accountNumber",
                      "value": "3066415171",
                      "type": "text"
                    },
                    {
                      "key": "documentImage",
                      "type": "file",
                      "src": "postman-cloud:///1f00bb20-a0aa-4780-95e0-d485a8c42125"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ebb38ccc-2e64-4b9e-bd2b-55d1c0ed269c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// // Function to generate a random Nigerian phone number\r",
                      "// function generatePhoneNumber() {\r",
                      "//     return \"081\" + Math.floor(10000000 + Math.random() * 90000000); // Generates 081xxxxxxx\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random 11-digit NIN number\r",
                      "// function generateNIN() {\r",
                      "//     return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random shop name\r",
                      "// function generateShopName() {\r",
                      "//     const shopPrefixes = [\"Super\", \"Mega\", \"Classic\", \"Elite\", \"Premium\", \"Budget\"];\r",
                      "//     const shopSuffixes = [\"Mart\", \"Shop\", \"Store\", \"Bazaar\", \"Hub\", \"Outlet\"];\r",
                      "//     return (\r",
                      "//         shopPrefixes[Math.floor(Math.random() * shopPrefixes.length)] +\r",
                      "//         \" \" +\r",
                      "//         shopSuffixes[Math.floor(Math.random() * shopSuffixes.length)]\r",
                      "//     );\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random Nigerian bank code\r",
                      "// function getRandomBank() {\r",
                      "//     const banks = [\r",
                      "//         { name: \"FirstBank\", code: \"50211\" },\r",
                      "//         { name: \"Access Bank\", code: \"044\" },\r",
                      "//         { name: \"Zenith Bank\", code: \"057\" },\r",
                      "//         { name: \"GTBank\", code: \"058\" },\r",
                      "//         { name: \"UBA\", code: \"033\" }\r",
                      "//     ];\r",
                      "//     return banks[Math.floor(Math.random() * banks.length)];\r",
                      "// }\r",
                      "\r",
                      "// // Generate random seller details\r",
                      "// let firstName = [\"John\", \"James\", \"Sarah\", \"Jane\", \"Michael\", \"Fidelis\"][Math.floor(Math.random() * 6)];\r",
                      "// let lastName = [\"Doe\", \"Smith\", \"Johnson\", \"Brown\", \"Ogbeni\", \"Adams\"][Math.floor(Math.random() * 6)];\r",
                      "// let managerFullName = firstName + \" \" + lastName;\r",
                      "// let shopName = generateShopName();\r",
                      "// let cacNumber = Math.floor(1000 + Math.random() * 9000).toString(); // 4-digit CAC Number\r",
                      "// let documentType = \"NIN\";\r",
                      "// let documentNumber = generateNIN();\r",
                      "// let phoneNumber = generatePhoneNumber();\r",
                      "// let accountType = \"INDIVIDUAL\";\r",
                      "// let bankDetails = getRandomBank();\r",
                      "// let accountNumber = Math.floor(1000000000 + Math.random() * 9000000000).toString();\r",
                      "// let documentImage = \"https://i.imgur.com/10V6mFc.jpeg\"; // Simulated file name\r",
                      "\r",
                      "// // Store variables in Postman environment\r",
                      "// pm.environment.set(\"managerFullName\", managerFullName);\r",
                      "// pm.environment.set(\"firstName\", firstName);\r",
                      "// pm.environment.set(\"lastName\", lastName);\r",
                      "// pm.environment.set(\"shopName\", shopName);\r",
                      "// pm.environment.set(\"cacNumber\", cacNumber);\r",
                      "// pm.environment.set(\"documentType\", documentType);\r",
                      "// pm.environment.set(\"documentNumber\", documentNumber);\r",
                      "// pm.environment.set(\"phoneNumber\", phoneNumber);\r",
                      "// pm.environment.set(\"accountType\", accountType);\r",
                      "// pm.environment.set(\"bankCode\", bankDetails.code);\r",
                      "// pm.environment.set(\"bankName\", bankDetails.name);\r",
                      "// pm.environment.set(\"accountNumber\", accountNumber);\r",
                      "// pm.environment.set(\"documentImage\", documentImage);\r",
                      "\r",
                      "// // Log generated values for debugging\r",
                      "// console.log(\"✅ Auto-Generated Seller Details:\");\r",
                      "// console.log({\r",
                      "//     managerFullName,\r",
                      "//     firstName,\r",
                      "//     lastName,\r",
                      "//     shopName,\r",
                      "//     cacNumber,\r",
                      "//     documentType,\r",
                      "//     documentNumber,\r",
                      "//     phoneNumber,\r",
                      "//     accountType,\r",
                      "//     bankCode: bankDetails.code,\r",
                      "//     bankName: bankDetails.name,\r",
                      "//     accountNumber,\r",
                      "//     documentImage\r",
                      "// });\r",
                      ""
                    ],
                    "_lastExecutionId": "b53e8786-454b-43da-954d-a48b0dc523cb"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 201 (Created)\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success message\r",
                      "pm.test(\"Response message is correct\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\", \"Seller created successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response data structure\r",
                      "pm.test(\"Response contains seller details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"sellerId\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"managerFullName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"shopName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"phoneNumber\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"bankName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"accountNumber\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Store seller ID for future requests\r",
                      "// pm.environment.set(\"sellerId\", jsonData.data.sellerId);\r",
                      "// console.log(\"Seller ID stored:\", jsonData.data.sellerId);\r",
                      "\r",
                      "// ✅ Validate error response for invalid input\r",
                      "pm.test(\"Error response for invalid input\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Invalid input\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate error response for missing required fields\r",
                      "pm.test(\"Error response for missing fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Required fields are missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
                  }
                }
              ]
            },
            {
              "id": "952e40e0-1f18-4aea-89a2-c66913ffb6a9",
              "name": "get seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eb7f817-0a29-4b44-9136-eef0297a8bac",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure\r",
                      "pm.test(\"Response contains valid seller details or No Seller added\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "\r",
                      "    let seller = jsonData.data;\r",
                      "    \r",
                      "    if(jsonData.data == null){\r",
                      "        pm.expect(jsonData.message).to.include(\"No Seller added\");\r",
                      "\r",
                      "    } else{\r",
                      "    pm.expect(seller).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"email\").that.is.a(\"string\").and.includes(\"@\");\r",
                      "    pm.expect(seller).to.have.property(\"phone\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"storeName\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store Seller ID for future use\r",
                      "if (jsonData.data && jsonData.data.id) {\r",
                      "    pm.environment.set(\"seller_id\", jsonData.data.id);\r",
                      "    console.log(\"Stored Seller ID:\", jsonData.data.id);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "c6da4cec-21d4-44a6-8722-930ee4252133"
                  }
                }
              ]
            },
            {
              "id": "6985ff3d-9862-4e99-83a1-16449fed7da1",
              "name": "delete seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "612899eb-aa78-41fa-b606-768894bf91a5",
              "name": "get seller preference",
              "request": {
                "url": {
                  "path": [
                    "seller",
                    "preferences"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "249f0bc1-7156-4aa8-a9bc-40fef11f7a5f",
              "name": "seller products",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "seller-products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "categoryId",
                      "value": "{{categoryId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "6c8fd3eb-820c-4857-9dfc-e45bcf672641",
              "name": "delete seller preference",
              "request": {
                "url": {
                  "path": [
                    "seller",
                    "preferences"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c004475c-25b2-42df-82b4-d58ecd921eef",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code (200 for success, 404 if no preferences exist)\r",
                      "pm.test(\"Status code is 200 or 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
                      "});\r",
                      "\r",
                      "// ✅ Check if seller preferences were deleted\r",
                      "pm.test(\"Validate seller preferences deletion response\", function () {\r",
                      "    if (jsonData.success === false) {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\", \"No seller preferences found to delete.\");\r",
                      "        console.log(\"❌ No seller preferences found.\");\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\", \"Seller preferences deleted successfully.\");\r",
                      "        console.log(\"✅ Seller preferences deleted successfully.\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3c7953e4-2c9b-40a3-b740-a7f3553162b2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "185f16ea-c567-4a7e-a2ba-7045e1af4a88",
          "length": 40,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "44bd28b1-a908-42da-9ffa-0aa0ecdda280",
          "scriptId": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
          "execution": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Response contains success flag",
          "message": "expected { success: false, …(1) } to have property 'success' of true, but got false",
          "stack": "AssertionError: expected { success: false, …(1) } to have property 'success' of true, but got false\n   at Object.eval sandbox-script.js:3:35)",
          "checksum": "c86ba871c9d99d585558a1a355b167e4",
          "id": "16eeef33-7ed4-4f11-9537-98cb75ca1af1",
          "timestamp": 1747063089377,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 35,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "e07737be-bc80-4064-964b-d7b5fc400e57",
          "name": "create seller",
          "request": {
            "url": {
              "path": [
                "seller"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "managerFullName",
                  "value": "{{managerFullName}}",
                  "type": "text"
                },
                {
                  "key": "shopName",
                  "value": "{{shopName}}",
                  "type": "text"
                },
                {
                  "key": "cacNumber",
                  "value": "{{cacNumber}}",
                  "type": "text"
                },
                {
                  "key": "documentType",
                  "value": "NIN",
                  "type": "text"
                },
                {
                  "key": "documentNumber",
                  "value": "77280892822",
                  "type": "text"
                },
                {
                  "key": "phoneNumber",
                  "value": "08109642088",
                  "type": "text"
                },
                {
                  "disabled": true,
                  "key": "idNumber",
                  "value": "56254709617",
                  "type": "text"
                },
                {
                  "key": "firstName",
                  "value": "Fidelis",
                  "type": "text"
                },
                {
                  "key": "lastName",
                  "value": "Ogbeni",
                  "type": "text"
                },
                {
                  "key": "accountType",
                  "value": "INDIVIDUAL",
                  "type": "text"
                },
                {
                  "key": "bankCode",
                  "value": "50211",
                  "type": "text"
                },
                {
                  "key": "bankName",
                  "value": "FirstBank",
                  "type": "text"
                },
                {
                  "key": "accountNumber",
                  "value": "3066415171",
                  "type": "text"
                },
                {
                  "key": "documentImage",
                  "type": "file",
                  "src": "postman-cloud:///1f00bb20-a0aa-4780-95e0-d485a8c42125"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ebb38ccc-2e64-4b9e-bd2b-55d1c0ed269c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// // Function to generate a random Nigerian phone number\r",
                  "// function generatePhoneNumber() {\r",
                  "//     return \"081\" + Math.floor(10000000 + Math.random() * 90000000); // Generates 081xxxxxxx\r",
                  "// }\r",
                  "\r",
                  "// // Function to generate a random 11-digit NIN number\r",
                  "// function generateNIN() {\r",
                  "//     return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
                  "// }\r",
                  "\r",
                  "// // Function to generate a random shop name\r",
                  "// function generateShopName() {\r",
                  "//     const shopPrefixes = [\"Super\", \"Mega\", \"Classic\", \"Elite\", \"Premium\", \"Budget\"];\r",
                  "//     const shopSuffixes = [\"Mart\", \"Shop\", \"Store\", \"Bazaar\", \"Hub\", \"Outlet\"];\r",
                  "//     return (\r",
                  "//         shopPrefixes[Math.floor(Math.random() * shopPrefixes.length)] +\r",
                  "//         \" \" +\r",
                  "//         shopSuffixes[Math.floor(Math.random() * shopSuffixes.length)]\r",
                  "//     );\r",
                  "// }\r",
                  "\r",
                  "// // Function to generate a random Nigerian bank code\r",
                  "// function getRandomBank() {\r",
                  "//     const banks = [\r",
                  "//         { name: \"FirstBank\", code: \"50211\" },\r",
                  "//         { name: \"Access Bank\", code: \"044\" },\r",
                  "//         { name: \"Zenith Bank\", code: \"057\" },\r",
                  "//         { name: \"GTBank\", code: \"058\" },\r",
                  "//         { name: \"UBA\", code: \"033\" }\r",
                  "//     ];\r",
                  "//     return banks[Math.floor(Math.random() * banks.length)];\r",
                  "// }\r",
                  "\r",
                  "// // Generate random seller details\r",
                  "// let firstName = [\"John\", \"James\", \"Sarah\", \"Jane\", \"Michael\", \"Fidelis\"][Math.floor(Math.random() * 6)];\r",
                  "// let lastName = [\"Doe\", \"Smith\", \"Johnson\", \"Brown\", \"Ogbeni\", \"Adams\"][Math.floor(Math.random() * 6)];\r",
                  "// let managerFullName = firstName + \" \" + lastName;\r",
                  "// let shopName = generateShopName();\r",
                  "// let cacNumber = Math.floor(1000 + Math.random() * 9000).toString(); // 4-digit CAC Number\r",
                  "// let documentType = \"NIN\";\r",
                  "// let documentNumber = generateNIN();\r",
                  "// let phoneNumber = generatePhoneNumber();\r",
                  "// let accountType = \"INDIVIDUAL\";\r",
                  "// let bankDetails = getRandomBank();\r",
                  "// let accountNumber = Math.floor(1000000000 + Math.random() * 9000000000).toString();\r",
                  "// let documentImage = \"https://i.imgur.com/10V6mFc.jpeg\"; // Simulated file name\r",
                  "\r",
                  "// // Store variables in Postman environment\r",
                  "// pm.environment.set(\"managerFullName\", managerFullName);\r",
                  "// pm.environment.set(\"firstName\", firstName);\r",
                  "// pm.environment.set(\"lastName\", lastName);\r",
                  "// pm.environment.set(\"shopName\", shopName);\r",
                  "// pm.environment.set(\"cacNumber\", cacNumber);\r",
                  "// pm.environment.set(\"documentType\", documentType);\r",
                  "// pm.environment.set(\"documentNumber\", documentNumber);\r",
                  "// pm.environment.set(\"phoneNumber\", phoneNumber);\r",
                  "// pm.environment.set(\"accountType\", accountType);\r",
                  "// pm.environment.set(\"bankCode\", bankDetails.code);\r",
                  "// pm.environment.set(\"bankName\", bankDetails.name);\r",
                  "// pm.environment.set(\"accountNumber\", accountNumber);\r",
                  "// pm.environment.set(\"documentImage\", documentImage);\r",
                  "\r",
                  "// // Log generated values for debugging\r",
                  "// console.log(\"✅ Auto-Generated Seller Details:\");\r",
                  "// console.log({\r",
                  "//     managerFullName,\r",
                  "//     firstName,\r",
                  "//     lastName,\r",
                  "//     shopName,\r",
                  "//     cacNumber,\r",
                  "//     documentType,\r",
                  "//     documentNumber,\r",
                  "//     phoneNumber,\r",
                  "//     accountType,\r",
                  "//     bankCode: bankDetails.code,\r",
                  "//     bankName: bankDetails.name,\r",
                  "//     accountNumber,\r",
                  "//     documentImage\r",
                  "// });\r",
                  ""
                ],
                "_lastExecutionId": "b53e8786-454b-43da-954d-a48b0dc523cb"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate response status code\r",
                  "pm.test(\"Status code is 201 (Created)\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success message\r",
                  "pm.test(\"Response message is correct\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\", \"Seller created successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response data structure\r",
                  "pm.test(\"Response contains seller details\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"sellerId\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"managerFullName\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"shopName\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"phoneNumber\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"bankName\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"accountNumber\").that.is.a(\"string\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Store seller ID for future requests\r",
                  "// pm.environment.set(\"sellerId\", jsonData.data.sellerId);\r",
                  "// console.log(\"Seller ID stored:\", jsonData.data.sellerId);\r",
                  "\r",
                  "// ✅ Validate error response for invalid input\r",
                  "pm.test(\"Error response for invalid input\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Invalid input\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate error response for missing required fields\r",
                  "pm.test(\"Error response for missing fields\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Required fields are missing\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
              }
            }
          ]
        },
        "parent": {
          "id": "2b87c8e4-11a7-4c27-8f22-f017a7a60025",
          "name": "seller",
          "item": [
            {
              "id": "e07737be-bc80-4064-964b-d7b5fc400e57",
              "name": "create seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "managerFullName",
                      "value": "{{managerFullName}}",
                      "type": "text"
                    },
                    {
                      "key": "shopName",
                      "value": "{{shopName}}",
                      "type": "text"
                    },
                    {
                      "key": "cacNumber",
                      "value": "{{cacNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "documentType",
                      "value": "NIN",
                      "type": "text"
                    },
                    {
                      "key": "documentNumber",
                      "value": "77280892822",
                      "type": "text"
                    },
                    {
                      "key": "phoneNumber",
                      "value": "08109642088",
                      "type": "text"
                    },
                    {
                      "disabled": true,
                      "key": "idNumber",
                      "value": "56254709617",
                      "type": "text"
                    },
                    {
                      "key": "firstName",
                      "value": "Fidelis",
                      "type": "text"
                    },
                    {
                      "key": "lastName",
                      "value": "Ogbeni",
                      "type": "text"
                    },
                    {
                      "key": "accountType",
                      "value": "INDIVIDUAL",
                      "type": "text"
                    },
                    {
                      "key": "bankCode",
                      "value": "50211",
                      "type": "text"
                    },
                    {
                      "key": "bankName",
                      "value": "FirstBank",
                      "type": "text"
                    },
                    {
                      "key": "accountNumber",
                      "value": "3066415171",
                      "type": "text"
                    },
                    {
                      "key": "documentImage",
                      "type": "file",
                      "src": "postman-cloud:///1f00bb20-a0aa-4780-95e0-d485a8c42125"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ebb38ccc-2e64-4b9e-bd2b-55d1c0ed269c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// // Function to generate a random Nigerian phone number\r",
                      "// function generatePhoneNumber() {\r",
                      "//     return \"081\" + Math.floor(10000000 + Math.random() * 90000000); // Generates 081xxxxxxx\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random 11-digit NIN number\r",
                      "// function generateNIN() {\r",
                      "//     return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random shop name\r",
                      "// function generateShopName() {\r",
                      "//     const shopPrefixes = [\"Super\", \"Mega\", \"Classic\", \"Elite\", \"Premium\", \"Budget\"];\r",
                      "//     const shopSuffixes = [\"Mart\", \"Shop\", \"Store\", \"Bazaar\", \"Hub\", \"Outlet\"];\r",
                      "//     return (\r",
                      "//         shopPrefixes[Math.floor(Math.random() * shopPrefixes.length)] +\r",
                      "//         \" \" +\r",
                      "//         shopSuffixes[Math.floor(Math.random() * shopSuffixes.length)]\r",
                      "//     );\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random Nigerian bank code\r",
                      "// function getRandomBank() {\r",
                      "//     const banks = [\r",
                      "//         { name: \"FirstBank\", code: \"50211\" },\r",
                      "//         { name: \"Access Bank\", code: \"044\" },\r",
                      "//         { name: \"Zenith Bank\", code: \"057\" },\r",
                      "//         { name: \"GTBank\", code: \"058\" },\r",
                      "//         { name: \"UBA\", code: \"033\" }\r",
                      "//     ];\r",
                      "//     return banks[Math.floor(Math.random() * banks.length)];\r",
                      "// }\r",
                      "\r",
                      "// // Generate random seller details\r",
                      "// let firstName = [\"John\", \"James\", \"Sarah\", \"Jane\", \"Michael\", \"Fidelis\"][Math.floor(Math.random() * 6)];\r",
                      "// let lastName = [\"Doe\", \"Smith\", \"Johnson\", \"Brown\", \"Ogbeni\", \"Adams\"][Math.floor(Math.random() * 6)];\r",
                      "// let managerFullName = firstName + \" \" + lastName;\r",
                      "// let shopName = generateShopName();\r",
                      "// let cacNumber = Math.floor(1000 + Math.random() * 9000).toString(); // 4-digit CAC Number\r",
                      "// let documentType = \"NIN\";\r",
                      "// let documentNumber = generateNIN();\r",
                      "// let phoneNumber = generatePhoneNumber();\r",
                      "// let accountType = \"INDIVIDUAL\";\r",
                      "// let bankDetails = getRandomBank();\r",
                      "// let accountNumber = Math.floor(1000000000 + Math.random() * 9000000000).toString();\r",
                      "// let documentImage = \"https://i.imgur.com/10V6mFc.jpeg\"; // Simulated file name\r",
                      "\r",
                      "// // Store variables in Postman environment\r",
                      "// pm.environment.set(\"managerFullName\", managerFullName);\r",
                      "// pm.environment.set(\"firstName\", firstName);\r",
                      "// pm.environment.set(\"lastName\", lastName);\r",
                      "// pm.environment.set(\"shopName\", shopName);\r",
                      "// pm.environment.set(\"cacNumber\", cacNumber);\r",
                      "// pm.environment.set(\"documentType\", documentType);\r",
                      "// pm.environment.set(\"documentNumber\", documentNumber);\r",
                      "// pm.environment.set(\"phoneNumber\", phoneNumber);\r",
                      "// pm.environment.set(\"accountType\", accountType);\r",
                      "// pm.environment.set(\"bankCode\", bankDetails.code);\r",
                      "// pm.environment.set(\"bankName\", bankDetails.name);\r",
                      "// pm.environment.set(\"accountNumber\", accountNumber);\r",
                      "// pm.environment.set(\"documentImage\", documentImage);\r",
                      "\r",
                      "// // Log generated values for debugging\r",
                      "// console.log(\"✅ Auto-Generated Seller Details:\");\r",
                      "// console.log({\r",
                      "//     managerFullName,\r",
                      "//     firstName,\r",
                      "//     lastName,\r",
                      "//     shopName,\r",
                      "//     cacNumber,\r",
                      "//     documentType,\r",
                      "//     documentNumber,\r",
                      "//     phoneNumber,\r",
                      "//     accountType,\r",
                      "//     bankCode: bankDetails.code,\r",
                      "//     bankName: bankDetails.name,\r",
                      "//     accountNumber,\r",
                      "//     documentImage\r",
                      "// });\r",
                      ""
                    ],
                    "_lastExecutionId": "b53e8786-454b-43da-954d-a48b0dc523cb"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 201 (Created)\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success message\r",
                      "pm.test(\"Response message is correct\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\", \"Seller created successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response data structure\r",
                      "pm.test(\"Response contains seller details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"sellerId\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"managerFullName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"shopName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"phoneNumber\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"bankName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"accountNumber\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Store seller ID for future requests\r",
                      "// pm.environment.set(\"sellerId\", jsonData.data.sellerId);\r",
                      "// console.log(\"Seller ID stored:\", jsonData.data.sellerId);\r",
                      "\r",
                      "// ✅ Validate error response for invalid input\r",
                      "pm.test(\"Error response for invalid input\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Invalid input\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate error response for missing required fields\r",
                      "pm.test(\"Error response for missing fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Required fields are missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
                  }
                }
              ]
            },
            {
              "id": "952e40e0-1f18-4aea-89a2-c66913ffb6a9",
              "name": "get seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eb7f817-0a29-4b44-9136-eef0297a8bac",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure\r",
                      "pm.test(\"Response contains valid seller details or No Seller added\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "\r",
                      "    let seller = jsonData.data;\r",
                      "    \r",
                      "    if(jsonData.data == null){\r",
                      "        pm.expect(jsonData.message).to.include(\"No Seller added\");\r",
                      "\r",
                      "    } else{\r",
                      "    pm.expect(seller).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"email\").that.is.a(\"string\").and.includes(\"@\");\r",
                      "    pm.expect(seller).to.have.property(\"phone\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"storeName\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store Seller ID for future use\r",
                      "if (jsonData.data && jsonData.data.id) {\r",
                      "    pm.environment.set(\"seller_id\", jsonData.data.id);\r",
                      "    console.log(\"Stored Seller ID:\", jsonData.data.id);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "c6da4cec-21d4-44a6-8722-930ee4252133"
                  }
                }
              ]
            },
            {
              "id": "6985ff3d-9862-4e99-83a1-16449fed7da1",
              "name": "delete seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "612899eb-aa78-41fa-b606-768894bf91a5",
              "name": "get seller preference",
              "request": {
                "url": {
                  "path": [
                    "seller",
                    "preferences"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "249f0bc1-7156-4aa8-a9bc-40fef11f7a5f",
              "name": "seller products",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "seller-products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "categoryId",
                      "value": "{{categoryId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "6c8fd3eb-820c-4857-9dfc-e45bcf672641",
              "name": "delete seller preference",
              "request": {
                "url": {
                  "path": [
                    "seller",
                    "preferences"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c004475c-25b2-42df-82b4-d58ecd921eef",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code (200 for success, 404 if no preferences exist)\r",
                      "pm.test(\"Status code is 200 or 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
                      "});\r",
                      "\r",
                      "// ✅ Check if seller preferences were deleted\r",
                      "pm.test(\"Validate seller preferences deletion response\", function () {\r",
                      "    if (jsonData.success === false) {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\", \"No seller preferences found to delete.\");\r",
                      "        console.log(\"❌ No seller preferences found.\");\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\", \"Seller preferences deleted successfully.\");\r",
                      "        console.log(\"✅ Seller preferences deleted successfully.\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3c7953e4-2c9b-40a3-b740-a7f3553162b2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "185f16ea-c567-4a7e-a2ba-7045e1af4a88",
          "length": 40,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "44bd28b1-a908-42da-9ffa-0aa0ecdda280",
          "scriptId": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
          "execution": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 3,
          "test": "Response message is correct",
          "message": "expected { success: false, …(1) } to have property 'message' of 'Seller created successfully', but got 'Invalid seller documentImage'",
          "stack": "AssertionError: expected { success: false, …(1) } to have property 'message' of 'Seller created successfully', but got 'Invalid seller documentImage'\n   at Object.eval sandbox-script.js:4:35)",
          "checksum": "dae9e71ec58be497ce35b78ee792816b",
          "id": "d1c0e41b-22a6-45dd-a5a5-3582e2c9e19f",
          "timestamp": 1747063089377,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 4,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 35,
              "native": false
            }
          ]
        },
        "at": "assertion:3 in test-script",
        "source": {
          "id": "e07737be-bc80-4064-964b-d7b5fc400e57",
          "name": "create seller",
          "request": {
            "url": {
              "path": [
                "seller"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "managerFullName",
                  "value": "{{managerFullName}}",
                  "type": "text"
                },
                {
                  "key": "shopName",
                  "value": "{{shopName}}",
                  "type": "text"
                },
                {
                  "key": "cacNumber",
                  "value": "{{cacNumber}}",
                  "type": "text"
                },
                {
                  "key": "documentType",
                  "value": "NIN",
                  "type": "text"
                },
                {
                  "key": "documentNumber",
                  "value": "77280892822",
                  "type": "text"
                },
                {
                  "key": "phoneNumber",
                  "value": "08109642088",
                  "type": "text"
                },
                {
                  "disabled": true,
                  "key": "idNumber",
                  "value": "56254709617",
                  "type": "text"
                },
                {
                  "key": "firstName",
                  "value": "Fidelis",
                  "type": "text"
                },
                {
                  "key": "lastName",
                  "value": "Ogbeni",
                  "type": "text"
                },
                {
                  "key": "accountType",
                  "value": "INDIVIDUAL",
                  "type": "text"
                },
                {
                  "key": "bankCode",
                  "value": "50211",
                  "type": "text"
                },
                {
                  "key": "bankName",
                  "value": "FirstBank",
                  "type": "text"
                },
                {
                  "key": "accountNumber",
                  "value": "3066415171",
                  "type": "text"
                },
                {
                  "key": "documentImage",
                  "type": "file",
                  "src": "postman-cloud:///1f00bb20-a0aa-4780-95e0-d485a8c42125"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ebb38ccc-2e64-4b9e-bd2b-55d1c0ed269c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// // Function to generate a random Nigerian phone number\r",
                  "// function generatePhoneNumber() {\r",
                  "//     return \"081\" + Math.floor(10000000 + Math.random() * 90000000); // Generates 081xxxxxxx\r",
                  "// }\r",
                  "\r",
                  "// // Function to generate a random 11-digit NIN number\r",
                  "// function generateNIN() {\r",
                  "//     return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
                  "// }\r",
                  "\r",
                  "// // Function to generate a random shop name\r",
                  "// function generateShopName() {\r",
                  "//     const shopPrefixes = [\"Super\", \"Mega\", \"Classic\", \"Elite\", \"Premium\", \"Budget\"];\r",
                  "//     const shopSuffixes = [\"Mart\", \"Shop\", \"Store\", \"Bazaar\", \"Hub\", \"Outlet\"];\r",
                  "//     return (\r",
                  "//         shopPrefixes[Math.floor(Math.random() * shopPrefixes.length)] +\r",
                  "//         \" \" +\r",
                  "//         shopSuffixes[Math.floor(Math.random() * shopSuffixes.length)]\r",
                  "//     );\r",
                  "// }\r",
                  "\r",
                  "// // Function to generate a random Nigerian bank code\r",
                  "// function getRandomBank() {\r",
                  "//     const banks = [\r",
                  "//         { name: \"FirstBank\", code: \"50211\" },\r",
                  "//         { name: \"Access Bank\", code: \"044\" },\r",
                  "//         { name: \"Zenith Bank\", code: \"057\" },\r",
                  "//         { name: \"GTBank\", code: \"058\" },\r",
                  "//         { name: \"UBA\", code: \"033\" }\r",
                  "//     ];\r",
                  "//     return banks[Math.floor(Math.random() * banks.length)];\r",
                  "// }\r",
                  "\r",
                  "// // Generate random seller details\r",
                  "// let firstName = [\"John\", \"James\", \"Sarah\", \"Jane\", \"Michael\", \"Fidelis\"][Math.floor(Math.random() * 6)];\r",
                  "// let lastName = [\"Doe\", \"Smith\", \"Johnson\", \"Brown\", \"Ogbeni\", \"Adams\"][Math.floor(Math.random() * 6)];\r",
                  "// let managerFullName = firstName + \" \" + lastName;\r",
                  "// let shopName = generateShopName();\r",
                  "// let cacNumber = Math.floor(1000 + Math.random() * 9000).toString(); // 4-digit CAC Number\r",
                  "// let documentType = \"NIN\";\r",
                  "// let documentNumber = generateNIN();\r",
                  "// let phoneNumber = generatePhoneNumber();\r",
                  "// let accountType = \"INDIVIDUAL\";\r",
                  "// let bankDetails = getRandomBank();\r",
                  "// let accountNumber = Math.floor(1000000000 + Math.random() * 9000000000).toString();\r",
                  "// let documentImage = \"https://i.imgur.com/10V6mFc.jpeg\"; // Simulated file name\r",
                  "\r",
                  "// // Store variables in Postman environment\r",
                  "// pm.environment.set(\"managerFullName\", managerFullName);\r",
                  "// pm.environment.set(\"firstName\", firstName);\r",
                  "// pm.environment.set(\"lastName\", lastName);\r",
                  "// pm.environment.set(\"shopName\", shopName);\r",
                  "// pm.environment.set(\"cacNumber\", cacNumber);\r",
                  "// pm.environment.set(\"documentType\", documentType);\r",
                  "// pm.environment.set(\"documentNumber\", documentNumber);\r",
                  "// pm.environment.set(\"phoneNumber\", phoneNumber);\r",
                  "// pm.environment.set(\"accountType\", accountType);\r",
                  "// pm.environment.set(\"bankCode\", bankDetails.code);\r",
                  "// pm.environment.set(\"bankName\", bankDetails.name);\r",
                  "// pm.environment.set(\"accountNumber\", accountNumber);\r",
                  "// pm.environment.set(\"documentImage\", documentImage);\r",
                  "\r",
                  "// // Log generated values for debugging\r",
                  "// console.log(\"✅ Auto-Generated Seller Details:\");\r",
                  "// console.log({\r",
                  "//     managerFullName,\r",
                  "//     firstName,\r",
                  "//     lastName,\r",
                  "//     shopName,\r",
                  "//     cacNumber,\r",
                  "//     documentType,\r",
                  "//     documentNumber,\r",
                  "//     phoneNumber,\r",
                  "//     accountType,\r",
                  "//     bankCode: bankDetails.code,\r",
                  "//     bankName: bankDetails.name,\r",
                  "//     accountNumber,\r",
                  "//     documentImage\r",
                  "// });\r",
                  ""
                ],
                "_lastExecutionId": "b53e8786-454b-43da-954d-a48b0dc523cb"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate response status code\r",
                  "pm.test(\"Status code is 201 (Created)\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success message\r",
                  "pm.test(\"Response message is correct\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\", \"Seller created successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response data structure\r",
                  "pm.test(\"Response contains seller details\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"sellerId\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"managerFullName\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"shopName\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"phoneNumber\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"bankName\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"accountNumber\").that.is.a(\"string\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Store seller ID for future requests\r",
                  "// pm.environment.set(\"sellerId\", jsonData.data.sellerId);\r",
                  "// console.log(\"Seller ID stored:\", jsonData.data.sellerId);\r",
                  "\r",
                  "// ✅ Validate error response for invalid input\r",
                  "pm.test(\"Error response for invalid input\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Invalid input\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate error response for missing required fields\r",
                  "pm.test(\"Error response for missing fields\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Required fields are missing\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
              }
            }
          ]
        },
        "parent": {
          "id": "2b87c8e4-11a7-4c27-8f22-f017a7a60025",
          "name": "seller",
          "item": [
            {
              "id": "e07737be-bc80-4064-964b-d7b5fc400e57",
              "name": "create seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "managerFullName",
                      "value": "{{managerFullName}}",
                      "type": "text"
                    },
                    {
                      "key": "shopName",
                      "value": "{{shopName}}",
                      "type": "text"
                    },
                    {
                      "key": "cacNumber",
                      "value": "{{cacNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "documentType",
                      "value": "NIN",
                      "type": "text"
                    },
                    {
                      "key": "documentNumber",
                      "value": "77280892822",
                      "type": "text"
                    },
                    {
                      "key": "phoneNumber",
                      "value": "08109642088",
                      "type": "text"
                    },
                    {
                      "disabled": true,
                      "key": "idNumber",
                      "value": "56254709617",
                      "type": "text"
                    },
                    {
                      "key": "firstName",
                      "value": "Fidelis",
                      "type": "text"
                    },
                    {
                      "key": "lastName",
                      "value": "Ogbeni",
                      "type": "text"
                    },
                    {
                      "key": "accountType",
                      "value": "INDIVIDUAL",
                      "type": "text"
                    },
                    {
                      "key": "bankCode",
                      "value": "50211",
                      "type": "text"
                    },
                    {
                      "key": "bankName",
                      "value": "FirstBank",
                      "type": "text"
                    },
                    {
                      "key": "accountNumber",
                      "value": "3066415171",
                      "type": "text"
                    },
                    {
                      "key": "documentImage",
                      "type": "file",
                      "src": "postman-cloud:///1f00bb20-a0aa-4780-95e0-d485a8c42125"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ebb38ccc-2e64-4b9e-bd2b-55d1c0ed269c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// // Function to generate a random Nigerian phone number\r",
                      "// function generatePhoneNumber() {\r",
                      "//     return \"081\" + Math.floor(10000000 + Math.random() * 90000000); // Generates 081xxxxxxx\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random 11-digit NIN number\r",
                      "// function generateNIN() {\r",
                      "//     return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random shop name\r",
                      "// function generateShopName() {\r",
                      "//     const shopPrefixes = [\"Super\", \"Mega\", \"Classic\", \"Elite\", \"Premium\", \"Budget\"];\r",
                      "//     const shopSuffixes = [\"Mart\", \"Shop\", \"Store\", \"Bazaar\", \"Hub\", \"Outlet\"];\r",
                      "//     return (\r",
                      "//         shopPrefixes[Math.floor(Math.random() * shopPrefixes.length)] +\r",
                      "//         \" \" +\r",
                      "//         shopSuffixes[Math.floor(Math.random() * shopSuffixes.length)]\r",
                      "//     );\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random Nigerian bank code\r",
                      "// function getRandomBank() {\r",
                      "//     const banks = [\r",
                      "//         { name: \"FirstBank\", code: \"50211\" },\r",
                      "//         { name: \"Access Bank\", code: \"044\" },\r",
                      "//         { name: \"Zenith Bank\", code: \"057\" },\r",
                      "//         { name: \"GTBank\", code: \"058\" },\r",
                      "//         { name: \"UBA\", code: \"033\" }\r",
                      "//     ];\r",
                      "//     return banks[Math.floor(Math.random() * banks.length)];\r",
                      "// }\r",
                      "\r",
                      "// // Generate random seller details\r",
                      "// let firstName = [\"John\", \"James\", \"Sarah\", \"Jane\", \"Michael\", \"Fidelis\"][Math.floor(Math.random() * 6)];\r",
                      "// let lastName = [\"Doe\", \"Smith\", \"Johnson\", \"Brown\", \"Ogbeni\", \"Adams\"][Math.floor(Math.random() * 6)];\r",
                      "// let managerFullName = firstName + \" \" + lastName;\r",
                      "// let shopName = generateShopName();\r",
                      "// let cacNumber = Math.floor(1000 + Math.random() * 9000).toString(); // 4-digit CAC Number\r",
                      "// let documentType = \"NIN\";\r",
                      "// let documentNumber = generateNIN();\r",
                      "// let phoneNumber = generatePhoneNumber();\r",
                      "// let accountType = \"INDIVIDUAL\";\r",
                      "// let bankDetails = getRandomBank();\r",
                      "// let accountNumber = Math.floor(1000000000 + Math.random() * 9000000000).toString();\r",
                      "// let documentImage = \"https://i.imgur.com/10V6mFc.jpeg\"; // Simulated file name\r",
                      "\r",
                      "// // Store variables in Postman environment\r",
                      "// pm.environment.set(\"managerFullName\", managerFullName);\r",
                      "// pm.environment.set(\"firstName\", firstName);\r",
                      "// pm.environment.set(\"lastName\", lastName);\r",
                      "// pm.environment.set(\"shopName\", shopName);\r",
                      "// pm.environment.set(\"cacNumber\", cacNumber);\r",
                      "// pm.environment.set(\"documentType\", documentType);\r",
                      "// pm.environment.set(\"documentNumber\", documentNumber);\r",
                      "// pm.environment.set(\"phoneNumber\", phoneNumber);\r",
                      "// pm.environment.set(\"accountType\", accountType);\r",
                      "// pm.environment.set(\"bankCode\", bankDetails.code);\r",
                      "// pm.environment.set(\"bankName\", bankDetails.name);\r",
                      "// pm.environment.set(\"accountNumber\", accountNumber);\r",
                      "// pm.environment.set(\"documentImage\", documentImage);\r",
                      "\r",
                      "// // Log generated values for debugging\r",
                      "// console.log(\"✅ Auto-Generated Seller Details:\");\r",
                      "// console.log({\r",
                      "//     managerFullName,\r",
                      "//     firstName,\r",
                      "//     lastName,\r",
                      "//     shopName,\r",
                      "//     cacNumber,\r",
                      "//     documentType,\r",
                      "//     documentNumber,\r",
                      "//     phoneNumber,\r",
                      "//     accountType,\r",
                      "//     bankCode: bankDetails.code,\r",
                      "//     bankName: bankDetails.name,\r",
                      "//     accountNumber,\r",
                      "//     documentImage\r",
                      "// });\r",
                      ""
                    ],
                    "_lastExecutionId": "b53e8786-454b-43da-954d-a48b0dc523cb"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 201 (Created)\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success message\r",
                      "pm.test(\"Response message is correct\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\", \"Seller created successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response data structure\r",
                      "pm.test(\"Response contains seller details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"sellerId\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"managerFullName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"shopName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"phoneNumber\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"bankName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"accountNumber\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Store seller ID for future requests\r",
                      "// pm.environment.set(\"sellerId\", jsonData.data.sellerId);\r",
                      "// console.log(\"Seller ID stored:\", jsonData.data.sellerId);\r",
                      "\r",
                      "// ✅ Validate error response for invalid input\r",
                      "pm.test(\"Error response for invalid input\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Invalid input\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate error response for missing required fields\r",
                      "pm.test(\"Error response for missing fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Required fields are missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
                  }
                }
              ]
            },
            {
              "id": "952e40e0-1f18-4aea-89a2-c66913ffb6a9",
              "name": "get seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eb7f817-0a29-4b44-9136-eef0297a8bac",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure\r",
                      "pm.test(\"Response contains valid seller details or No Seller added\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "\r",
                      "    let seller = jsonData.data;\r",
                      "    \r",
                      "    if(jsonData.data == null){\r",
                      "        pm.expect(jsonData.message).to.include(\"No Seller added\");\r",
                      "\r",
                      "    } else{\r",
                      "    pm.expect(seller).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"email\").that.is.a(\"string\").and.includes(\"@\");\r",
                      "    pm.expect(seller).to.have.property(\"phone\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"storeName\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store Seller ID for future use\r",
                      "if (jsonData.data && jsonData.data.id) {\r",
                      "    pm.environment.set(\"seller_id\", jsonData.data.id);\r",
                      "    console.log(\"Stored Seller ID:\", jsonData.data.id);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "c6da4cec-21d4-44a6-8722-930ee4252133"
                  }
                }
              ]
            },
            {
              "id": "6985ff3d-9862-4e99-83a1-16449fed7da1",
              "name": "delete seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "612899eb-aa78-41fa-b606-768894bf91a5",
              "name": "get seller preference",
              "request": {
                "url": {
                  "path": [
                    "seller",
                    "preferences"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "249f0bc1-7156-4aa8-a9bc-40fef11f7a5f",
              "name": "seller products",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "seller-products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "categoryId",
                      "value": "{{categoryId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "6c8fd3eb-820c-4857-9dfc-e45bcf672641",
              "name": "delete seller preference",
              "request": {
                "url": {
                  "path": [
                    "seller",
                    "preferences"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c004475c-25b2-42df-82b4-d58ecd921eef",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code (200 for success, 404 if no preferences exist)\r",
                      "pm.test(\"Status code is 200 or 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
                      "});\r",
                      "\r",
                      "// ✅ Check if seller preferences were deleted\r",
                      "pm.test(\"Validate seller preferences deletion response\", function () {\r",
                      "    if (jsonData.success === false) {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\", \"No seller preferences found to delete.\");\r",
                      "        console.log(\"❌ No seller preferences found.\");\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\", \"Seller preferences deleted successfully.\");\r",
                      "        console.log(\"✅ Seller preferences deleted successfully.\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3c7953e4-2c9b-40a3-b740-a7f3553162b2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "185f16ea-c567-4a7e-a2ba-7045e1af4a88",
          "length": 40,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "44bd28b1-a908-42da-9ffa-0aa0ecdda280",
          "scriptId": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
          "execution": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 4,
          "test": "Response contains seller details",
          "message": "expected { success: false, …(1) } to have property 'data'",
          "stack": "AssertionError: expected { success: false, …(1) } to have property 'data'\n   at Object.eval sandbox-script.js:5:35)",
          "checksum": "5de884c4d3eedb57e413d95ed4b84b09",
          "id": "75c09714-45cf-4df1-8da1-8574539fc42c",
          "timestamp": 1747063089378,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 35,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "e07737be-bc80-4064-964b-d7b5fc400e57",
          "name": "create seller",
          "request": {
            "url": {
              "path": [
                "seller"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "managerFullName",
                  "value": "{{managerFullName}}",
                  "type": "text"
                },
                {
                  "key": "shopName",
                  "value": "{{shopName}}",
                  "type": "text"
                },
                {
                  "key": "cacNumber",
                  "value": "{{cacNumber}}",
                  "type": "text"
                },
                {
                  "key": "documentType",
                  "value": "NIN",
                  "type": "text"
                },
                {
                  "key": "documentNumber",
                  "value": "77280892822",
                  "type": "text"
                },
                {
                  "key": "phoneNumber",
                  "value": "08109642088",
                  "type": "text"
                },
                {
                  "disabled": true,
                  "key": "idNumber",
                  "value": "56254709617",
                  "type": "text"
                },
                {
                  "key": "firstName",
                  "value": "Fidelis",
                  "type": "text"
                },
                {
                  "key": "lastName",
                  "value": "Ogbeni",
                  "type": "text"
                },
                {
                  "key": "accountType",
                  "value": "INDIVIDUAL",
                  "type": "text"
                },
                {
                  "key": "bankCode",
                  "value": "50211",
                  "type": "text"
                },
                {
                  "key": "bankName",
                  "value": "FirstBank",
                  "type": "text"
                },
                {
                  "key": "accountNumber",
                  "value": "3066415171",
                  "type": "text"
                },
                {
                  "key": "documentImage",
                  "type": "file",
                  "src": "postman-cloud:///1f00bb20-a0aa-4780-95e0-d485a8c42125"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ebb38ccc-2e64-4b9e-bd2b-55d1c0ed269c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// // Function to generate a random Nigerian phone number\r",
                  "// function generatePhoneNumber() {\r",
                  "//     return \"081\" + Math.floor(10000000 + Math.random() * 90000000); // Generates 081xxxxxxx\r",
                  "// }\r",
                  "\r",
                  "// // Function to generate a random 11-digit NIN number\r",
                  "// function generateNIN() {\r",
                  "//     return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
                  "// }\r",
                  "\r",
                  "// // Function to generate a random shop name\r",
                  "// function generateShopName() {\r",
                  "//     const shopPrefixes = [\"Super\", \"Mega\", \"Classic\", \"Elite\", \"Premium\", \"Budget\"];\r",
                  "//     const shopSuffixes = [\"Mart\", \"Shop\", \"Store\", \"Bazaar\", \"Hub\", \"Outlet\"];\r",
                  "//     return (\r",
                  "//         shopPrefixes[Math.floor(Math.random() * shopPrefixes.length)] +\r",
                  "//         \" \" +\r",
                  "//         shopSuffixes[Math.floor(Math.random() * shopSuffixes.length)]\r",
                  "//     );\r",
                  "// }\r",
                  "\r",
                  "// // Function to generate a random Nigerian bank code\r",
                  "// function getRandomBank() {\r",
                  "//     const banks = [\r",
                  "//         { name: \"FirstBank\", code: \"50211\" },\r",
                  "//         { name: \"Access Bank\", code: \"044\" },\r",
                  "//         { name: \"Zenith Bank\", code: \"057\" },\r",
                  "//         { name: \"GTBank\", code: \"058\" },\r",
                  "//         { name: \"UBA\", code: \"033\" }\r",
                  "//     ];\r",
                  "//     return banks[Math.floor(Math.random() * banks.length)];\r",
                  "// }\r",
                  "\r",
                  "// // Generate random seller details\r",
                  "// let firstName = [\"John\", \"James\", \"Sarah\", \"Jane\", \"Michael\", \"Fidelis\"][Math.floor(Math.random() * 6)];\r",
                  "// let lastName = [\"Doe\", \"Smith\", \"Johnson\", \"Brown\", \"Ogbeni\", \"Adams\"][Math.floor(Math.random() * 6)];\r",
                  "// let managerFullName = firstName + \" \" + lastName;\r",
                  "// let shopName = generateShopName();\r",
                  "// let cacNumber = Math.floor(1000 + Math.random() * 9000).toString(); // 4-digit CAC Number\r",
                  "// let documentType = \"NIN\";\r",
                  "// let documentNumber = generateNIN();\r",
                  "// let phoneNumber = generatePhoneNumber();\r",
                  "// let accountType = \"INDIVIDUAL\";\r",
                  "// let bankDetails = getRandomBank();\r",
                  "// let accountNumber = Math.floor(1000000000 + Math.random() * 9000000000).toString();\r",
                  "// let documentImage = \"https://i.imgur.com/10V6mFc.jpeg\"; // Simulated file name\r",
                  "\r",
                  "// // Store variables in Postman environment\r",
                  "// pm.environment.set(\"managerFullName\", managerFullName);\r",
                  "// pm.environment.set(\"firstName\", firstName);\r",
                  "// pm.environment.set(\"lastName\", lastName);\r",
                  "// pm.environment.set(\"shopName\", shopName);\r",
                  "// pm.environment.set(\"cacNumber\", cacNumber);\r",
                  "// pm.environment.set(\"documentType\", documentType);\r",
                  "// pm.environment.set(\"documentNumber\", documentNumber);\r",
                  "// pm.environment.set(\"phoneNumber\", phoneNumber);\r",
                  "// pm.environment.set(\"accountType\", accountType);\r",
                  "// pm.environment.set(\"bankCode\", bankDetails.code);\r",
                  "// pm.environment.set(\"bankName\", bankDetails.name);\r",
                  "// pm.environment.set(\"accountNumber\", accountNumber);\r",
                  "// pm.environment.set(\"documentImage\", documentImage);\r",
                  "\r",
                  "// // Log generated values for debugging\r",
                  "// console.log(\"✅ Auto-Generated Seller Details:\");\r",
                  "// console.log({\r",
                  "//     managerFullName,\r",
                  "//     firstName,\r",
                  "//     lastName,\r",
                  "//     shopName,\r",
                  "//     cacNumber,\r",
                  "//     documentType,\r",
                  "//     documentNumber,\r",
                  "//     phoneNumber,\r",
                  "//     accountType,\r",
                  "//     bankCode: bankDetails.code,\r",
                  "//     bankName: bankDetails.name,\r",
                  "//     accountNumber,\r",
                  "//     documentImage\r",
                  "// });\r",
                  ""
                ],
                "_lastExecutionId": "b53e8786-454b-43da-954d-a48b0dc523cb"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate response status code\r",
                  "pm.test(\"Status code is 201 (Created)\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success message\r",
                  "pm.test(\"Response message is correct\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\", \"Seller created successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response data structure\r",
                  "pm.test(\"Response contains seller details\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"sellerId\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"managerFullName\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"shopName\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"phoneNumber\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"bankName\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"accountNumber\").that.is.a(\"string\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Store seller ID for future requests\r",
                  "// pm.environment.set(\"sellerId\", jsonData.data.sellerId);\r",
                  "// console.log(\"Seller ID stored:\", jsonData.data.sellerId);\r",
                  "\r",
                  "// ✅ Validate error response for invalid input\r",
                  "pm.test(\"Error response for invalid input\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Invalid input\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate error response for missing required fields\r",
                  "pm.test(\"Error response for missing fields\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Required fields are missing\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
              }
            }
          ]
        },
        "parent": {
          "id": "2b87c8e4-11a7-4c27-8f22-f017a7a60025",
          "name": "seller",
          "item": [
            {
              "id": "e07737be-bc80-4064-964b-d7b5fc400e57",
              "name": "create seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "managerFullName",
                      "value": "{{managerFullName}}",
                      "type": "text"
                    },
                    {
                      "key": "shopName",
                      "value": "{{shopName}}",
                      "type": "text"
                    },
                    {
                      "key": "cacNumber",
                      "value": "{{cacNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "documentType",
                      "value": "NIN",
                      "type": "text"
                    },
                    {
                      "key": "documentNumber",
                      "value": "77280892822",
                      "type": "text"
                    },
                    {
                      "key": "phoneNumber",
                      "value": "08109642088",
                      "type": "text"
                    },
                    {
                      "disabled": true,
                      "key": "idNumber",
                      "value": "56254709617",
                      "type": "text"
                    },
                    {
                      "key": "firstName",
                      "value": "Fidelis",
                      "type": "text"
                    },
                    {
                      "key": "lastName",
                      "value": "Ogbeni",
                      "type": "text"
                    },
                    {
                      "key": "accountType",
                      "value": "INDIVIDUAL",
                      "type": "text"
                    },
                    {
                      "key": "bankCode",
                      "value": "50211",
                      "type": "text"
                    },
                    {
                      "key": "bankName",
                      "value": "FirstBank",
                      "type": "text"
                    },
                    {
                      "key": "accountNumber",
                      "value": "3066415171",
                      "type": "text"
                    },
                    {
                      "key": "documentImage",
                      "type": "file",
                      "src": "postman-cloud:///1f00bb20-a0aa-4780-95e0-d485a8c42125"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ebb38ccc-2e64-4b9e-bd2b-55d1c0ed269c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// // Function to generate a random Nigerian phone number\r",
                      "// function generatePhoneNumber() {\r",
                      "//     return \"081\" + Math.floor(10000000 + Math.random() * 90000000); // Generates 081xxxxxxx\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random 11-digit NIN number\r",
                      "// function generateNIN() {\r",
                      "//     return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random shop name\r",
                      "// function generateShopName() {\r",
                      "//     const shopPrefixes = [\"Super\", \"Mega\", \"Classic\", \"Elite\", \"Premium\", \"Budget\"];\r",
                      "//     const shopSuffixes = [\"Mart\", \"Shop\", \"Store\", \"Bazaar\", \"Hub\", \"Outlet\"];\r",
                      "//     return (\r",
                      "//         shopPrefixes[Math.floor(Math.random() * shopPrefixes.length)] +\r",
                      "//         \" \" +\r",
                      "//         shopSuffixes[Math.floor(Math.random() * shopSuffixes.length)]\r",
                      "//     );\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random Nigerian bank code\r",
                      "// function getRandomBank() {\r",
                      "//     const banks = [\r",
                      "//         { name: \"FirstBank\", code: \"50211\" },\r",
                      "//         { name: \"Access Bank\", code: \"044\" },\r",
                      "//         { name: \"Zenith Bank\", code: \"057\" },\r",
                      "//         { name: \"GTBank\", code: \"058\" },\r",
                      "//         { name: \"UBA\", code: \"033\" }\r",
                      "//     ];\r",
                      "//     return banks[Math.floor(Math.random() * banks.length)];\r",
                      "// }\r",
                      "\r",
                      "// // Generate random seller details\r",
                      "// let firstName = [\"John\", \"James\", \"Sarah\", \"Jane\", \"Michael\", \"Fidelis\"][Math.floor(Math.random() * 6)];\r",
                      "// let lastName = [\"Doe\", \"Smith\", \"Johnson\", \"Brown\", \"Ogbeni\", \"Adams\"][Math.floor(Math.random() * 6)];\r",
                      "// let managerFullName = firstName + \" \" + lastName;\r",
                      "// let shopName = generateShopName();\r",
                      "// let cacNumber = Math.floor(1000 + Math.random() * 9000).toString(); // 4-digit CAC Number\r",
                      "// let documentType = \"NIN\";\r",
                      "// let documentNumber = generateNIN();\r",
                      "// let phoneNumber = generatePhoneNumber();\r",
                      "// let accountType = \"INDIVIDUAL\";\r",
                      "// let bankDetails = getRandomBank();\r",
                      "// let accountNumber = Math.floor(1000000000 + Math.random() * 9000000000).toString();\r",
                      "// let documentImage = \"https://i.imgur.com/10V6mFc.jpeg\"; // Simulated file name\r",
                      "\r",
                      "// // Store variables in Postman environment\r",
                      "// pm.environment.set(\"managerFullName\", managerFullName);\r",
                      "// pm.environment.set(\"firstName\", firstName);\r",
                      "// pm.environment.set(\"lastName\", lastName);\r",
                      "// pm.environment.set(\"shopName\", shopName);\r",
                      "// pm.environment.set(\"cacNumber\", cacNumber);\r",
                      "// pm.environment.set(\"documentType\", documentType);\r",
                      "// pm.environment.set(\"documentNumber\", documentNumber);\r",
                      "// pm.environment.set(\"phoneNumber\", phoneNumber);\r",
                      "// pm.environment.set(\"accountType\", accountType);\r",
                      "// pm.environment.set(\"bankCode\", bankDetails.code);\r",
                      "// pm.environment.set(\"bankName\", bankDetails.name);\r",
                      "// pm.environment.set(\"accountNumber\", accountNumber);\r",
                      "// pm.environment.set(\"documentImage\", documentImage);\r",
                      "\r",
                      "// // Log generated values for debugging\r",
                      "// console.log(\"✅ Auto-Generated Seller Details:\");\r",
                      "// console.log({\r",
                      "//     managerFullName,\r",
                      "//     firstName,\r",
                      "//     lastName,\r",
                      "//     shopName,\r",
                      "//     cacNumber,\r",
                      "//     documentType,\r",
                      "//     documentNumber,\r",
                      "//     phoneNumber,\r",
                      "//     accountType,\r",
                      "//     bankCode: bankDetails.code,\r",
                      "//     bankName: bankDetails.name,\r",
                      "//     accountNumber,\r",
                      "//     documentImage\r",
                      "// });\r",
                      ""
                    ],
                    "_lastExecutionId": "b53e8786-454b-43da-954d-a48b0dc523cb"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 201 (Created)\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success message\r",
                      "pm.test(\"Response message is correct\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\", \"Seller created successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response data structure\r",
                      "pm.test(\"Response contains seller details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"sellerId\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"managerFullName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"shopName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"phoneNumber\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"bankName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"accountNumber\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Store seller ID for future requests\r",
                      "// pm.environment.set(\"sellerId\", jsonData.data.sellerId);\r",
                      "// console.log(\"Seller ID stored:\", jsonData.data.sellerId);\r",
                      "\r",
                      "// ✅ Validate error response for invalid input\r",
                      "pm.test(\"Error response for invalid input\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Invalid input\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate error response for missing required fields\r",
                      "pm.test(\"Error response for missing fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Required fields are missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
                  }
                }
              ]
            },
            {
              "id": "952e40e0-1f18-4aea-89a2-c66913ffb6a9",
              "name": "get seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eb7f817-0a29-4b44-9136-eef0297a8bac",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure\r",
                      "pm.test(\"Response contains valid seller details or No Seller added\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "\r",
                      "    let seller = jsonData.data;\r",
                      "    \r",
                      "    if(jsonData.data == null){\r",
                      "        pm.expect(jsonData.message).to.include(\"No Seller added\");\r",
                      "\r",
                      "    } else{\r",
                      "    pm.expect(seller).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"email\").that.is.a(\"string\").and.includes(\"@\");\r",
                      "    pm.expect(seller).to.have.property(\"phone\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"storeName\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store Seller ID for future use\r",
                      "if (jsonData.data && jsonData.data.id) {\r",
                      "    pm.environment.set(\"seller_id\", jsonData.data.id);\r",
                      "    console.log(\"Stored Seller ID:\", jsonData.data.id);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "c6da4cec-21d4-44a6-8722-930ee4252133"
                  }
                }
              ]
            },
            {
              "id": "6985ff3d-9862-4e99-83a1-16449fed7da1",
              "name": "delete seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "612899eb-aa78-41fa-b606-768894bf91a5",
              "name": "get seller preference",
              "request": {
                "url": {
                  "path": [
                    "seller",
                    "preferences"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "249f0bc1-7156-4aa8-a9bc-40fef11f7a5f",
              "name": "seller products",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "seller-products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "categoryId",
                      "value": "{{categoryId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "6c8fd3eb-820c-4857-9dfc-e45bcf672641",
              "name": "delete seller preference",
              "request": {
                "url": {
                  "path": [
                    "seller",
                    "preferences"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c004475c-25b2-42df-82b4-d58ecd921eef",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code (200 for success, 404 if no preferences exist)\r",
                      "pm.test(\"Status code is 200 or 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
                      "});\r",
                      "\r",
                      "// ✅ Check if seller preferences were deleted\r",
                      "pm.test(\"Validate seller preferences deletion response\", function () {\r",
                      "    if (jsonData.success === false) {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\", \"No seller preferences found to delete.\");\r",
                      "        console.log(\"❌ No seller preferences found.\");\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\", \"Seller preferences deleted successfully.\");\r",
                      "        console.log(\"✅ Seller preferences deleted successfully.\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3c7953e4-2c9b-40a3-b740-a7f3553162b2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "185f16ea-c567-4a7e-a2ba-7045e1af4a88",
          "length": 40,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "44bd28b1-a908-42da-9ffa-0aa0ecdda280",
          "scriptId": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
          "execution": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 5,
          "test": "Error response for invalid input",
          "message": "expected 'Invalid seller documentImage' to include 'Invalid input'",
          "stack": "AssertionError: expected 'Invalid seller documentImage' to include 'Invalid input'\n   at Object.eval sandbox-script.js:6:35)",
          "checksum": "f270b4fd4b14096cf2bbb425634cd373",
          "id": "566f1a4c-3c0b-4394-8622-d9486f1359e9",
          "timestamp": 1747063089378,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 6,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 35,
              "native": false
            }
          ]
        },
        "at": "assertion:5 in test-script",
        "source": {
          "id": "e07737be-bc80-4064-964b-d7b5fc400e57",
          "name": "create seller",
          "request": {
            "url": {
              "path": [
                "seller"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "managerFullName",
                  "value": "{{managerFullName}}",
                  "type": "text"
                },
                {
                  "key": "shopName",
                  "value": "{{shopName}}",
                  "type": "text"
                },
                {
                  "key": "cacNumber",
                  "value": "{{cacNumber}}",
                  "type": "text"
                },
                {
                  "key": "documentType",
                  "value": "NIN",
                  "type": "text"
                },
                {
                  "key": "documentNumber",
                  "value": "77280892822",
                  "type": "text"
                },
                {
                  "key": "phoneNumber",
                  "value": "08109642088",
                  "type": "text"
                },
                {
                  "disabled": true,
                  "key": "idNumber",
                  "value": "56254709617",
                  "type": "text"
                },
                {
                  "key": "firstName",
                  "value": "Fidelis",
                  "type": "text"
                },
                {
                  "key": "lastName",
                  "value": "Ogbeni",
                  "type": "text"
                },
                {
                  "key": "accountType",
                  "value": "INDIVIDUAL",
                  "type": "text"
                },
                {
                  "key": "bankCode",
                  "value": "50211",
                  "type": "text"
                },
                {
                  "key": "bankName",
                  "value": "FirstBank",
                  "type": "text"
                },
                {
                  "key": "accountNumber",
                  "value": "3066415171",
                  "type": "text"
                },
                {
                  "key": "documentImage",
                  "type": "file",
                  "src": "postman-cloud:///1f00bb20-a0aa-4780-95e0-d485a8c42125"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ebb38ccc-2e64-4b9e-bd2b-55d1c0ed269c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// // Function to generate a random Nigerian phone number\r",
                  "// function generatePhoneNumber() {\r",
                  "//     return \"081\" + Math.floor(10000000 + Math.random() * 90000000); // Generates 081xxxxxxx\r",
                  "// }\r",
                  "\r",
                  "// // Function to generate a random 11-digit NIN number\r",
                  "// function generateNIN() {\r",
                  "//     return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
                  "// }\r",
                  "\r",
                  "// // Function to generate a random shop name\r",
                  "// function generateShopName() {\r",
                  "//     const shopPrefixes = [\"Super\", \"Mega\", \"Classic\", \"Elite\", \"Premium\", \"Budget\"];\r",
                  "//     const shopSuffixes = [\"Mart\", \"Shop\", \"Store\", \"Bazaar\", \"Hub\", \"Outlet\"];\r",
                  "//     return (\r",
                  "//         shopPrefixes[Math.floor(Math.random() * shopPrefixes.length)] +\r",
                  "//         \" \" +\r",
                  "//         shopSuffixes[Math.floor(Math.random() * shopSuffixes.length)]\r",
                  "//     );\r",
                  "// }\r",
                  "\r",
                  "// // Function to generate a random Nigerian bank code\r",
                  "// function getRandomBank() {\r",
                  "//     const banks = [\r",
                  "//         { name: \"FirstBank\", code: \"50211\" },\r",
                  "//         { name: \"Access Bank\", code: \"044\" },\r",
                  "//         { name: \"Zenith Bank\", code: \"057\" },\r",
                  "//         { name: \"GTBank\", code: \"058\" },\r",
                  "//         { name: \"UBA\", code: \"033\" }\r",
                  "//     ];\r",
                  "//     return banks[Math.floor(Math.random() * banks.length)];\r",
                  "// }\r",
                  "\r",
                  "// // Generate random seller details\r",
                  "// let firstName = [\"John\", \"James\", \"Sarah\", \"Jane\", \"Michael\", \"Fidelis\"][Math.floor(Math.random() * 6)];\r",
                  "// let lastName = [\"Doe\", \"Smith\", \"Johnson\", \"Brown\", \"Ogbeni\", \"Adams\"][Math.floor(Math.random() * 6)];\r",
                  "// let managerFullName = firstName + \" \" + lastName;\r",
                  "// let shopName = generateShopName();\r",
                  "// let cacNumber = Math.floor(1000 + Math.random() * 9000).toString(); // 4-digit CAC Number\r",
                  "// let documentType = \"NIN\";\r",
                  "// let documentNumber = generateNIN();\r",
                  "// let phoneNumber = generatePhoneNumber();\r",
                  "// let accountType = \"INDIVIDUAL\";\r",
                  "// let bankDetails = getRandomBank();\r",
                  "// let accountNumber = Math.floor(1000000000 + Math.random() * 9000000000).toString();\r",
                  "// let documentImage = \"https://i.imgur.com/10V6mFc.jpeg\"; // Simulated file name\r",
                  "\r",
                  "// // Store variables in Postman environment\r",
                  "// pm.environment.set(\"managerFullName\", managerFullName);\r",
                  "// pm.environment.set(\"firstName\", firstName);\r",
                  "// pm.environment.set(\"lastName\", lastName);\r",
                  "// pm.environment.set(\"shopName\", shopName);\r",
                  "// pm.environment.set(\"cacNumber\", cacNumber);\r",
                  "// pm.environment.set(\"documentType\", documentType);\r",
                  "// pm.environment.set(\"documentNumber\", documentNumber);\r",
                  "// pm.environment.set(\"phoneNumber\", phoneNumber);\r",
                  "// pm.environment.set(\"accountType\", accountType);\r",
                  "// pm.environment.set(\"bankCode\", bankDetails.code);\r",
                  "// pm.environment.set(\"bankName\", bankDetails.name);\r",
                  "// pm.environment.set(\"accountNumber\", accountNumber);\r",
                  "// pm.environment.set(\"documentImage\", documentImage);\r",
                  "\r",
                  "// // Log generated values for debugging\r",
                  "// console.log(\"✅ Auto-Generated Seller Details:\");\r",
                  "// console.log({\r",
                  "//     managerFullName,\r",
                  "//     firstName,\r",
                  "//     lastName,\r",
                  "//     shopName,\r",
                  "//     cacNumber,\r",
                  "//     documentType,\r",
                  "//     documentNumber,\r",
                  "//     phoneNumber,\r",
                  "//     accountType,\r",
                  "//     bankCode: bankDetails.code,\r",
                  "//     bankName: bankDetails.name,\r",
                  "//     accountNumber,\r",
                  "//     documentImage\r",
                  "// });\r",
                  ""
                ],
                "_lastExecutionId": "b53e8786-454b-43da-954d-a48b0dc523cb"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate response status code\r",
                  "pm.test(\"Status code is 201 (Created)\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success message\r",
                  "pm.test(\"Response message is correct\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\", \"Seller created successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response data structure\r",
                  "pm.test(\"Response contains seller details\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"sellerId\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"managerFullName\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"shopName\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"phoneNumber\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"bankName\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"accountNumber\").that.is.a(\"string\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Store seller ID for future requests\r",
                  "// pm.environment.set(\"sellerId\", jsonData.data.sellerId);\r",
                  "// console.log(\"Seller ID stored:\", jsonData.data.sellerId);\r",
                  "\r",
                  "// ✅ Validate error response for invalid input\r",
                  "pm.test(\"Error response for invalid input\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Invalid input\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate error response for missing required fields\r",
                  "pm.test(\"Error response for missing fields\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Required fields are missing\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
              }
            }
          ]
        },
        "parent": {
          "id": "2b87c8e4-11a7-4c27-8f22-f017a7a60025",
          "name": "seller",
          "item": [
            {
              "id": "e07737be-bc80-4064-964b-d7b5fc400e57",
              "name": "create seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "managerFullName",
                      "value": "{{managerFullName}}",
                      "type": "text"
                    },
                    {
                      "key": "shopName",
                      "value": "{{shopName}}",
                      "type": "text"
                    },
                    {
                      "key": "cacNumber",
                      "value": "{{cacNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "documentType",
                      "value": "NIN",
                      "type": "text"
                    },
                    {
                      "key": "documentNumber",
                      "value": "77280892822",
                      "type": "text"
                    },
                    {
                      "key": "phoneNumber",
                      "value": "08109642088",
                      "type": "text"
                    },
                    {
                      "disabled": true,
                      "key": "idNumber",
                      "value": "56254709617",
                      "type": "text"
                    },
                    {
                      "key": "firstName",
                      "value": "Fidelis",
                      "type": "text"
                    },
                    {
                      "key": "lastName",
                      "value": "Ogbeni",
                      "type": "text"
                    },
                    {
                      "key": "accountType",
                      "value": "INDIVIDUAL",
                      "type": "text"
                    },
                    {
                      "key": "bankCode",
                      "value": "50211",
                      "type": "text"
                    },
                    {
                      "key": "bankName",
                      "value": "FirstBank",
                      "type": "text"
                    },
                    {
                      "key": "accountNumber",
                      "value": "3066415171",
                      "type": "text"
                    },
                    {
                      "key": "documentImage",
                      "type": "file",
                      "src": "postman-cloud:///1f00bb20-a0aa-4780-95e0-d485a8c42125"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ebb38ccc-2e64-4b9e-bd2b-55d1c0ed269c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// // Function to generate a random Nigerian phone number\r",
                      "// function generatePhoneNumber() {\r",
                      "//     return \"081\" + Math.floor(10000000 + Math.random() * 90000000); // Generates 081xxxxxxx\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random 11-digit NIN number\r",
                      "// function generateNIN() {\r",
                      "//     return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random shop name\r",
                      "// function generateShopName() {\r",
                      "//     const shopPrefixes = [\"Super\", \"Mega\", \"Classic\", \"Elite\", \"Premium\", \"Budget\"];\r",
                      "//     const shopSuffixes = [\"Mart\", \"Shop\", \"Store\", \"Bazaar\", \"Hub\", \"Outlet\"];\r",
                      "//     return (\r",
                      "//         shopPrefixes[Math.floor(Math.random() * shopPrefixes.length)] +\r",
                      "//         \" \" +\r",
                      "//         shopSuffixes[Math.floor(Math.random() * shopSuffixes.length)]\r",
                      "//     );\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random Nigerian bank code\r",
                      "// function getRandomBank() {\r",
                      "//     const banks = [\r",
                      "//         { name: \"FirstBank\", code: \"50211\" },\r",
                      "//         { name: \"Access Bank\", code: \"044\" },\r",
                      "//         { name: \"Zenith Bank\", code: \"057\" },\r",
                      "//         { name: \"GTBank\", code: \"058\" },\r",
                      "//         { name: \"UBA\", code: \"033\" }\r",
                      "//     ];\r",
                      "//     return banks[Math.floor(Math.random() * banks.length)];\r",
                      "// }\r",
                      "\r",
                      "// // Generate random seller details\r",
                      "// let firstName = [\"John\", \"James\", \"Sarah\", \"Jane\", \"Michael\", \"Fidelis\"][Math.floor(Math.random() * 6)];\r",
                      "// let lastName = [\"Doe\", \"Smith\", \"Johnson\", \"Brown\", \"Ogbeni\", \"Adams\"][Math.floor(Math.random() * 6)];\r",
                      "// let managerFullName = firstName + \" \" + lastName;\r",
                      "// let shopName = generateShopName();\r",
                      "// let cacNumber = Math.floor(1000 + Math.random() * 9000).toString(); // 4-digit CAC Number\r",
                      "// let documentType = \"NIN\";\r",
                      "// let documentNumber = generateNIN();\r",
                      "// let phoneNumber = generatePhoneNumber();\r",
                      "// let accountType = \"INDIVIDUAL\";\r",
                      "// let bankDetails = getRandomBank();\r",
                      "// let accountNumber = Math.floor(1000000000 + Math.random() * 9000000000).toString();\r",
                      "// let documentImage = \"https://i.imgur.com/10V6mFc.jpeg\"; // Simulated file name\r",
                      "\r",
                      "// // Store variables in Postman environment\r",
                      "// pm.environment.set(\"managerFullName\", managerFullName);\r",
                      "// pm.environment.set(\"firstName\", firstName);\r",
                      "// pm.environment.set(\"lastName\", lastName);\r",
                      "// pm.environment.set(\"shopName\", shopName);\r",
                      "// pm.environment.set(\"cacNumber\", cacNumber);\r",
                      "// pm.environment.set(\"documentType\", documentType);\r",
                      "// pm.environment.set(\"documentNumber\", documentNumber);\r",
                      "// pm.environment.set(\"phoneNumber\", phoneNumber);\r",
                      "// pm.environment.set(\"accountType\", accountType);\r",
                      "// pm.environment.set(\"bankCode\", bankDetails.code);\r",
                      "// pm.environment.set(\"bankName\", bankDetails.name);\r",
                      "// pm.environment.set(\"accountNumber\", accountNumber);\r",
                      "// pm.environment.set(\"documentImage\", documentImage);\r",
                      "\r",
                      "// // Log generated values for debugging\r",
                      "// console.log(\"✅ Auto-Generated Seller Details:\");\r",
                      "// console.log({\r",
                      "//     managerFullName,\r",
                      "//     firstName,\r",
                      "//     lastName,\r",
                      "//     shopName,\r",
                      "//     cacNumber,\r",
                      "//     documentType,\r",
                      "//     documentNumber,\r",
                      "//     phoneNumber,\r",
                      "//     accountType,\r",
                      "//     bankCode: bankDetails.code,\r",
                      "//     bankName: bankDetails.name,\r",
                      "//     accountNumber,\r",
                      "//     documentImage\r",
                      "// });\r",
                      ""
                    ],
                    "_lastExecutionId": "b53e8786-454b-43da-954d-a48b0dc523cb"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 201 (Created)\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success message\r",
                      "pm.test(\"Response message is correct\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\", \"Seller created successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response data structure\r",
                      "pm.test(\"Response contains seller details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"sellerId\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"managerFullName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"shopName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"phoneNumber\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"bankName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"accountNumber\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Store seller ID for future requests\r",
                      "// pm.environment.set(\"sellerId\", jsonData.data.sellerId);\r",
                      "// console.log(\"Seller ID stored:\", jsonData.data.sellerId);\r",
                      "\r",
                      "// ✅ Validate error response for invalid input\r",
                      "pm.test(\"Error response for invalid input\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Invalid input\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate error response for missing required fields\r",
                      "pm.test(\"Error response for missing fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Required fields are missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
                  }
                }
              ]
            },
            {
              "id": "952e40e0-1f18-4aea-89a2-c66913ffb6a9",
              "name": "get seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eb7f817-0a29-4b44-9136-eef0297a8bac",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure\r",
                      "pm.test(\"Response contains valid seller details or No Seller added\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "\r",
                      "    let seller = jsonData.data;\r",
                      "    \r",
                      "    if(jsonData.data == null){\r",
                      "        pm.expect(jsonData.message).to.include(\"No Seller added\");\r",
                      "\r",
                      "    } else{\r",
                      "    pm.expect(seller).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"email\").that.is.a(\"string\").and.includes(\"@\");\r",
                      "    pm.expect(seller).to.have.property(\"phone\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"storeName\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store Seller ID for future use\r",
                      "if (jsonData.data && jsonData.data.id) {\r",
                      "    pm.environment.set(\"seller_id\", jsonData.data.id);\r",
                      "    console.log(\"Stored Seller ID:\", jsonData.data.id);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "c6da4cec-21d4-44a6-8722-930ee4252133"
                  }
                }
              ]
            },
            {
              "id": "6985ff3d-9862-4e99-83a1-16449fed7da1",
              "name": "delete seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "612899eb-aa78-41fa-b606-768894bf91a5",
              "name": "get seller preference",
              "request": {
                "url": {
                  "path": [
                    "seller",
                    "preferences"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "249f0bc1-7156-4aa8-a9bc-40fef11f7a5f",
              "name": "seller products",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "seller-products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "categoryId",
                      "value": "{{categoryId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "6c8fd3eb-820c-4857-9dfc-e45bcf672641",
              "name": "delete seller preference",
              "request": {
                "url": {
                  "path": [
                    "seller",
                    "preferences"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c004475c-25b2-42df-82b4-d58ecd921eef",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code (200 for success, 404 if no preferences exist)\r",
                      "pm.test(\"Status code is 200 or 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
                      "});\r",
                      "\r",
                      "// ✅ Check if seller preferences were deleted\r",
                      "pm.test(\"Validate seller preferences deletion response\", function () {\r",
                      "    if (jsonData.success === false) {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\", \"No seller preferences found to delete.\");\r",
                      "        console.log(\"❌ No seller preferences found.\");\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\", \"Seller preferences deleted successfully.\");\r",
                      "        console.log(\"✅ Seller preferences deleted successfully.\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3c7953e4-2c9b-40a3-b740-a7f3553162b2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "185f16ea-c567-4a7e-a2ba-7045e1af4a88",
          "length": 40,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "44bd28b1-a908-42da-9ffa-0aa0ecdda280",
          "scriptId": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
          "execution": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 6,
          "test": "Error response for missing fields",
          "message": "expected 'Invalid seller documentImage' to include 'Required fields are missing'",
          "stack": "AssertionError: expected 'Invalid seller documentImage' to include 'Required fields are missing'\n   at Object.eval sandbox-script.js:7:35)",
          "checksum": "5ae02a4a4a3b1265296599ad887b26ab",
          "id": "b5f09868-adaf-411c-a7ea-4be095f0f357",
          "timestamp": 1747063089379,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 7,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 35,
              "native": false
            }
          ]
        },
        "at": "assertion:6 in test-script",
        "source": {
          "id": "e07737be-bc80-4064-964b-d7b5fc400e57",
          "name": "create seller",
          "request": {
            "url": {
              "path": [
                "seller"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "managerFullName",
                  "value": "{{managerFullName}}",
                  "type": "text"
                },
                {
                  "key": "shopName",
                  "value": "{{shopName}}",
                  "type": "text"
                },
                {
                  "key": "cacNumber",
                  "value": "{{cacNumber}}",
                  "type": "text"
                },
                {
                  "key": "documentType",
                  "value": "NIN",
                  "type": "text"
                },
                {
                  "key": "documentNumber",
                  "value": "77280892822",
                  "type": "text"
                },
                {
                  "key": "phoneNumber",
                  "value": "08109642088",
                  "type": "text"
                },
                {
                  "disabled": true,
                  "key": "idNumber",
                  "value": "56254709617",
                  "type": "text"
                },
                {
                  "key": "firstName",
                  "value": "Fidelis",
                  "type": "text"
                },
                {
                  "key": "lastName",
                  "value": "Ogbeni",
                  "type": "text"
                },
                {
                  "key": "accountType",
                  "value": "INDIVIDUAL",
                  "type": "text"
                },
                {
                  "key": "bankCode",
                  "value": "50211",
                  "type": "text"
                },
                {
                  "key": "bankName",
                  "value": "FirstBank",
                  "type": "text"
                },
                {
                  "key": "accountNumber",
                  "value": "3066415171",
                  "type": "text"
                },
                {
                  "key": "documentImage",
                  "type": "file",
                  "src": "postman-cloud:///1f00bb20-a0aa-4780-95e0-d485a8c42125"
                }
              ]
            },
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ebb38ccc-2e64-4b9e-bd2b-55d1c0ed269c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// // Function to generate a random Nigerian phone number\r",
                  "// function generatePhoneNumber() {\r",
                  "//     return \"081\" + Math.floor(10000000 + Math.random() * 90000000); // Generates 081xxxxxxx\r",
                  "// }\r",
                  "\r",
                  "// // Function to generate a random 11-digit NIN number\r",
                  "// function generateNIN() {\r",
                  "//     return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
                  "// }\r",
                  "\r",
                  "// // Function to generate a random shop name\r",
                  "// function generateShopName() {\r",
                  "//     const shopPrefixes = [\"Super\", \"Mega\", \"Classic\", \"Elite\", \"Premium\", \"Budget\"];\r",
                  "//     const shopSuffixes = [\"Mart\", \"Shop\", \"Store\", \"Bazaar\", \"Hub\", \"Outlet\"];\r",
                  "//     return (\r",
                  "//         shopPrefixes[Math.floor(Math.random() * shopPrefixes.length)] +\r",
                  "//         \" \" +\r",
                  "//         shopSuffixes[Math.floor(Math.random() * shopSuffixes.length)]\r",
                  "//     );\r",
                  "// }\r",
                  "\r",
                  "// // Function to generate a random Nigerian bank code\r",
                  "// function getRandomBank() {\r",
                  "//     const banks = [\r",
                  "//         { name: \"FirstBank\", code: \"50211\" },\r",
                  "//         { name: \"Access Bank\", code: \"044\" },\r",
                  "//         { name: \"Zenith Bank\", code: \"057\" },\r",
                  "//         { name: \"GTBank\", code: \"058\" },\r",
                  "//         { name: \"UBA\", code: \"033\" }\r",
                  "//     ];\r",
                  "//     return banks[Math.floor(Math.random() * banks.length)];\r",
                  "// }\r",
                  "\r",
                  "// // Generate random seller details\r",
                  "// let firstName = [\"John\", \"James\", \"Sarah\", \"Jane\", \"Michael\", \"Fidelis\"][Math.floor(Math.random() * 6)];\r",
                  "// let lastName = [\"Doe\", \"Smith\", \"Johnson\", \"Brown\", \"Ogbeni\", \"Adams\"][Math.floor(Math.random() * 6)];\r",
                  "// let managerFullName = firstName + \" \" + lastName;\r",
                  "// let shopName = generateShopName();\r",
                  "// let cacNumber = Math.floor(1000 + Math.random() * 9000).toString(); // 4-digit CAC Number\r",
                  "// let documentType = \"NIN\";\r",
                  "// let documentNumber = generateNIN();\r",
                  "// let phoneNumber = generatePhoneNumber();\r",
                  "// let accountType = \"INDIVIDUAL\";\r",
                  "// let bankDetails = getRandomBank();\r",
                  "// let accountNumber = Math.floor(1000000000 + Math.random() * 9000000000).toString();\r",
                  "// let documentImage = \"https://i.imgur.com/10V6mFc.jpeg\"; // Simulated file name\r",
                  "\r",
                  "// // Store variables in Postman environment\r",
                  "// pm.environment.set(\"managerFullName\", managerFullName);\r",
                  "// pm.environment.set(\"firstName\", firstName);\r",
                  "// pm.environment.set(\"lastName\", lastName);\r",
                  "// pm.environment.set(\"shopName\", shopName);\r",
                  "// pm.environment.set(\"cacNumber\", cacNumber);\r",
                  "// pm.environment.set(\"documentType\", documentType);\r",
                  "// pm.environment.set(\"documentNumber\", documentNumber);\r",
                  "// pm.environment.set(\"phoneNumber\", phoneNumber);\r",
                  "// pm.environment.set(\"accountType\", accountType);\r",
                  "// pm.environment.set(\"bankCode\", bankDetails.code);\r",
                  "// pm.environment.set(\"bankName\", bankDetails.name);\r",
                  "// pm.environment.set(\"accountNumber\", accountNumber);\r",
                  "// pm.environment.set(\"documentImage\", documentImage);\r",
                  "\r",
                  "// // Log generated values for debugging\r",
                  "// console.log(\"✅ Auto-Generated Seller Details:\");\r",
                  "// console.log({\r",
                  "//     managerFullName,\r",
                  "//     firstName,\r",
                  "//     lastName,\r",
                  "//     shopName,\r",
                  "//     cacNumber,\r",
                  "//     documentType,\r",
                  "//     documentNumber,\r",
                  "//     phoneNumber,\r",
                  "//     accountType,\r",
                  "//     bankCode: bankDetails.code,\r",
                  "//     bankName: bankDetails.name,\r",
                  "//     accountNumber,\r",
                  "//     documentImage\r",
                  "// });\r",
                  ""
                ],
                "_lastExecutionId": "b53e8786-454b-43da-954d-a48b0dc523cb"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate response status code\r",
                  "pm.test(\"Status code is 201 (Created)\", function () {\r",
                  "    pm.response.to.have.status(201);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success message\r",
                  "pm.test(\"Response message is correct\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\", \"Seller created successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response data structure\r",
                  "pm.test(\"Response contains seller details\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"sellerId\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"managerFullName\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"shopName\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"phoneNumber\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"bankName\").that.is.a(\"string\");\r",
                  "    pm.expect(jsonData.data).to.have.property(\"accountNumber\").that.is.a(\"string\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Store seller ID for future requests\r",
                  "// pm.environment.set(\"sellerId\", jsonData.data.sellerId);\r",
                  "// console.log(\"Seller ID stored:\", jsonData.data.sellerId);\r",
                  "\r",
                  "// ✅ Validate error response for invalid input\r",
                  "pm.test(\"Error response for invalid input\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Invalid input\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate error response for missing required fields\r",
                  "pm.test(\"Error response for missing fields\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Required fields are missing\");\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
              }
            }
          ]
        },
        "parent": {
          "id": "2b87c8e4-11a7-4c27-8f22-f017a7a60025",
          "name": "seller",
          "item": [
            {
              "id": "e07737be-bc80-4064-964b-d7b5fc400e57",
              "name": "create seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "managerFullName",
                      "value": "{{managerFullName}}",
                      "type": "text"
                    },
                    {
                      "key": "shopName",
                      "value": "{{shopName}}",
                      "type": "text"
                    },
                    {
                      "key": "cacNumber",
                      "value": "{{cacNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "documentType",
                      "value": "NIN",
                      "type": "text"
                    },
                    {
                      "key": "documentNumber",
                      "value": "77280892822",
                      "type": "text"
                    },
                    {
                      "key": "phoneNumber",
                      "value": "08109642088",
                      "type": "text"
                    },
                    {
                      "disabled": true,
                      "key": "idNumber",
                      "value": "56254709617",
                      "type": "text"
                    },
                    {
                      "key": "firstName",
                      "value": "Fidelis",
                      "type": "text"
                    },
                    {
                      "key": "lastName",
                      "value": "Ogbeni",
                      "type": "text"
                    },
                    {
                      "key": "accountType",
                      "value": "INDIVIDUAL",
                      "type": "text"
                    },
                    {
                      "key": "bankCode",
                      "value": "50211",
                      "type": "text"
                    },
                    {
                      "key": "bankName",
                      "value": "FirstBank",
                      "type": "text"
                    },
                    {
                      "key": "accountNumber",
                      "value": "3066415171",
                      "type": "text"
                    },
                    {
                      "key": "documentImage",
                      "type": "file",
                      "src": "postman-cloud:///1f00bb20-a0aa-4780-95e0-d485a8c42125"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ebb38ccc-2e64-4b9e-bd2b-55d1c0ed269c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// // Function to generate a random Nigerian phone number\r",
                      "// function generatePhoneNumber() {\r",
                      "//     return \"081\" + Math.floor(10000000 + Math.random() * 90000000); // Generates 081xxxxxxx\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random 11-digit NIN number\r",
                      "// function generateNIN() {\r",
                      "//     return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random shop name\r",
                      "// function generateShopName() {\r",
                      "//     const shopPrefixes = [\"Super\", \"Mega\", \"Classic\", \"Elite\", \"Premium\", \"Budget\"];\r",
                      "//     const shopSuffixes = [\"Mart\", \"Shop\", \"Store\", \"Bazaar\", \"Hub\", \"Outlet\"];\r",
                      "//     return (\r",
                      "//         shopPrefixes[Math.floor(Math.random() * shopPrefixes.length)] +\r",
                      "//         \" \" +\r",
                      "//         shopSuffixes[Math.floor(Math.random() * shopSuffixes.length)]\r",
                      "//     );\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random Nigerian bank code\r",
                      "// function getRandomBank() {\r",
                      "//     const banks = [\r",
                      "//         { name: \"FirstBank\", code: \"50211\" },\r",
                      "//         { name: \"Access Bank\", code: \"044\" },\r",
                      "//         { name: \"Zenith Bank\", code: \"057\" },\r",
                      "//         { name: \"GTBank\", code: \"058\" },\r",
                      "//         { name: \"UBA\", code: \"033\" }\r",
                      "//     ];\r",
                      "//     return banks[Math.floor(Math.random() * banks.length)];\r",
                      "// }\r",
                      "\r",
                      "// // Generate random seller details\r",
                      "// let firstName = [\"John\", \"James\", \"Sarah\", \"Jane\", \"Michael\", \"Fidelis\"][Math.floor(Math.random() * 6)];\r",
                      "// let lastName = [\"Doe\", \"Smith\", \"Johnson\", \"Brown\", \"Ogbeni\", \"Adams\"][Math.floor(Math.random() * 6)];\r",
                      "// let managerFullName = firstName + \" \" + lastName;\r",
                      "// let shopName = generateShopName();\r",
                      "// let cacNumber = Math.floor(1000 + Math.random() * 9000).toString(); // 4-digit CAC Number\r",
                      "// let documentType = \"NIN\";\r",
                      "// let documentNumber = generateNIN();\r",
                      "// let phoneNumber = generatePhoneNumber();\r",
                      "// let accountType = \"INDIVIDUAL\";\r",
                      "// let bankDetails = getRandomBank();\r",
                      "// let accountNumber = Math.floor(1000000000 + Math.random() * 9000000000).toString();\r",
                      "// let documentImage = \"https://i.imgur.com/10V6mFc.jpeg\"; // Simulated file name\r",
                      "\r",
                      "// // Store variables in Postman environment\r",
                      "// pm.environment.set(\"managerFullName\", managerFullName);\r",
                      "// pm.environment.set(\"firstName\", firstName);\r",
                      "// pm.environment.set(\"lastName\", lastName);\r",
                      "// pm.environment.set(\"shopName\", shopName);\r",
                      "// pm.environment.set(\"cacNumber\", cacNumber);\r",
                      "// pm.environment.set(\"documentType\", documentType);\r",
                      "// pm.environment.set(\"documentNumber\", documentNumber);\r",
                      "// pm.environment.set(\"phoneNumber\", phoneNumber);\r",
                      "// pm.environment.set(\"accountType\", accountType);\r",
                      "// pm.environment.set(\"bankCode\", bankDetails.code);\r",
                      "// pm.environment.set(\"bankName\", bankDetails.name);\r",
                      "// pm.environment.set(\"accountNumber\", accountNumber);\r",
                      "// pm.environment.set(\"documentImage\", documentImage);\r",
                      "\r",
                      "// // Log generated values for debugging\r",
                      "// console.log(\"✅ Auto-Generated Seller Details:\");\r",
                      "// console.log({\r",
                      "//     managerFullName,\r",
                      "//     firstName,\r",
                      "//     lastName,\r",
                      "//     shopName,\r",
                      "//     cacNumber,\r",
                      "//     documentType,\r",
                      "//     documentNumber,\r",
                      "//     phoneNumber,\r",
                      "//     accountType,\r",
                      "//     bankCode: bankDetails.code,\r",
                      "//     bankName: bankDetails.name,\r",
                      "//     accountNumber,\r",
                      "//     documentImage\r",
                      "// });\r",
                      ""
                    ],
                    "_lastExecutionId": "b53e8786-454b-43da-954d-a48b0dc523cb"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 201 (Created)\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success message\r",
                      "pm.test(\"Response message is correct\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\", \"Seller created successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response data structure\r",
                      "pm.test(\"Response contains seller details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"sellerId\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"managerFullName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"shopName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"phoneNumber\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"bankName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"accountNumber\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Store seller ID for future requests\r",
                      "// pm.environment.set(\"sellerId\", jsonData.data.sellerId);\r",
                      "// console.log(\"Seller ID stored:\", jsonData.data.sellerId);\r",
                      "\r",
                      "// ✅ Validate error response for invalid input\r",
                      "pm.test(\"Error response for invalid input\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Invalid input\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate error response for missing required fields\r",
                      "pm.test(\"Error response for missing fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Required fields are missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
                  }
                }
              ]
            },
            {
              "id": "952e40e0-1f18-4aea-89a2-c66913ffb6a9",
              "name": "get seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eb7f817-0a29-4b44-9136-eef0297a8bac",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure\r",
                      "pm.test(\"Response contains valid seller details or No Seller added\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "\r",
                      "    let seller = jsonData.data;\r",
                      "    \r",
                      "    if(jsonData.data == null){\r",
                      "        pm.expect(jsonData.message).to.include(\"No Seller added\");\r",
                      "\r",
                      "    } else{\r",
                      "    pm.expect(seller).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"email\").that.is.a(\"string\").and.includes(\"@\");\r",
                      "    pm.expect(seller).to.have.property(\"phone\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"storeName\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store Seller ID for future use\r",
                      "if (jsonData.data && jsonData.data.id) {\r",
                      "    pm.environment.set(\"seller_id\", jsonData.data.id);\r",
                      "    console.log(\"Stored Seller ID:\", jsonData.data.id);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "c6da4cec-21d4-44a6-8722-930ee4252133"
                  }
                }
              ]
            },
            {
              "id": "6985ff3d-9862-4e99-83a1-16449fed7da1",
              "name": "delete seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "612899eb-aa78-41fa-b606-768894bf91a5",
              "name": "get seller preference",
              "request": {
                "url": {
                  "path": [
                    "seller",
                    "preferences"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "249f0bc1-7156-4aa8-a9bc-40fef11f7a5f",
              "name": "seller products",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "seller-products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "categoryId",
                      "value": "{{categoryId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "6c8fd3eb-820c-4857-9dfc-e45bcf672641",
              "name": "delete seller preference",
              "request": {
                "url": {
                  "path": [
                    "seller",
                    "preferences"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c004475c-25b2-42df-82b4-d58ecd921eef",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code (200 for success, 404 if no preferences exist)\r",
                      "pm.test(\"Status code is 200 or 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
                      "});\r",
                      "\r",
                      "// ✅ Check if seller preferences were deleted\r",
                      "pm.test(\"Validate seller preferences deletion response\", function () {\r",
                      "    if (jsonData.success === false) {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\", \"No seller preferences found to delete.\");\r",
                      "        console.log(\"❌ No seller preferences found.\");\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\", \"Seller preferences deleted successfully.\");\r",
                      "        console.log(\"✅ Seller preferences deleted successfully.\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3c7953e4-2c9b-40a3-b740-a7f3553162b2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "185f16ea-c567-4a7e-a2ba-7045e1af4a88",
          "length": 40,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "44bd28b1-a908-42da-9ffa-0aa0ecdda280",
          "scriptId": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
          "execution": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 4,
          "test": "Response contains valid seller details or No Seller added",
          "message": "Target cannot be null or undefined.",
          "stack": "AssertionError: Target cannot be null or undefined.\n   at Object.eval sandbox-script.js:5:36)",
          "checksum": "d3d467b91060f61f0f75529e94ef496e",
          "id": "17ec165e-f4bf-4351-8551-0745ba4e1c4c",
          "timestamp": 1747063089487,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 5,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 36,
              "native": false
            }
          ]
        },
        "at": "assertion:4 in test-script",
        "source": {
          "id": "952e40e0-1f18-4aea-89a2-c66913ffb6a9",
          "name": "get seller",
          "request": {
            "url": {
              "path": [
                "seller"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{authToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3eb7f817-0a29-4b44-9136-eef0297a8bac",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate response status code\r",
                  "pm.test(\"Status code is 200\", function () {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate success flag\r",
                  "pm.test(\"Response contains success flag\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate response message\r",
                  "pm.test(\"Response contains success message\", function () {\r",
                  "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"successfully\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate data structure\r",
                  "pm.test(\"Response contains valid seller details or No Seller added\", function () {\r",
                  "    pm.expect(jsonData.data).to.have.property(\"data\").that.is.an(\"object\");\r",
                  "\r",
                  "    let seller = jsonData.data;\r",
                  "    \r",
                  "    if(jsonData.data == null){\r",
                  "        pm.expect(jsonData.message).to.include(\"No Seller added\");\r",
                  "\r",
                  "    } else{\r",
                  "    pm.expect(seller).to.have.property(\"id\").that.is.a(\"string\");\r",
                  "    pm.expect(seller).to.have.property(\"name\").that.is.a(\"string\");\r",
                  "    pm.expect(seller).to.have.property(\"email\").that.is.a(\"string\").and.includes(\"@\");\r",
                  "    pm.expect(seller).to.have.property(\"phone\").that.is.a(\"string\");\r",
                  "    pm.expect(seller).to.have.property(\"storeName\").that.is.a(\"string\");\r",
                  "    pm.expect(seller).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate authorization requirement\r",
                  "pm.test(\"Request requires authorization\", function () {\r",
                  "    pm.response.to.not.have.status(401);\r",
                  "});\r",
                  "\r",
                  "// ✅ Store Seller ID for future use\r",
                  "if (jsonData.data && jsonData.data.id) {\r",
                  "    pm.environment.set(\"seller_id\", jsonData.data.id);\r",
                  "    console.log(\"Stored Seller ID:\", jsonData.data.id);\r",
                  "}\r",
                  ""
                ],
                "_lastExecutionId": "c6da4cec-21d4-44a6-8722-930ee4252133"
              }
            }
          ]
        },
        "parent": {
          "id": "2b87c8e4-11a7-4c27-8f22-f017a7a60025",
          "name": "seller",
          "item": [
            {
              "id": "e07737be-bc80-4064-964b-d7b5fc400e57",
              "name": "create seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "managerFullName",
                      "value": "{{managerFullName}}",
                      "type": "text"
                    },
                    {
                      "key": "shopName",
                      "value": "{{shopName}}",
                      "type": "text"
                    },
                    {
                      "key": "cacNumber",
                      "value": "{{cacNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "documentType",
                      "value": "NIN",
                      "type": "text"
                    },
                    {
                      "key": "documentNumber",
                      "value": "77280892822",
                      "type": "text"
                    },
                    {
                      "key": "phoneNumber",
                      "value": "08109642088",
                      "type": "text"
                    },
                    {
                      "disabled": true,
                      "key": "idNumber",
                      "value": "56254709617",
                      "type": "text"
                    },
                    {
                      "key": "firstName",
                      "value": "Fidelis",
                      "type": "text"
                    },
                    {
                      "key": "lastName",
                      "value": "Ogbeni",
                      "type": "text"
                    },
                    {
                      "key": "accountType",
                      "value": "INDIVIDUAL",
                      "type": "text"
                    },
                    {
                      "key": "bankCode",
                      "value": "50211",
                      "type": "text"
                    },
                    {
                      "key": "bankName",
                      "value": "FirstBank",
                      "type": "text"
                    },
                    {
                      "key": "accountNumber",
                      "value": "3066415171",
                      "type": "text"
                    },
                    {
                      "key": "documentImage",
                      "type": "file",
                      "src": "postman-cloud:///1f00bb20-a0aa-4780-95e0-d485a8c42125"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ebb38ccc-2e64-4b9e-bd2b-55d1c0ed269c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// // Function to generate a random Nigerian phone number\r",
                      "// function generatePhoneNumber() {\r",
                      "//     return \"081\" + Math.floor(10000000 + Math.random() * 90000000); // Generates 081xxxxxxx\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random 11-digit NIN number\r",
                      "// function generateNIN() {\r",
                      "//     return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random shop name\r",
                      "// function generateShopName() {\r",
                      "//     const shopPrefixes = [\"Super\", \"Mega\", \"Classic\", \"Elite\", \"Premium\", \"Budget\"];\r",
                      "//     const shopSuffixes = [\"Mart\", \"Shop\", \"Store\", \"Bazaar\", \"Hub\", \"Outlet\"];\r",
                      "//     return (\r",
                      "//         shopPrefixes[Math.floor(Math.random() * shopPrefixes.length)] +\r",
                      "//         \" \" +\r",
                      "//         shopSuffixes[Math.floor(Math.random() * shopSuffixes.length)]\r",
                      "//     );\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random Nigerian bank code\r",
                      "// function getRandomBank() {\r",
                      "//     const banks = [\r",
                      "//         { name: \"FirstBank\", code: \"50211\" },\r",
                      "//         { name: \"Access Bank\", code: \"044\" },\r",
                      "//         { name: \"Zenith Bank\", code: \"057\" },\r",
                      "//         { name: \"GTBank\", code: \"058\" },\r",
                      "//         { name: \"UBA\", code: \"033\" }\r",
                      "//     ];\r",
                      "//     return banks[Math.floor(Math.random() * banks.length)];\r",
                      "// }\r",
                      "\r",
                      "// // Generate random seller details\r",
                      "// let firstName = [\"John\", \"James\", \"Sarah\", \"Jane\", \"Michael\", \"Fidelis\"][Math.floor(Math.random() * 6)];\r",
                      "// let lastName = [\"Doe\", \"Smith\", \"Johnson\", \"Brown\", \"Ogbeni\", \"Adams\"][Math.floor(Math.random() * 6)];\r",
                      "// let managerFullName = firstName + \" \" + lastName;\r",
                      "// let shopName = generateShopName();\r",
                      "// let cacNumber = Math.floor(1000 + Math.random() * 9000).toString(); // 4-digit CAC Number\r",
                      "// let documentType = \"NIN\";\r",
                      "// let documentNumber = generateNIN();\r",
                      "// let phoneNumber = generatePhoneNumber();\r",
                      "// let accountType = \"INDIVIDUAL\";\r",
                      "// let bankDetails = getRandomBank();\r",
                      "// let accountNumber = Math.floor(1000000000 + Math.random() * 9000000000).toString();\r",
                      "// let documentImage = \"https://i.imgur.com/10V6mFc.jpeg\"; // Simulated file name\r",
                      "\r",
                      "// // Store variables in Postman environment\r",
                      "// pm.environment.set(\"managerFullName\", managerFullName);\r",
                      "// pm.environment.set(\"firstName\", firstName);\r",
                      "// pm.environment.set(\"lastName\", lastName);\r",
                      "// pm.environment.set(\"shopName\", shopName);\r",
                      "// pm.environment.set(\"cacNumber\", cacNumber);\r",
                      "// pm.environment.set(\"documentType\", documentType);\r",
                      "// pm.environment.set(\"documentNumber\", documentNumber);\r",
                      "// pm.environment.set(\"phoneNumber\", phoneNumber);\r",
                      "// pm.environment.set(\"accountType\", accountType);\r",
                      "// pm.environment.set(\"bankCode\", bankDetails.code);\r",
                      "// pm.environment.set(\"bankName\", bankDetails.name);\r",
                      "// pm.environment.set(\"accountNumber\", accountNumber);\r",
                      "// pm.environment.set(\"documentImage\", documentImage);\r",
                      "\r",
                      "// // Log generated values for debugging\r",
                      "// console.log(\"✅ Auto-Generated Seller Details:\");\r",
                      "// console.log({\r",
                      "//     managerFullName,\r",
                      "//     firstName,\r",
                      "//     lastName,\r",
                      "//     shopName,\r",
                      "//     cacNumber,\r",
                      "//     documentType,\r",
                      "//     documentNumber,\r",
                      "//     phoneNumber,\r",
                      "//     accountType,\r",
                      "//     bankCode: bankDetails.code,\r",
                      "//     bankName: bankDetails.name,\r",
                      "//     accountNumber,\r",
                      "//     documentImage\r",
                      "// });\r",
                      ""
                    ],
                    "_lastExecutionId": "b53e8786-454b-43da-954d-a48b0dc523cb"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 201 (Created)\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success message\r",
                      "pm.test(\"Response message is correct\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\", \"Seller created successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response data structure\r",
                      "pm.test(\"Response contains seller details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"sellerId\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"managerFullName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"shopName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"phoneNumber\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"bankName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"accountNumber\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Store seller ID for future requests\r",
                      "// pm.environment.set(\"sellerId\", jsonData.data.sellerId);\r",
                      "// console.log(\"Seller ID stored:\", jsonData.data.sellerId);\r",
                      "\r",
                      "// ✅ Validate error response for invalid input\r",
                      "pm.test(\"Error response for invalid input\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Invalid input\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate error response for missing required fields\r",
                      "pm.test(\"Error response for missing fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Required fields are missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
                  }
                }
              ]
            },
            {
              "id": "952e40e0-1f18-4aea-89a2-c66913ffb6a9",
              "name": "get seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eb7f817-0a29-4b44-9136-eef0297a8bac",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure\r",
                      "pm.test(\"Response contains valid seller details or No Seller added\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "\r",
                      "    let seller = jsonData.data;\r",
                      "    \r",
                      "    if(jsonData.data == null){\r",
                      "        pm.expect(jsonData.message).to.include(\"No Seller added\");\r",
                      "\r",
                      "    } else{\r",
                      "    pm.expect(seller).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"email\").that.is.a(\"string\").and.includes(\"@\");\r",
                      "    pm.expect(seller).to.have.property(\"phone\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"storeName\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store Seller ID for future use\r",
                      "if (jsonData.data && jsonData.data.id) {\r",
                      "    pm.environment.set(\"seller_id\", jsonData.data.id);\r",
                      "    console.log(\"Stored Seller ID:\", jsonData.data.id);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "c6da4cec-21d4-44a6-8722-930ee4252133"
                  }
                }
              ]
            },
            {
              "id": "6985ff3d-9862-4e99-83a1-16449fed7da1",
              "name": "delete seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "612899eb-aa78-41fa-b606-768894bf91a5",
              "name": "get seller preference",
              "request": {
                "url": {
                  "path": [
                    "seller",
                    "preferences"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "249f0bc1-7156-4aa8-a9bc-40fef11f7a5f",
              "name": "seller products",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "seller-products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "categoryId",
                      "value": "{{categoryId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "6c8fd3eb-820c-4857-9dfc-e45bcf672641",
              "name": "delete seller preference",
              "request": {
                "url": {
                  "path": [
                    "seller",
                    "preferences"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c004475c-25b2-42df-82b4-d58ecd921eef",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code (200 for success, 404 if no preferences exist)\r",
                      "pm.test(\"Status code is 200 or 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
                      "});\r",
                      "\r",
                      "// ✅ Check if seller preferences were deleted\r",
                      "pm.test(\"Validate seller preferences deletion response\", function () {\r",
                      "    if (jsonData.success === false) {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\", \"No seller preferences found to delete.\");\r",
                      "        console.log(\"❌ No seller preferences found.\");\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\", \"Seller preferences deleted successfully.\");\r",
                      "        console.log(\"✅ Seller preferences deleted successfully.\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3c7953e4-2c9b-40a3-b740-a7f3553162b2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "66962f86-89e8-4766-ae70-eebcc477b33a",
          "length": 40,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a26590fc-2fed-4016-bb3f-70c6d43bede1",
          "scriptId": "3eb7f817-0a29-4b44-9136-eef0297a8bac",
          "execution": "c6da4cec-21d4-44a6-8722-930ee4252133"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Status code is 200 or 404",
          "message": "expected 500 to be one of [ 200, 404 ]",
          "stack": "AssertionError: expected 500 to be one of [ 200, 404 ]\n   at Object.eval sandbox-script.js:2:40)",
          "checksum": "20f1354d98b99440d158a4c1aca51601",
          "id": "711c1ca6-b682-47c1-9cb0-5d34f60b5994",
          "timestamp": 1747063089909,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 40,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "6c8fd3eb-820c-4857-9dfc-e45bcf672641",
          "name": "delete seller preference",
          "request": {
            "url": {
              "path": [
                "seller",
                "preferences"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c004475c-25b2-42df-82b4-d58ecd921eef",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate response status code (200 for success, 404 if no preferences exist)\r",
                  "pm.test(\"Status code is 200 or 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
                  "});\r",
                  "\r",
                  "// ✅ Check if seller preferences were deleted\r",
                  "pm.test(\"Validate seller preferences deletion response\", function () {\r",
                  "    if (jsonData.success === false) {\r",
                  "        pm.expect(jsonData).to.have.property(\"message\", \"No seller preferences found to delete.\");\r",
                  "        console.log(\"❌ No seller preferences found.\");\r",
                  "    } else {\r",
                  "        pm.expect(jsonData).to.have.property(\"message\", \"Seller preferences deleted successfully.\");\r",
                  "        console.log(\"✅ Seller preferences deleted successfully.\");\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate authorization requirement\r",
                  "pm.test(\"Request requires authorization\", function () {\r",
                  "    pm.response.to.not.have.status(401);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "3c7953e4-2c9b-40a3-b740-a7f3553162b2"
              }
            }
          ]
        },
        "parent": {
          "id": "2b87c8e4-11a7-4c27-8f22-f017a7a60025",
          "name": "seller",
          "item": [
            {
              "id": "e07737be-bc80-4064-964b-d7b5fc400e57",
              "name": "create seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "managerFullName",
                      "value": "{{managerFullName}}",
                      "type": "text"
                    },
                    {
                      "key": "shopName",
                      "value": "{{shopName}}",
                      "type": "text"
                    },
                    {
                      "key": "cacNumber",
                      "value": "{{cacNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "documentType",
                      "value": "NIN",
                      "type": "text"
                    },
                    {
                      "key": "documentNumber",
                      "value": "77280892822",
                      "type": "text"
                    },
                    {
                      "key": "phoneNumber",
                      "value": "08109642088",
                      "type": "text"
                    },
                    {
                      "disabled": true,
                      "key": "idNumber",
                      "value": "56254709617",
                      "type": "text"
                    },
                    {
                      "key": "firstName",
                      "value": "Fidelis",
                      "type": "text"
                    },
                    {
                      "key": "lastName",
                      "value": "Ogbeni",
                      "type": "text"
                    },
                    {
                      "key": "accountType",
                      "value": "INDIVIDUAL",
                      "type": "text"
                    },
                    {
                      "key": "bankCode",
                      "value": "50211",
                      "type": "text"
                    },
                    {
                      "key": "bankName",
                      "value": "FirstBank",
                      "type": "text"
                    },
                    {
                      "key": "accountNumber",
                      "value": "3066415171",
                      "type": "text"
                    },
                    {
                      "key": "documentImage",
                      "type": "file",
                      "src": "postman-cloud:///1f00bb20-a0aa-4780-95e0-d485a8c42125"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ebb38ccc-2e64-4b9e-bd2b-55d1c0ed269c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// // Function to generate a random Nigerian phone number\r",
                      "// function generatePhoneNumber() {\r",
                      "//     return \"081\" + Math.floor(10000000 + Math.random() * 90000000); // Generates 081xxxxxxx\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random 11-digit NIN number\r",
                      "// function generateNIN() {\r",
                      "//     return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random shop name\r",
                      "// function generateShopName() {\r",
                      "//     const shopPrefixes = [\"Super\", \"Mega\", \"Classic\", \"Elite\", \"Premium\", \"Budget\"];\r",
                      "//     const shopSuffixes = [\"Mart\", \"Shop\", \"Store\", \"Bazaar\", \"Hub\", \"Outlet\"];\r",
                      "//     return (\r",
                      "//         shopPrefixes[Math.floor(Math.random() * shopPrefixes.length)] +\r",
                      "//         \" \" +\r",
                      "//         shopSuffixes[Math.floor(Math.random() * shopSuffixes.length)]\r",
                      "//     );\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random Nigerian bank code\r",
                      "// function getRandomBank() {\r",
                      "//     const banks = [\r",
                      "//         { name: \"FirstBank\", code: \"50211\" },\r",
                      "//         { name: \"Access Bank\", code: \"044\" },\r",
                      "//         { name: \"Zenith Bank\", code: \"057\" },\r",
                      "//         { name: \"GTBank\", code: \"058\" },\r",
                      "//         { name: \"UBA\", code: \"033\" }\r",
                      "//     ];\r",
                      "//     return banks[Math.floor(Math.random() * banks.length)];\r",
                      "// }\r",
                      "\r",
                      "// // Generate random seller details\r",
                      "// let firstName = [\"John\", \"James\", \"Sarah\", \"Jane\", \"Michael\", \"Fidelis\"][Math.floor(Math.random() * 6)];\r",
                      "// let lastName = [\"Doe\", \"Smith\", \"Johnson\", \"Brown\", \"Ogbeni\", \"Adams\"][Math.floor(Math.random() * 6)];\r",
                      "// let managerFullName = firstName + \" \" + lastName;\r",
                      "// let shopName = generateShopName();\r",
                      "// let cacNumber = Math.floor(1000 + Math.random() * 9000).toString(); // 4-digit CAC Number\r",
                      "// let documentType = \"NIN\";\r",
                      "// let documentNumber = generateNIN();\r",
                      "// let phoneNumber = generatePhoneNumber();\r",
                      "// let accountType = \"INDIVIDUAL\";\r",
                      "// let bankDetails = getRandomBank();\r",
                      "// let accountNumber = Math.floor(1000000000 + Math.random() * 9000000000).toString();\r",
                      "// let documentImage = \"https://i.imgur.com/10V6mFc.jpeg\"; // Simulated file name\r",
                      "\r",
                      "// // Store variables in Postman environment\r",
                      "// pm.environment.set(\"managerFullName\", managerFullName);\r",
                      "// pm.environment.set(\"firstName\", firstName);\r",
                      "// pm.environment.set(\"lastName\", lastName);\r",
                      "// pm.environment.set(\"shopName\", shopName);\r",
                      "// pm.environment.set(\"cacNumber\", cacNumber);\r",
                      "// pm.environment.set(\"documentType\", documentType);\r",
                      "// pm.environment.set(\"documentNumber\", documentNumber);\r",
                      "// pm.environment.set(\"phoneNumber\", phoneNumber);\r",
                      "// pm.environment.set(\"accountType\", accountType);\r",
                      "// pm.environment.set(\"bankCode\", bankDetails.code);\r",
                      "// pm.environment.set(\"bankName\", bankDetails.name);\r",
                      "// pm.environment.set(\"accountNumber\", accountNumber);\r",
                      "// pm.environment.set(\"documentImage\", documentImage);\r",
                      "\r",
                      "// // Log generated values for debugging\r",
                      "// console.log(\"✅ Auto-Generated Seller Details:\");\r",
                      "// console.log({\r",
                      "//     managerFullName,\r",
                      "//     firstName,\r",
                      "//     lastName,\r",
                      "//     shopName,\r",
                      "//     cacNumber,\r",
                      "//     documentType,\r",
                      "//     documentNumber,\r",
                      "//     phoneNumber,\r",
                      "//     accountType,\r",
                      "//     bankCode: bankDetails.code,\r",
                      "//     bankName: bankDetails.name,\r",
                      "//     accountNumber,\r",
                      "//     documentImage\r",
                      "// });\r",
                      ""
                    ],
                    "_lastExecutionId": "b53e8786-454b-43da-954d-a48b0dc523cb"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 201 (Created)\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success message\r",
                      "pm.test(\"Response message is correct\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\", \"Seller created successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response data structure\r",
                      "pm.test(\"Response contains seller details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"sellerId\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"managerFullName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"shopName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"phoneNumber\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"bankName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"accountNumber\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Store seller ID for future requests\r",
                      "// pm.environment.set(\"sellerId\", jsonData.data.sellerId);\r",
                      "// console.log(\"Seller ID stored:\", jsonData.data.sellerId);\r",
                      "\r",
                      "// ✅ Validate error response for invalid input\r",
                      "pm.test(\"Error response for invalid input\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Invalid input\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate error response for missing required fields\r",
                      "pm.test(\"Error response for missing fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Required fields are missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
                  }
                }
              ]
            },
            {
              "id": "952e40e0-1f18-4aea-89a2-c66913ffb6a9",
              "name": "get seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eb7f817-0a29-4b44-9136-eef0297a8bac",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure\r",
                      "pm.test(\"Response contains valid seller details or No Seller added\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "\r",
                      "    let seller = jsonData.data;\r",
                      "    \r",
                      "    if(jsonData.data == null){\r",
                      "        pm.expect(jsonData.message).to.include(\"No Seller added\");\r",
                      "\r",
                      "    } else{\r",
                      "    pm.expect(seller).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"email\").that.is.a(\"string\").and.includes(\"@\");\r",
                      "    pm.expect(seller).to.have.property(\"phone\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"storeName\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store Seller ID for future use\r",
                      "if (jsonData.data && jsonData.data.id) {\r",
                      "    pm.environment.set(\"seller_id\", jsonData.data.id);\r",
                      "    console.log(\"Stored Seller ID:\", jsonData.data.id);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "c6da4cec-21d4-44a6-8722-930ee4252133"
                  }
                }
              ]
            },
            {
              "id": "6985ff3d-9862-4e99-83a1-16449fed7da1",
              "name": "delete seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "612899eb-aa78-41fa-b606-768894bf91a5",
              "name": "get seller preference",
              "request": {
                "url": {
                  "path": [
                    "seller",
                    "preferences"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "249f0bc1-7156-4aa8-a9bc-40fef11f7a5f",
              "name": "seller products",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "seller-products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "categoryId",
                      "value": "{{categoryId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "6c8fd3eb-820c-4857-9dfc-e45bcf672641",
              "name": "delete seller preference",
              "request": {
                "url": {
                  "path": [
                    "seller",
                    "preferences"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c004475c-25b2-42df-82b4-d58ecd921eef",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code (200 for success, 404 if no preferences exist)\r",
                      "pm.test(\"Status code is 200 or 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
                      "});\r",
                      "\r",
                      "// ✅ Check if seller preferences were deleted\r",
                      "pm.test(\"Validate seller preferences deletion response\", function () {\r",
                      "    if (jsonData.success === false) {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\", \"No seller preferences found to delete.\");\r",
                      "        console.log(\"❌ No seller preferences found.\");\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\", \"Seller preferences deleted successfully.\");\r",
                      "        console.log(\"✅ Seller preferences deleted successfully.\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3c7953e4-2c9b-40a3-b740-a7f3553162b2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3b6300f0-e886-4d0f-8d6e-118b620d4e74",
          "length": 40,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b088164d-046a-41df-8a10-f00521e266fe",
          "scriptId": "c004475c-25b2-42df-82b4-d58ecd921eef",
          "execution": "3c7953e4-2c9b-40a3-b740-a7f3553162b2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 2,
          "test": "Validate seller preferences deletion response",
          "message": "expected { success: false, …(1) } to have property 'message' of 'No seller preferences found to delete.', but got 'An internal server error occurred'",
          "stack": "AssertionError: expected { success: false, …(1) } to have property 'message' of 'No seller preferences found to delete.', but got 'An internal server error occurred'\n   at Object.eval sandbox-script.js:3:40)",
          "checksum": "8de1c4be7babc8111ee93e3aab09a487",
          "id": "f1a643a8-8a57-4949-8900-4935214ad035",
          "timestamp": 1747063089910,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 40,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "6c8fd3eb-820c-4857-9dfc-e45bcf672641",
          "name": "delete seller preference",
          "request": {
            "url": {
              "path": [
                "seller",
                "preferences"
              ],
              "host": [
                "{{base_url}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "type": "string",
                  "value": "{{adminAuthToken}}",
                  "key": "token"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c004475c-25b2-42df-82b4-d58ecd921eef",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "// ✅ Ensure response is in JSON format\r",
                  "pm.test(\"Response is in JSON format\", function () {\r",
                  "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                  "});\r",
                  "\r",
                  "// ✅ Parse response JSON\r",
                  "let jsonData = pm.response.json();\r",
                  "\r",
                  "// ✅ Validate response status code (200 for success, 404 if no preferences exist)\r",
                  "pm.test(\"Status code is 200 or 404\", function () {\r",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
                  "});\r",
                  "\r",
                  "// ✅ Check if seller preferences were deleted\r",
                  "pm.test(\"Validate seller preferences deletion response\", function () {\r",
                  "    if (jsonData.success === false) {\r",
                  "        pm.expect(jsonData).to.have.property(\"message\", \"No seller preferences found to delete.\");\r",
                  "        console.log(\"❌ No seller preferences found.\");\r",
                  "    } else {\r",
                  "        pm.expect(jsonData).to.have.property(\"message\", \"Seller preferences deleted successfully.\");\r",
                  "        console.log(\"✅ Seller preferences deleted successfully.\");\r",
                  "    }\r",
                  "});\r",
                  "\r",
                  "// ✅ Validate authorization requirement\r",
                  "pm.test(\"Request requires authorization\", function () {\r",
                  "    pm.response.to.not.have.status(401);\r",
                  "});\r",
                  ""
                ],
                "_lastExecutionId": "3c7953e4-2c9b-40a3-b740-a7f3553162b2"
              }
            }
          ]
        },
        "parent": {
          "id": "2b87c8e4-11a7-4c27-8f22-f017a7a60025",
          "name": "seller",
          "item": [
            {
              "id": "e07737be-bc80-4064-964b-d7b5fc400e57",
              "name": "create seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "managerFullName",
                      "value": "{{managerFullName}}",
                      "type": "text"
                    },
                    {
                      "key": "shopName",
                      "value": "{{shopName}}",
                      "type": "text"
                    },
                    {
                      "key": "cacNumber",
                      "value": "{{cacNumber}}",
                      "type": "text"
                    },
                    {
                      "key": "documentType",
                      "value": "NIN",
                      "type": "text"
                    },
                    {
                      "key": "documentNumber",
                      "value": "77280892822",
                      "type": "text"
                    },
                    {
                      "key": "phoneNumber",
                      "value": "08109642088",
                      "type": "text"
                    },
                    {
                      "disabled": true,
                      "key": "idNumber",
                      "value": "56254709617",
                      "type": "text"
                    },
                    {
                      "key": "firstName",
                      "value": "Fidelis",
                      "type": "text"
                    },
                    {
                      "key": "lastName",
                      "value": "Ogbeni",
                      "type": "text"
                    },
                    {
                      "key": "accountType",
                      "value": "INDIVIDUAL",
                      "type": "text"
                    },
                    {
                      "key": "bankCode",
                      "value": "50211",
                      "type": "text"
                    },
                    {
                      "key": "bankName",
                      "value": "FirstBank",
                      "type": "text"
                    },
                    {
                      "key": "accountNumber",
                      "value": "3066415171",
                      "type": "text"
                    },
                    {
                      "key": "documentImage",
                      "type": "file",
                      "src": "postman-cloud:///1f00bb20-a0aa-4780-95e0-d485a8c42125"
                    }
                  ]
                },
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ebb38ccc-2e64-4b9e-bd2b-55d1c0ed269c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// // Function to generate a random Nigerian phone number\r",
                      "// function generatePhoneNumber() {\r",
                      "//     return \"081\" + Math.floor(10000000 + Math.random() * 90000000); // Generates 081xxxxxxx\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random 11-digit NIN number\r",
                      "// function generateNIN() {\r",
                      "//     return Math.floor(10000000000 + Math.random() * 90000000000).toString();\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random shop name\r",
                      "// function generateShopName() {\r",
                      "//     const shopPrefixes = [\"Super\", \"Mega\", \"Classic\", \"Elite\", \"Premium\", \"Budget\"];\r",
                      "//     const shopSuffixes = [\"Mart\", \"Shop\", \"Store\", \"Bazaar\", \"Hub\", \"Outlet\"];\r",
                      "//     return (\r",
                      "//         shopPrefixes[Math.floor(Math.random() * shopPrefixes.length)] +\r",
                      "//         \" \" +\r",
                      "//         shopSuffixes[Math.floor(Math.random() * shopSuffixes.length)]\r",
                      "//     );\r",
                      "// }\r",
                      "\r",
                      "// // Function to generate a random Nigerian bank code\r",
                      "// function getRandomBank() {\r",
                      "//     const banks = [\r",
                      "//         { name: \"FirstBank\", code: \"50211\" },\r",
                      "//         { name: \"Access Bank\", code: \"044\" },\r",
                      "//         { name: \"Zenith Bank\", code: \"057\" },\r",
                      "//         { name: \"GTBank\", code: \"058\" },\r",
                      "//         { name: \"UBA\", code: \"033\" }\r",
                      "//     ];\r",
                      "//     return banks[Math.floor(Math.random() * banks.length)];\r",
                      "// }\r",
                      "\r",
                      "// // Generate random seller details\r",
                      "// let firstName = [\"John\", \"James\", \"Sarah\", \"Jane\", \"Michael\", \"Fidelis\"][Math.floor(Math.random() * 6)];\r",
                      "// let lastName = [\"Doe\", \"Smith\", \"Johnson\", \"Brown\", \"Ogbeni\", \"Adams\"][Math.floor(Math.random() * 6)];\r",
                      "// let managerFullName = firstName + \" \" + lastName;\r",
                      "// let shopName = generateShopName();\r",
                      "// let cacNumber = Math.floor(1000 + Math.random() * 9000).toString(); // 4-digit CAC Number\r",
                      "// let documentType = \"NIN\";\r",
                      "// let documentNumber = generateNIN();\r",
                      "// let phoneNumber = generatePhoneNumber();\r",
                      "// let accountType = \"INDIVIDUAL\";\r",
                      "// let bankDetails = getRandomBank();\r",
                      "// let accountNumber = Math.floor(1000000000 + Math.random() * 9000000000).toString();\r",
                      "// let documentImage = \"https://i.imgur.com/10V6mFc.jpeg\"; // Simulated file name\r",
                      "\r",
                      "// // Store variables in Postman environment\r",
                      "// pm.environment.set(\"managerFullName\", managerFullName);\r",
                      "// pm.environment.set(\"firstName\", firstName);\r",
                      "// pm.environment.set(\"lastName\", lastName);\r",
                      "// pm.environment.set(\"shopName\", shopName);\r",
                      "// pm.environment.set(\"cacNumber\", cacNumber);\r",
                      "// pm.environment.set(\"documentType\", documentType);\r",
                      "// pm.environment.set(\"documentNumber\", documentNumber);\r",
                      "// pm.environment.set(\"phoneNumber\", phoneNumber);\r",
                      "// pm.environment.set(\"accountType\", accountType);\r",
                      "// pm.environment.set(\"bankCode\", bankDetails.code);\r",
                      "// pm.environment.set(\"bankName\", bankDetails.name);\r",
                      "// pm.environment.set(\"accountNumber\", accountNumber);\r",
                      "// pm.environment.set(\"documentImage\", documentImage);\r",
                      "\r",
                      "// // Log generated values for debugging\r",
                      "// console.log(\"✅ Auto-Generated Seller Details:\");\r",
                      "// console.log({\r",
                      "//     managerFullName,\r",
                      "//     firstName,\r",
                      "//     lastName,\r",
                      "//     shopName,\r",
                      "//     cacNumber,\r",
                      "//     documentType,\r",
                      "//     documentNumber,\r",
                      "//     phoneNumber,\r",
                      "//     accountType,\r",
                      "//     bankCode: bankDetails.code,\r",
                      "//     bankName: bankDetails.name,\r",
                      "//     accountNumber,\r",
                      "//     documentImage\r",
                      "// });\r",
                      ""
                    ],
                    "_lastExecutionId": "b53e8786-454b-43da-954d-a48b0dc523cb"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "fa22dc2f-4eb6-4bbe-9805-c1da04af85b3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 201 (Created)\", function () {\r",
                      "    pm.response.to.have.status(201);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success message\r",
                      "pm.test(\"Response message is correct\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\", \"Seller created successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response data structure\r",
                      "pm.test(\"Response contains seller details\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"sellerId\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"managerFullName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"shopName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"phoneNumber\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"bankName\").that.is.a(\"string\");\r",
                      "    pm.expect(jsonData.data).to.have.property(\"accountNumber\").that.is.a(\"string\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Store seller ID for future requests\r",
                      "// pm.environment.set(\"sellerId\", jsonData.data.sellerId);\r",
                      "// console.log(\"Seller ID stored:\", jsonData.data.sellerId);\r",
                      "\r",
                      "// ✅ Validate error response for invalid input\r",
                      "pm.test(\"Error response for invalid input\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Invalid input\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate error response for missing required fields\r",
                      "pm.test(\"Error response for missing fields\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", false);\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"Required fields are missing\");\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "a65af6c1-d5ae-45de-a478-06d96aa8b871"
                  }
                }
              ]
            },
            {
              "id": "952e40e0-1f18-4aea-89a2-c66913ffb6a9",
              "name": "get seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3eb7f817-0a29-4b44-9136-eef0297a8bac",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code\r",
                      "pm.test(\"Status code is 200\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate success flag\r",
                      "pm.test(\"Response contains success flag\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"success\", true);\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate response message\r",
                      "pm.test(\"Response contains success message\", function () {\r",
                      "    pm.expect(jsonData).to.have.property(\"message\").that.includes(\"successfully\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate data structure\r",
                      "pm.test(\"Response contains valid seller details or No Seller added\", function () {\r",
                      "    pm.expect(jsonData.data).to.have.property(\"data\").that.is.an(\"object\");\r",
                      "\r",
                      "    let seller = jsonData.data;\r",
                      "    \r",
                      "    if(jsonData.data == null){\r",
                      "        pm.expect(jsonData.message).to.include(\"No Seller added\");\r",
                      "\r",
                      "    } else{\r",
                      "    pm.expect(seller).to.have.property(\"id\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"name\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"email\").that.is.a(\"string\").and.includes(\"@\");\r",
                      "    pm.expect(seller).to.have.property(\"phone\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"storeName\").that.is.a(\"string\");\r",
                      "    pm.expect(seller).to.have.property(\"createdAt\").that.is.a(\"string\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      "\r",
                      "// ✅ Store Seller ID for future use\r",
                      "if (jsonData.data && jsonData.data.id) {\r",
                      "    pm.environment.set(\"seller_id\", jsonData.data.id);\r",
                      "    console.log(\"Stored Seller ID:\", jsonData.data.id);\r",
                      "}\r",
                      ""
                    ],
                    "_lastExecutionId": "c6da4cec-21d4-44a6-8722-930ee4252133"
                  }
                }
              ]
            },
            {
              "id": "6985ff3d-9862-4e99-83a1-16449fed7da1",
              "name": "delete seller",
              "request": {
                "url": {
                  "path": [
                    "seller"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "612899eb-aa78-41fa-b606-768894bf91a5",
              "name": "get seller preference",
              "request": {
                "url": {
                  "path": [
                    "seller",
                    "preferences"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{token}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "249f0bc1-7156-4aa8-a9bc-40fef11f7a5f",
              "name": "seller products",
              "request": {
                "url": {
                  "path": [
                    "products",
                    "seller-products"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [
                    {
                      "key": "categoryId",
                      "value": "{{categoryId}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{authToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": []
            },
            {
              "id": "6c8fd3eb-820c-4857-9dfc-e45bcf672641",
              "name": "delete seller preference",
              "request": {
                "url": {
                  "path": [
                    "seller",
                    "preferences"
                  ],
                  "host": [
                    "{{base_url}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "DELETE",
                "auth": {
                  "type": "bearer",
                  "bearer": [
                    {
                      "type": "string",
                      "value": "{{adminAuthToken}}",
                      "key": "token"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c004475c-25b2-42df-82b4-d58ecd921eef",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "// ✅ Ensure response is in JSON format\r",
                      "pm.test(\"Response is in JSON format\", function () {\r",
                      "    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
                      "});\r",
                      "\r",
                      "// ✅ Parse response JSON\r",
                      "let jsonData = pm.response.json();\r",
                      "\r",
                      "// ✅ Validate response status code (200 for success, 404 if no preferences exist)\r",
                      "pm.test(\"Status code is 200 or 404\", function () {\r",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 404]);\r",
                      "});\r",
                      "\r",
                      "// ✅ Check if seller preferences were deleted\r",
                      "pm.test(\"Validate seller preferences deletion response\", function () {\r",
                      "    if (jsonData.success === false) {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\", \"No seller preferences found to delete.\");\r",
                      "        console.log(\"❌ No seller preferences found.\");\r",
                      "    } else {\r",
                      "        pm.expect(jsonData).to.have.property(\"message\", \"Seller preferences deleted successfully.\");\r",
                      "        console.log(\"✅ Seller preferences deleted successfully.\");\r",
                      "    }\r",
                      "});\r",
                      "\r",
                      "// ✅ Validate authorization requirement\r",
                      "pm.test(\"Request requires authorization\", function () {\r",
                      "    pm.response.to.not.have.status(401);\r",
                      "});\r",
                      ""
                    ],
                    "_lastExecutionId": "3c7953e4-2c9b-40a3-b740-a7f3553162b2"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3b6300f0-e886-4d0f-8d6e-118b620d4e74",
          "length": 40,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "b088164d-046a-41df-8a10-f00521e266fe",
          "scriptId": "c004475c-25b2-42df-82b4-d58ecd921eef",
          "execution": "3c7953e4-2c9b-40a3-b740-a7f3553162b2"
        }
      }
    ],
    "error": null
  },
  "consoleLogs": {
    "7d3066fb-260e-4188-bb3b-35db31689dff": [
      {
        "cursor": {
          "ref": "7d3066fb-260e-4188-bb3b-35db31689dff",
          "length": 40,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "scriptId": "b87a7bd6-3722-42d2-b1b6-276d591d186d",
          "execution": "5fb960e2-cf7e-4087-b903-58d48f887cfe"
        },
        "level": "log",
        "messages": [
          "Running test case: valid_request",
          {
            "email": "test_241@example.com",
            "otpCode": "887624",
            "password": "Pass5078"
          }
        ]
      }
    ],
    "3e37931c-0dc3-40fa-a455-42bd8f1a947f": [
      {
        "cursor": {
          "ref": "3e37931c-0dc3-40fa-a455-42bd8f1a947f",
          "length": 40,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "scriptId": "e813ff3a-44d9-4442-b93c-c6826fab09d1",
          "execution": "077a431c-e721-4525-b644-fb94b3622082"
        },
        "level": "log",
        "messages": [
          "Running test case: valid_request",
          {
            "email": "test_241@example.com",
            "oldPassword": "Pass5078",
            "newPassword": "Pass7813"
          }
        ]
      },
      {
        "cursor": {
          "ref": "3e37931c-0dc3-40fa-a455-42bd8f1a947f",
          "length": 40,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "scriptId": "e813ff3a-44d9-4442-b93c-c6826fab09d1",
          "execution": "077a431c-e721-4525-b644-fb94b3622082"
        },
        "level": "log",
        "messages": [
          "New password generated and stored: Pass7813"
        ]
      },
      {
        "cursor": {
          "ref": "3e37931c-0dc3-40fa-a455-42bd8f1a947f",
          "length": 40,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6b4a76bc-c6dc-4d90-bf3d-7aebf4040b22",
          "scriptId": "a310fca9-96aa-4499-979b-42b2240ad03b",
          "execution": "f15e6632-0783-4cb5-a3f6-3af25a06f62b"
        },
        "level": "log",
        "messages": [
          "Executed test case: valid_request",
          {
            "email": "test_241@example.com",
            "oldPassword": "Pass5078",
            "newPassword": "Pass7813"
          }
        ]
      }
    ],
    "626a389e-03b8-4e53-8076-63e529a7049a": [
      {
        "cursor": {
          "ref": "626a389e-03b8-4e53-8076-63e529a7049a",
          "length": 40,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "scriptId": "7502f216-0b7d-4dab-a59d-12d1bc961fbd",
          "execution": "e2867971-68d8-4f34-94b4-1e915fcd3846"
        },
        "level": "log",
        "messages": [
          "Running test case: valid_request",
          {
            "email": "test_241@example.com"
          }
        ]
      }
    ],
    "9c9c796c-87b1-4382-9abe-18ed3e0568d7": [
      {
        "cursor": {
          "ref": "9c9c796c-87b1-4382-9abe-18ed3e0568d7",
          "length": 40,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "scriptId": "d4d7ea6e-85f2-4292-9743-b85e740811d9",
          "execution": "83139b44-48ff-46e5-99a6-9323c2063966"
        },
        "level": "log",
        "messages": [
          "✅ OTP Retrieved: 848350"
        ]
      }
    ],
    "766fdbc6-21d0-4e5e-b362-e4faf4d00fb4": [
      {
        "cursor": {
          "ref": "766fdbc6-21d0-4e5e-b362-e4faf4d00fb4",
          "length": 40,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "scriptId": "efa8afee-70e4-4747-a958-fd5a404797c5",
          "execution": "a9c4de27-37cf-46b1-bc9c-dcf87b3490a3"
        },
        "level": "log",
        "messages": [
          "Running test case: valid_request",
          {
            "firstName": "Thomas",
            "lastName": "Rodri",
            "phone": "08138532342"
          }
        ]
      }
    ],
    "280b0a9a-74d1-4fdc-910f-8af5fdc86500": [
      {
        "cursor": {
          "ref": "280b0a9a-74d1-4fdc-910f-8af5fdc86500",
          "length": 40,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "scriptId": "92c7a403-7dd5-45e0-aadc-b6787e37c1ac",
          "execution": "eba63cbd-aab2-4ad7-8535-fa07aa5fa79d"
        },
        "level": "log",
        "messages": [
          "Running test case: valid_request",
          {}
        ]
      },
      {
        "cursor": {
          "ref": "280b0a9a-74d1-4fdc-910f-8af5fdc86500",
          "length": 40,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "e08e3446-a93a-4601-94c7-86f4e9edf037",
          "scriptId": "10774409-95a3-4250-86c8-b8644b7d34b5",
          "execution": "e6454b78-b3e4-49ae-a8dc-d127ac08d62f"
        },
        "level": "log",
        "messages": [
          "Running test case: valid_request"
        ]
      }
    ],
    "848c4dfc-158d-4cf1-b262-22419425803a": [
      {
        "cursor": {
          "ref": "848c4dfc-158d-4cf1-b262-22419425803a",
          "length": 40,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "scriptId": "b63228d3-10fb-4d27-91f8-89102aaa82d5",
          "execution": "1e4c2601-efe0-48ff-afc8-203e4b4e4ebc"
        },
        "level": "log",
        "messages": [
          "Running test case: valid_request",
          {
            "name": "John Doe",
            "email": "test_241@example.com",
            "subject": "Inquiry about services",
            "message": "I would like to know more about your offerings."
          }
        ]
      }
    ],
    "18ef7842-16d2-4b0a-8b0d-3b84c9ae1736": [
      {
        "cursor": {
          "ref": "18ef7842-16d2-4b0a-8b0d-3b84c9ae1736",
          "length": 40,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "scriptId": "6071d595-689d-444a-b87a-f65e1a2c2b11",
          "execution": "244b5dba-00f9-4d53-b569-64ca8b09aaa2"
        },
        "level": "log",
        "messages": [
          "✅ Running test case: valid_request",
          {
            "email": "testog@e-record.com",
            "password": "Pass$12345"
          }
        ]
      },
      {
        "cursor": {
          "ref": "18ef7842-16d2-4b0a-8b0d-3b84c9ae1736",
          "length": 40,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "scriptId": "6071d595-689d-444a-b87a-f65e1a2c2b11",
          "execution": "244b5dba-00f9-4d53-b569-64ca8b09aaa2"
        },
        "level": "log",
        "messages": [
          "🟢 Final request payload stored in environment:",
          "{\"email\":\"testog@e-record.com\",\"password\":\"Pass$12345\"}"
        ]
      }
    ],
    "53cc2a54-0d6f-4b5a-a09f-398c1ed1caf1": [
      {
        "cursor": {
          "ref": "53cc2a54-0d6f-4b5a-a09f-398c1ed1caf1",
          "length": 40,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "828e1b46-02fe-4d86-b59b-9d81325bb160"
        },
        "level": "warn",
        "messages": [
          "Form param `avatar`, file load error: \"postman-cloud:///1f00a020-2861-4780-8431-d61fc2551cd6\", no such file"
        ]
      }
    ],
    "3be21d6b-6371-49ee-878b-8f462b20053b": [
      {
        "cursor": {
          "ref": "3be21d6b-6371-49ee-878b-8f462b20053b",
          "length": 40,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "scriptId": "c85ee4b7-eb6c-48b7-a8a0-683cc75c5c2b",
          "execution": "26bfd33f-e3f6-4651-b5c9-1bfb4edf5196"
        },
        "level": "warn",
        "messages": [
          "⚠️ Warning: Missing 'admin_token'. Ensure authentication is set."
        ]
      },
      {
        "cursor": {
          "ref": "3be21d6b-6371-49ee-878b-8f462b20053b",
          "length": 40,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "scriptId": "c85ee4b7-eb6c-48b7-a8a0-683cc75c5c2b",
          "execution": "26bfd33f-e3f6-4651-b5c9-1bfb4edf5196"
        },
        "level": "log",
        "messages": [
          "🟢 Auto-generated Category:",
          {
            "name": "Stylist Clothing",
            "description": "Trendy outfits for every season, occasion, and lifestyle."
          }
        ]
      }
    ],
    "925f1ced-09b5-46e7-a9a3-6d0c162919fe": [
      {
        "cursor": {
          "ref": "925f1ced-09b5-46e7-a9a3-6d0c162919fe",
          "length": 40,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "a7b6d2d4-a228-48dc-8aa7-cd4d3795473e",
          "scriptId": "9deb947d-8e87-427a-a3e3-0ca3e3e78f7f",
          "execution": "e75d91ba-3a5c-4776-bfd8-ba0e60ad3afc"
        },
        "level": "log",
        "messages": [
          "🟢 Randomly Stored Category ID:",
          "87106fc7-6b21-46a9-b007-ab0363126348"
        ]
      }
    ],
    "25d807b2-5822-40ca-b7b0-93b344a59a20": [
      {
        "cursor": {
          "ref": "25d807b2-5822-40ca-b7b0-93b344a59a20",
          "length": 40,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "scriptId": "cb98c323-54bd-4752-93fc-ded8f0859c7b",
          "execution": "58edd2f4-31b2-43c8-8950-3c0da04c76b8"
        },
        "level": "warn",
        "messages": [
          "⚠️ Missing 'admin_token'. Ensure authentication is set."
        ]
      },
      {
        "cursor": {
          "ref": "25d807b2-5822-40ca-b7b0-93b344a59a20",
          "length": 40,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "scriptId": "cb98c323-54bd-4752-93fc-ded8f0859c7b",
          "execution": "58edd2f4-31b2-43c8-8950-3c0da04c76b8"
        },
        "level": "log",
        "messages": [
          "🟢 Using Category ID:",
          "87106fc7-6b21-46a9-b007-ab0363126348"
        ]
      }
    ],
    "b7da7082-a2fd-48aa-984d-519a45109519": [
      {
        "cursor": {
          "ref": "b7da7082-a2fd-48aa-984d-519a45109519",
          "length": 40,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "b402b9bc-cdbe-4298-a385-7ffa371778b3",
          "scriptId": "427614b5-9354-458b-bd1e-f7a3fc0dced7",
          "execution": "7fdcbba5-51d6-422a-9b89-b13427c00d13"
        },
        "level": "log",
        "messages": [
          "🔹 Response Body:",
          {
            "success": false,
            "message": "An internal server error occurred"
          }
        ]
      }
    ],
    "4f86a33f-cd83-4cb1-ab7d-d65171404455": [
      {
        "cursor": {
          "ref": "4f86a33f-cd83-4cb1-ab7d-d65171404455",
          "length": 40,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "af715c5b-a277-4e13-a936-f4f485d3f4c8",
          "scriptId": "5acdbd07-8bbd-4e88-9ea6-c89fee8db72e",
          "execution": "ec167e80-cfe3-4cc1-ae4c-3eb9273e706d"
        },
        "level": "log",
        "messages": [
          "First product ID stored:",
          "50aa5b79-e130-48f3-bd96-9d1285a6558e"
        ]
      },
      {
        "cursor": {
          "ref": "4f86a33f-cd83-4cb1-ab7d-d65171404455",
          "length": 40,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "af715c5b-a277-4e13-a936-f4f485d3f4c8",
          "scriptId": "5acdbd07-8bbd-4e88-9ea6-c89fee8db72e",
          "execution": "ec167e80-cfe3-4cc1-ae4c-3eb9273e706d"
        },
        "level": "log",
        "messages": [
          "Extracted Product IDs:",
          [
            "50aa5b79-e130-48f3-bd96-9d1285a6558e",
            "47370a08-ac05-47a0-869f-32feb25f9acb",
            "36a7a22b-4e53-4204-aff0-cb975220a1bf",
            "362c5422-72b7-42d7-959c-79a90de26734",
            "317ff2ec-0379-479f-b187-4e2a68cbf0bf",
            "219c2f4c-1e52-4467-901b-1976fc8e7fcf",
            "166ab255-435a-44b9-b6e2-7a2d51f02058",
            "146c0efa-bd05-4c0c-915c-f565c90c318e"
          ]
        ]
      }
    ],
    "9e9708c5-aad3-4f51-a2d2-0d6efeab4cfe": [
      {
        "cursor": {
          "ref": "9e9708c5-aad3-4f51-a2d2-0d6efeab4cfe",
          "length": 40,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "a9dd0417-27b8-42ed-ab4a-438605594605",
          "scriptId": "e3928b7d-bb79-44ad-8b81-032f3d61c9b9",
          "execution": "337313f0-1a4e-48a3-81fa-bec5badf73dc"
        },
        "level": "log",
        "messages": [
          "✅ Stored product details as environment variables."
        ]
      }
    ],
    "e5210c3b-e34d-464c-8464-fd7265017270": [
      {
        "cursor": {
          "ref": "e5210c3b-e34d-464c-8464-fd7265017270",
          "length": 40,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "scriptId": "5bd1202c-89cc-4b06-b701-f4ef429f75e9",
          "execution": "23bd7d97-e382-4214-b968-09ce1c0c2dfe"
        },
        "level": "log",
        "messages": [
          "Randomly selected Product ID:",
          "47370a08-ac05-47a0-869f-32feb25f9acb"
        ]
      }
    ],
    "2485dd18-d921-4c4a-b402-fe06caf05267": [
      {
        "cursor": {
          "ref": "2485dd18-d921-4c4a-b402-fe06caf05267",
          "length": 40,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "fbda0774-f64c-4a16-86a0-c64a87b802b3",
          "scriptId": "83c0d520-e58c-413f-ab9a-6a86fce39f05",
          "execution": "4158cfe7-cb1b-4531-9629-d21d38d52ec4"
        },
        "level": "log",
        "messages": [
          "Stored brand names:",
          [
            "Adidas",
            "Coca-cola",
            "Nestlé",
            "L'oréal",
            "Sony"
          ]
        ]
      }
    ],
    "185f16ea-c567-4a7e-a2ba-7045e1af4a88": [
      {
        "cursor": {
          "ref": "185f16ea-c567-4a7e-a2ba-7045e1af4a88",
          "length": 40,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "44bd28b1-a908-42da-9ffa-0aa0ecdda280"
        },
        "level": "warn",
        "messages": [
          "Form param `documentImage`, file load error: \"postman-cloud:///1f00bb20-a0aa-4780-95e0-d485a8c42125\", no such file"
        ]
      }
    ]
  }
}